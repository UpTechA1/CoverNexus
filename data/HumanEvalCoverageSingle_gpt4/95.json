{
    "task_id": "HumanEval/95",
    "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
    "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
    "entry_point": "check_dict_case",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "import unittest\nfrom codebase import check_dict_case\n\n\nclass TestCheckDictCase(unittest.TestCase):\n\n    def test_all_lower_case_1(self):\n        self.assertTrue(check_dict_case({'a': 'apple', 'b': 'banana'}))\n\n    def test_mixed_case_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', 'A': 'banana', 'B':\n            'banana'}))\n\n    def test_non_string_key_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', (8): 'banana', 'a':\n            'apple'}))\n\n    def test_all_upper_case_1(self):\n        self.assertTrue(check_dict_case({'STATE': 'NC', 'ZIP': '12345'}))\n\n    def test_proper_case_1(self):\n        self.assertFalse(check_dict_case({'Name': 'John', 'Age': '36',\n            'City': 'Houston'}))\n\n    def test_empty_dict_1(self):\n        self.assertFalse(check_dict_case({}))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                   Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Untitled/test_coverage_multiagents/temp_test_codeqwen/codebase.py      19      0   100%\n--------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                     19      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "best_score_generated_test_script": "import unittest\nfrom codebase import check_dict_case\n\n\nclass TestCheckDictCase(unittest.TestCase):\n\n    def test_all_lower_case_1(self):\n        self.assertTrue(check_dict_case({'a': 'apple', 'b': 'banana'}))\n\n    def test_mixed_case_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', 'A': 'banana', 'B':\n            'banana'}))\n\n    def test_non_string_key_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', (8): 'banana', 'a':\n            'apple'}))\n\n    def test_all_upper_case_1(self):\n        self.assertTrue(check_dict_case({'STATE': 'NC', 'ZIP': '12345'}))\n\n    def test_proper_case_1(self):\n        self.assertFalse(check_dict_case({'Name': 'John', 'Age': '36',\n            'City': 'Houston'}))\n\n    def test_empty_dict_1(self):\n        self.assertFalse(check_dict_case({}))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "import unittest\nfrom codebase import check_dict_case\n\n\nclass TestCheckDictCase(unittest.TestCase):\n\n    def test_all_lower_case_1(self):\n        self.assertTrue(check_dict_case({'a': 'apple', 'b': 'banana'}))\n\n    def test_mixed_case_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', 'A': 'banana', 'B':\n            'banana'}))\n\n    def test_non_string_key_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', (8): 'banana', 'a':\n            'apple'}))\n\n    def test_all_upper_case_1(self):\n        self.assertTrue(check_dict_case({'STATE': 'NC', 'ZIP': '12345'}))\n\n    def test_proper_case_1(self):\n        self.assertFalse(check_dict_case({'Name': 'John', 'Age': '36',\n            'City': 'Houston'}))\n\n    def test_empty_dict_1(self):\n        self.assertFalse(check_dict_case({}))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "import unittest\nfrom codebase import check_dict_case\n\n\nclass TestCheckDictCase(unittest.TestCase):\n\n    def test_all_lower_case_1(self):\n        self.assertTrue(check_dict_case({'a': 'apple', 'b': 'banana'}))\n\n    def test_mixed_case_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', 'A': 'banana', 'B':\n            'banana'}))\n\n    def test_non_string_key_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', (8): 'banana', 'a':\n            'apple'}))\n\n    def test_all_upper_case_1(self):\n        self.assertTrue(check_dict_case({'STATE': 'NC', 'ZIP': '12345'}))\n\n    def test_proper_case_1(self):\n        self.assertFalse(check_dict_case({'Name': 'John', 'Age': '36',\n            'City': 'Houston'}))\n\n    def test_empty_dict_1(self):\n        self.assertFalse(check_dict_case({}))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "import unittest\nfrom codebase import check_dict_case\n\n\nclass TestCheckDictCase(unittest.TestCase):\n\n    def test_all_lower_case_1(self):\n        self.assertTrue(check_dict_case({'a': 'apple', 'b': 'banana'}))\n\n    def test_mixed_case_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', 'A': 'banana', 'B':\n            'banana'}))\n\n    def test_non_string_key_1(self):\n        self.assertFalse(check_dict_case({'a': 'apple', (8): 'banana', 'a':\n            'apple'}))\n\n    def test_all_upper_case_1(self):\n        self.assertTrue(check_dict_case({'STATE': 'NC', 'ZIP': '12345'}))\n\n    def test_proper_case_1(self):\n        self.assertFalse(check_dict_case({'Name': 'John', 'Age': '36',\n            'City': 'Houston'}))\n\n    def test_empty_dict_1(self):\n        self.assertFalse(check_dict_case({}))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 100.0,
    "use_filter": false,
    "exist_not_error": true
}