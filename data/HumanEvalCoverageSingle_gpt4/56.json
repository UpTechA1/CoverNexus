{
    "task_id": "HumanEval/56",
    "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
    "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
    "entry_point": "correct_bracketing",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_correct_bracketing_1(self):\n        self.assertEqual(correct_bracketing('<'), False)\n\n    def test_correct_bracketing_2(self):\n        self.assertEqual(correct_bracketing('<>'), True)\n\n    def test_correct_bracketing_3(self):\n        self.assertEqual(correct_bracketing('<<><>>'), True)\n\n    def test_correct_bracketing_4(self):\n        self.assertEqual(correct_bracketing('><<>'), False)\n\n    def test_correct_bracketing_5(self):\n        self.assertEqual(correct_bracketing('<<><<>>'), False)\n\n    def test_correct_bracketing_6(self):\n        self.assertEqual(correct_bracketing('<<><<>>>'), True)\n\n    def test_correct_bracketing_7(self):\n        self.assertEqual(correct_bracketing('><<><>>'), False)\n\n    def test_correct_bracketing_8(self):\n        self.assertEqual(correct_bracketing('><<><>>>'), False)\n\n    def test_correct_bracketing_9(self):\n        self.assertEqual(correct_bracketing('><><<>>'), False)\n\n    def test_correct_bracketing_10(self):\n        self.assertEqual(correct_bracketing('><><<>>>'), False)\n\n    def test_correct_bracketing_11(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>'), True)\n\n    def test_correct_bracketing_12(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>>'), False)\n\n    def test_correct_bracketing_13(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>'), False)\n\n    def test_correct_bracketing_14(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>>'), False)\n\n    def test_correct_bracketing_15(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>'), False)\n\n    def test_correct_bracketing_16(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>>'), False)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                   Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Untitled/test_coverage_multiagents/temp_test_codeqwen/codebase.py       9      0   100%\n--------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                      9      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "best_score_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_correct_bracketing_1(self):\n        self.assertEqual(correct_bracketing('<'), False)\n\n    def test_correct_bracketing_2(self):\n        self.assertEqual(correct_bracketing('<>'), True)\n\n    def test_correct_bracketing_3(self):\n        self.assertEqual(correct_bracketing('<<><>>'), True)\n\n    def test_correct_bracketing_4(self):\n        self.assertEqual(correct_bracketing('><<>'), False)\n\n    def test_correct_bracketing_5(self):\n        self.assertEqual(correct_bracketing('<<><<>>'), False)\n\n    def test_correct_bracketing_6(self):\n        self.assertEqual(correct_bracketing('<<><<>>>'), True)\n\n    def test_correct_bracketing_7(self):\n        self.assertEqual(correct_bracketing('><<><>>'), False)\n\n    def test_correct_bracketing_8(self):\n        self.assertEqual(correct_bracketing('><<><>>>'), False)\n\n    def test_correct_bracketing_9(self):\n        self.assertEqual(correct_bracketing('><><<>>'), False)\n\n    def test_correct_bracketing_10(self):\n        self.assertEqual(correct_bracketing('><><<>>>'), False)\n\n    def test_correct_bracketing_11(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>'), True)\n\n    def test_correct_bracketing_12(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>>'), False)\n\n    def test_correct_bracketing_13(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>'), False)\n\n    def test_correct_bracketing_14(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>>'), False)\n\n    def test_correct_bracketing_15(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>'), False)\n\n    def test_correct_bracketing_16(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>>'), False)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_correct_bracketing_1(self):\n        self.assertEqual(correct_bracketing('<'), False)\n\n    def test_correct_bracketing_2(self):\n        self.assertEqual(correct_bracketing('<>'), True)\n\n    def test_correct_bracketing_3(self):\n        self.assertEqual(correct_bracketing('<<><>>'), True)\n\n    def test_correct_bracketing_4(self):\n        self.assertEqual(correct_bracketing('><<>'), False)\n\n    def test_correct_bracketing_5(self):\n        self.assertEqual(correct_bracketing('<<><<>>'), False)\n\n    def test_correct_bracketing_6(self):\n        self.assertEqual(correct_bracketing('<<><<>>>'), True)\n\n    def test_correct_bracketing_7(self):\n        self.assertEqual(correct_bracketing('><<><>>'), False)\n\n    def test_correct_bracketing_8(self):\n        self.assertEqual(correct_bracketing('><<><>>>'), False)\n\n    def test_correct_bracketing_9(self):\n        self.assertEqual(correct_bracketing('><><<>>'), False)\n\n    def test_correct_bracketing_10(self):\n        self.assertEqual(correct_bracketing('><><<>>>'), False)\n\n    def test_correct_bracketing_11(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>'), True)\n\n    def test_correct_bracketing_12(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>>'), False)\n\n    def test_correct_bracketing_13(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>'), False)\n\n    def test_correct_bracketing_14(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>>'), False)\n\n    def test_correct_bracketing_15(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>'), False)\n\n    def test_correct_bracketing_16(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>>'), False)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_correct_bracketing_1(self):\n        self.assertEqual(correct_bracketing('<'), False)\n\n    def test_correct_bracketing_2(self):\n        self.assertEqual(correct_bracketing('<>'), True)\n\n    def test_correct_bracketing_3(self):\n        self.assertEqual(correct_bracketing('<<><>>'), True)\n\n    def test_correct_bracketing_4(self):\n        self.assertEqual(correct_bracketing('><<>'), False)\n\n    def test_correct_bracketing_5(self):\n        self.assertEqual(correct_bracketing('<<><<>>'), False)\n\n    def test_correct_bracketing_6(self):\n        self.assertEqual(correct_bracketing('<<><<>>>'), True)\n\n    def test_correct_bracketing_7(self):\n        self.assertEqual(correct_bracketing('><<><>>'), False)\n\n    def test_correct_bracketing_8(self):\n        self.assertEqual(correct_bracketing('><<><>>>'), False)\n\n    def test_correct_bracketing_9(self):\n        self.assertEqual(correct_bracketing('><><<>>'), False)\n\n    def test_correct_bracketing_10(self):\n        self.assertEqual(correct_bracketing('><><<>>>'), False)\n\n    def test_correct_bracketing_11(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>'), True)\n\n    def test_correct_bracketing_12(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>>'), False)\n\n    def test_correct_bracketing_13(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>'), False)\n\n    def test_correct_bracketing_14(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>>'), False)\n\n    def test_correct_bracketing_15(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>'), False)\n\n    def test_correct_bracketing_16(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>>'), False)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_correct_bracketing_1(self):\n        self.assertEqual(correct_bracketing('<'), False)\n\n    def test_correct_bracketing_2(self):\n        self.assertEqual(correct_bracketing('<>'), True)\n\n    def test_correct_bracketing_3(self):\n        self.assertEqual(correct_bracketing('<<><>>'), True)\n\n    def test_correct_bracketing_4(self):\n        self.assertEqual(correct_bracketing('><<>'), False)\n\n    def test_correct_bracketing_5(self):\n        self.assertEqual(correct_bracketing('<<><<>>'), False)\n\n    def test_correct_bracketing_6(self):\n        self.assertEqual(correct_bracketing('<<><<>>>'), True)\n\n    def test_correct_bracketing_7(self):\n        self.assertEqual(correct_bracketing('><<><>>'), False)\n\n    def test_correct_bracketing_8(self):\n        self.assertEqual(correct_bracketing('><<><>>>'), False)\n\n    def test_correct_bracketing_9(self):\n        self.assertEqual(correct_bracketing('><><<>>'), False)\n\n    def test_correct_bracketing_10(self):\n        self.assertEqual(correct_bracketing('><><<>>>'), False)\n\n    def test_correct_bracketing_11(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>'), True)\n\n    def test_correct_bracketing_12(self):\n        self.assertEqual(correct_bracketing('<<><<>>><<>>>'), False)\n\n    def test_correct_bracketing_13(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>'), False)\n\n    def test_correct_bracketing_14(self):\n        self.assertEqual(correct_bracketing('><<><>><<>>>'), False)\n\n    def test_correct_bracketing_15(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>'), False)\n\n    def test_correct_bracketing_16(self):\n        self.assertEqual(correct_bracketing('><><<>>><<>>>'), False)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 100.0,
    "use_filter": false,
    "exist_not_error": true
}