{
    "task_id": "HumanEval/21",
    "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
    "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
    "entry_point": "rescale_to_unit",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_basic_case(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_negative_numbers(self):\n        self.assertEqual(rescale_to_unit([-5, -3, -1, 1, 3]), [0.0, 0.4, 0.8, 1.0, 1.2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5, 1.0])\n\n    def test_identical_numbers(self):\n        self.assertEqual(rescale_to_unit([2.0, 2.0, 2.0]), [0.0, 0.0, 0.0])\n\n    def test_large_range(self):\n        self.assertEqual(rescale_to_unit([100, 200, 300, 400, 500]), [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_single_element_edge_case(self):\n        with self.assertRaises(ZeroDivisionError):\n            rescale_to_unit([1.0])\n\n    def test_empty_list_edge_case(self):\n        with self.assertRaises(ValueError):\n            rescale_to_unit([])\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "..E..F.\n======================================================================\nERROR: test_identical_numbers (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/nguyenbathiem/Downloads/Coverage-Test-Agent/covernexus/temp_gpt4/generated_test.py\", line 17, in test_identical_numbers\n    self.assertEqual(rescale_to_unit([2.0, 2.0, 2.0]), [0.0, 0.0, 0.0])\n  File \"/Users/nguyenbathiem/Downloads/Coverage-Test-Agent/covernexus/temp_gpt4/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n  File \"/Users/nguyenbathiem/Downloads/Coverage-Test-Agent/covernexus/temp_gpt4/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\nZeroDivisionError: float division by zero\n\n======================================================================\nFAIL: test_negative_numbers (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/nguyenbathiem/Downloads/Coverage-Test-Agent/covernexus/temp_gpt4/generated_test.py\", line 11, in test_negative_numbers\n    self.assertEqual(rescale_to_unit([-5, -3, -1, 1, 3]), [0.0, 0.4, 0.8, 1.0, 1.2])\nAssertionError: Lists differ: [0.0, 0.25, 0.5, 0.75, 1.0] != [0.0, 0.4, 0.8, 1.0, 1.2]\n\nFirst differing element 1:\n0.25\n0.4\n\n- [0.0, 0.25, 0.5, 0.75, 1.0]\n+ [0.0, 0.4, 0.8, 1.0, 1.2]\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (failures=1, errors=1)\n\nName                                                                                  Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------\n/Users/nguyenbathiem/Downloads/Coverage-Test-Agent/covernexus/temp_gpt4/codebase.py       5      0   100%\n-------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                     5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_basic_case(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_negative_numbers(self):\n        self.assertEqual(rescale_to_unit([-5, -3, -1, 1, 3]), [0.0, 0.4, 0.8, 1.0, 1.2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5, 1.0])\n\n    def test_identical_numbers(self):\n        self.assertEqual(rescale_to_unit([2.0, 2.0, 2.0]), [0.0, 0.0, 0.0])\n\n    def test_large_range(self):\n        self.assertEqual(rescale_to_unit([100, 200, 300, 400, 500]), [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_single_element_edge_case(self):\n        with self.assertRaises(ZeroDivisionError):\n            rescale_to_unit([1.0])\n\n    def test_empty_list_edge_case(self):\n        with self.assertRaises(ValueError):\n            rescale_to_unit([])\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_basic_case(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_negative_numbers(self):\n        self.assertEqual(rescale_to_unit([-5, -3, -1, 1, 3]), [0.0, 0.4, 0.8, 1.0, 1.2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5, 1.0])\n\n    def test_identical_numbers(self):\n        self.assertEqual(rescale_to_unit([2.0, 2.0, 2.0]), [0.0, 0.0, 0.0])\n\n    def test_large_range(self):\n        self.assertEqual(rescale_to_unit([100, 200, 300, 400, 500]), [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_single_element_edge_case(self):\n        with self.assertRaises(ZeroDivisionError):\n            rescale_to_unit([1.0])\n\n    def test_empty_list_edge_case(self):\n        with self.assertRaises(ValueError):\n            rescale_to_unit([])\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false
}