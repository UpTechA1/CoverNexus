{
    "task_id": "HumanEval/70",
    "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "strange_sort_list",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "import unittest\nfrom codebase import strange_sort_list\n\n\nclass TestStrangeSortList(unittest.TestCase):\n\n    def test_strange_sort_list_1(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_strange_sort_list_2(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_strange_sort_list_3(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_strange_sort_list_4(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_strange_sort_list_5(self):\n        self.assertEqual(strange_sort_list([9, 2, 8, 3, 7, 4, 6, 5]), [2, 9,\n            3, 8, 4, 7, 5, 6])\n\n    def test_strange_sort_list_6(self):\n        self.assertEqual(strange_sort_list([-1, -2, -3, -4]), [-4, -1, -2, -3])\n\n    def test_strange_sort_list_7(self):\n        self.assertEqual(strange_sort_list([0, -1, 1]), [-1, 1, 0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": ".....F.\n======================================================================\nFAIL: test_strange_sort_list_6 (__main__.TestStrangeSortList.test_strange_sort_list_6)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Untitled/test_coverage_multiagents/temp_test_codeqwen/generated_test.py\", line 24, in test_strange_sort_list_6\n    self.assertEqual(strange_sort_list([-1, -2, -3, -4]), [-4, -1, -2, -3])\nAssertionError: Lists differ: [-4, -1, -3, -2] != [-4, -1, -2, -3]\n\nFirst differing element 2:\n-3\n-2\n\n- [-4, -1, -3, -2]\n?            ----\n\n+ [-4, -1, -2, -3]\n?          ++++\n\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                   Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Untitled/test_coverage_multiagents/temp_test_codeqwen/codebase.py       7      0   100%\n--------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                      7      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "best_score_generated_test_script": "import unittest\nfrom codebase import strange_sort_list\n\n\nclass TestStrangeSortList(unittest.TestCase):\n\n    def test_strange_sort_list_1(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_strange_sort_list_2(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_strange_sort_list_3(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_strange_sort_list_4(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_strange_sort_list_5(self):\n        self.assertEqual(strange_sort_list([9, 2, 8, 3, 7, 4, 6, 5]), [2, 9,\n            3, 8, 4, 7, 5, 6])\n\n    def test_strange_sort_list_6(self):\n        self.assertEqual(strange_sort_list([-1, -2, -3, -4]), [-4, -1, -2, -3])\n\n    def test_strange_sort_list_7(self):\n        self.assertEqual(strange_sort_list([0, -1, 1]), [-1, 1, 0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "import unittest\nfrom codebase import strange_sort_list\n\n\nclass TestStrangeSortList(unittest.TestCase):\n\n    def test_strange_sort_list_1(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_strange_sort_list_2(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_strange_sort_list_3(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_strange_sort_list_4(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_strange_sort_list_5(self):\n        self.assertEqual(strange_sort_list([9, 2, 8, 3, 7, 4, 6, 5]), [2, 9,\n            3, 8, 4, 7, 5, 6])\n\n    def test_strange_sort_list_6(self):\n        self.assertEqual(strange_sort_list([-1, -2, -3, -4]), [-4, -1, -2, -3])\n\n    def test_strange_sort_list_7(self):\n        self.assertEqual(strange_sort_list([0, -1, 1]), [-1, 1, 0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "import unittest\nfrom codebase import strange_sort_list\n\n\nclass TestStrangeSortList(unittest.TestCase):\n\n    def test_strange_sort_list_1_1(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_strange_sort_list_2_1(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_strange_sort_list_3_1(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_strange_sort_list_4_1(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_strange_sort_list_5_1(self):\n        self.assertEqual(strange_sort_list([9, 2, 8, 3, 7, 4, 6, 5]), [2, 9,\n            3, 8, 4, 7, 5, 6])\n\n    def test_strange_sort_list_7_1(self):\n        self.assertEqual(strange_sort_list([0, -1, 1]), [-1, 1, 0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 100.0,
    "use_filter": true,
    "exist_not_error": false
}