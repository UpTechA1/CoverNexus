{
    "task_id": "HumanEval/31",
    "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
    "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
    "entry_point": "is_prime",
    "coverage": 100.0,
    "num_iterations_used": 3,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import is_prime\n\nclass TestIsPrime(unittest.TestCase):\n    def test_negative_numbers(self):\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-10))\n\n    def test_zero(self):\n        self.assertFalse(is_prime(0))\n\n    def test_one(self):\n        self.assertFalse(is_prime(1))\n\n    def test_two(self):\n        self.assertTrue(is_prime(2))\n\n    def test_small_primes(self):\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n\n    def test_small_non_primes(self):\n        self.assertFalse(is_prime(4))\n        self.assertFalse(is_prime(6))\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(9))\n\n    def test_large_primes(self):\n        self.assertTrue(is_prime(97))\n        self.assertTrue(is_prime(101))\n        self.assertTrue(is_prime(13441))\n\n    def test_large_non_primes(self):\n        self.assertFalse(is_prime(100))\n        self.assertFalse(is_prime(1000))\n\n    def test_edge_cases(self):\n        self.assertTrue(is_prime(2**31 - 1))  # Mersenne prime\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "The process took too long to complete and was terminated, please use small number for input or check the test script.",
            "coverage": 0,
            "exist_error": false
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import is_prime\nimport time\n\nclass TestIsPrime(unittest.TestCase):\n    def setUp(self):\n        self.timeout = 1  # 1 second timeout\n\n    def test_small_primes(self):\n        self.assertTrue(is_prime(2))\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n\n    def test_small_non_primes(self):\n        self.assertFalse(is_prime(1))\n        self.assertFalse(is_prime(4))\n        self.assertFalse(is_prime(6))\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(9))\n\n    def test_large_primes(self):\n        self.assertTrue(is_prime(101))\n        self.assertTrue(is_prime(13441))\n        self.assertTrue(is_prime(61))\n\n    def test_upper_limit(self):\n        start_time = time.time()\n        self.assertTrue(is_prime(997))\n        self.assertTrue(is_prime(1009))\n        self.assertLess(time.time() - start_time, self.timeout)\n\n    def test_perfect_squares(self):\n        self.assertFalse(is_prime(25))\n        self.assertFalse(is_prime(36))\n        self.assertTrue(is_prime(23))\n        self.assertTrue(is_prime(37))\n\n    def test_product_of_large_primes(self):\n        start_time = time.time()\n        self.assertFalse(is_prime(15487469))\n        self.assertLess(time.time() - start_time, self.timeout)\n\n    def test_largest_32bit_integer(self):\n        start_time = time.time()\n        self.assertTrue(is_prime(2147483647))\n        self.assertLess(time.time() - start_time, self.timeout)\n\n    def test_near_square_root(self):\n        start_time = time.time()\n        self.assertFalse(is_prime(121))\n        self.assertTrue(is_prime(127))\n        self.assertLess(time.time() - start_time, self.timeout)\n\n    def test_many_divisors(self):\n        start_time = time.time()\n        self.assertFalse(is_prime(720))\n        self.assertFalse(is_prime(5040))\n        self.assertLess(time.time() - start_time, self.timeout)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "The process took too long to complete and was terminated, please use small number for input or check the test script.",
            "coverage": 0,
            "exist_error": false
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import is_prime\n\nclass TestIsPrime(unittest.TestCase):\n    def test_small_primes(self):\n        self.assertTrue(is_prime(2))\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n        self.assertTrue(is_prime(11))\n\n    def test_small_non_primes(self):\n        self.assertFalse(is_prime(1))\n        self.assertFalse(is_prime(4))\n        self.assertFalse(is_prime(6))\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(9))\n\n    def test_edge_cases(self):\n        self.assertFalse(is_prime(0))\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-10))\n\n    def test_boundary_cases(self):\n        self.assertTrue(is_prime(17))\n        self.assertFalse(is_prime(18))\n        self.assertFalse(is_prime(16))\n        self.assertTrue(is_prime(23))\n        self.assertFalse(is_prime(24))\n        self.assertFalse(is_prime(22))\n\n    def test_special_primes(self):\n        self.assertTrue(is_prime(31))  # Mersenne prime\n        self.assertTrue(is_prime(257))  # Fermat prime\n\n    def test_numbers_with_trailing_zeros(self):\n        self.assertFalse(is_prime(100))\n        self.assertFalse(is_prime(1000))\n\n    def test_near_powers_of_two(self):\n        self.assertFalse(is_prime(63))\n        self.assertFalse(is_prime(65))\n        self.assertTrue(is_prime(127))\n        self.assertFalse(is_prime(129))\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       7      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               7      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import is_prime\n\nclass TestIsPrime(unittest.TestCase):\n    def test_small_primes(self):\n        self.assertTrue(is_prime(2))\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n        self.assertTrue(is_prime(11))\n\n    def test_small_non_primes(self):\n        self.assertFalse(is_prime(1))\n        self.assertFalse(is_prime(4))\n        self.assertFalse(is_prime(6))\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(9))\n\n    def test_edge_cases(self):\n        self.assertFalse(is_prime(0))\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-10))\n\n    def test_boundary_cases(self):\n        self.assertTrue(is_prime(17))\n        self.assertFalse(is_prime(18))\n        self.assertFalse(is_prime(16))\n        self.assertTrue(is_prime(23))\n        self.assertFalse(is_prime(24))\n        self.assertFalse(is_prime(22))\n\n    def test_special_primes(self):\n        self.assertTrue(is_prime(31))  # Mersenne prime\n        self.assertTrue(is_prime(257))  # Fermat prime\n\n    def test_numbers_with_trailing_zeros(self):\n        self.assertFalse(is_prime(100))\n        self.assertFalse(is_prime(1000))\n\n    def test_near_powers_of_two(self):\n        self.assertFalse(is_prime(63))\n        self.assertFalse(is_prime(65))\n        self.assertTrue(is_prime(127))\n        self.assertFalse(is_prime(129))\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import is_prime\n\nclass TestIsPrime(unittest.TestCase):\n    def test_small_primes(self):\n        self.assertTrue(is_prime(2))\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n        self.assertTrue(is_prime(11))\n\n    def test_small_non_primes(self):\n        self.assertFalse(is_prime(1))\n        self.assertFalse(is_prime(4))\n        self.assertFalse(is_prime(6))\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(9))\n\n    def test_edge_cases(self):\n        self.assertFalse(is_prime(0))\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-10))\n\n    def test_boundary_cases(self):\n        self.assertTrue(is_prime(17))\n        self.assertFalse(is_prime(18))\n        self.assertFalse(is_prime(16))\n        self.assertTrue(is_prime(23))\n        self.assertFalse(is_prime(24))\n        self.assertFalse(is_prime(22))\n\n    def test_special_primes(self):\n        self.assertTrue(is_prime(31))  # Mersenne prime\n        self.assertTrue(is_prime(257))  # Fermat prime\n\n    def test_numbers_with_trailing_zeros(self):\n        self.assertFalse(is_prime(100))\n        self.assertFalse(is_prime(1000))\n\n    def test_near_powers_of_two(self):\n        self.assertFalse(is_prime(63))\n        self.assertFalse(is_prime(65))\n        self.assertTrue(is_prime(127))\n        self.assertFalse(is_prime(129))\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import is_prime\n\nclass TestIsPrime(unittest.TestCase):\n    def test_small_primes(self):\n        self.assertTrue(is_prime(2))\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n        self.assertTrue(is_prime(11))\n\n    def test_small_non_primes(self):\n        self.assertFalse(is_prime(1))\n        self.assertFalse(is_prime(4))\n        self.assertFalse(is_prime(6))\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(9))\n\n    def test_edge_cases(self):\n        self.assertFalse(is_prime(0))\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-10))\n\n    def test_boundary_cases(self):\n        self.assertTrue(is_prime(17))\n        self.assertFalse(is_prime(18))\n        self.assertFalse(is_prime(16))\n        self.assertTrue(is_prime(23))\n        self.assertFalse(is_prime(24))\n        self.assertFalse(is_prime(22))\n\n    def test_special_primes(self):\n        self.assertTrue(is_prime(31))  # Mersenne prime\n        self.assertTrue(is_prime(257))  # Fermat prime\n\n    def test_numbers_with_trailing_zeros(self):\n        self.assertFalse(is_prime(100))\n        self.assertFalse(is_prime(1000))\n\n    def test_near_powers_of_two(self):\n        self.assertFalse(is_prime(63))\n        self.assertFalse(is_prime(65))\n        self.assertTrue(is_prime(127))\n        self.assertFalse(is_prime(129))\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 0.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}