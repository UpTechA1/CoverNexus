{
    "task_id": "HumanEval/153",
    "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
    "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
    "entry_point": "Strongest_Extension",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], 'Empty.'),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.VeryLongExtension'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "EF\n======================================================================\nERROR: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='Empty', extensions=[])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_strongest_extension\n    result = Strongest_Extension(class_name, extensions)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 19, in Strongest_Extension\n    strong = extensions[0]\n             ~~~~~~~~~~^^^\nIndexError: list index out of range\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='LongName', extensions=['shortEXT', 'VeryLongExtension'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'LongName.shortEXT' != 'LongName.VeryLongExtension'\n- LongName.shortEXT\n+ LongName.VeryLongExtension\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1, errors=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      10      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            # Basic cases\n            ('Class', ['AA', 'Be', 'CC'], 'Class.AA'),\n            ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            \n            # Empty extensions list\n            ('EmptyList', [], 'EmptyList'),\n            \n            # Mixed case and non-alphabetic characters\n            ('MixedCase', ['ABCdef123', 'abcDEF456', '123ABC'], 'MixedCase.ABCdef123'),\n            \n            # Same strength extensions\n            ('SameStrength', ['AA', 'BB', 'CC'], 'SameStrength.AA'),\n            \n            # Long names\n            ('VeryLongClassName', ['ShortExt', 'VeryLongExtensionName'], 'VeryLongClassName.VeryLongExtensionName'),\n            \n            # Special characters\n            ('Special!Class', ['Norm@l', 'Speci@l!'], 'Special!Class.Speci@l!'),\n            \n            # Edge cases\n            ('', ['Extension'], '.Extension'),\n            ('Class', [''], 'Class.'),\n        ]\n        \n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n    \n    def test_invalid_inputs(self):\n        with self.assertRaises(TypeError):\n            Strongest_Extension(123, ['Extension'])\n        with self.assertRaises(TypeError):\n            Strongest_Extension('Class', [123, 456])\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".EFFF\n======================================================================\nERROR: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='EmptyList', extensions=[])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_strongest_extension\n    result = Strongest_Extension(class_name, extensions)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 19, in Strongest_Extension\n    strong = extensions[0]\n             ~~~~~~~~~~^^^\nIndexError: list index out of range\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='MixedCase', extensions=['ABCdef123', 'abcDEF456', '123ABC'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'MixedCase.123ABC' != 'MixedCase.ABCdef123'\n- MixedCase.123ABC\n?              ---\n+ MixedCase.ABCdef123\n?           ++++++\n\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='VeryLongClassName', extensions=['ShortExt', 'VeryLongExtensionName'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'VeryLongClassName.ShortExt' != 'VeryLongClassName.VeryLongExtensionName'\n- VeryLongClassName.ShortExt\n+ VeryLongClassName.VeryLongExtensionName\n\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='Special!Class', extensions=['Norm@l', 'Speci@l!'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'Special!Class.Norm@l' != 'Special!Class.Speci@l!'\n- Special!Class.Norm@l\n?               ^^^^\n+ Special!Class.Speci@l!\n?               ^^^^^  +\n\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=3, errors=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      10      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            ('my_class', ['AA', 'Be', 'CC'], 'my_class.AA'),\n            ('EmptyList', [], 'EmptyList'),\n            ('MixedCase', ['ABCdef123', 'abcDEF456', '123ABC'], 'MixedCase.ABCdef123'),\n            ('VeryLongClassName', ['ShortExt', 'VeryLongExtensionName'], 'VeryLongClassName.VeryLongExtensionName'),\n            ('Special!Class', ['Norm@l', 'Speci@l!'], 'Special!Class.Speci@l!'),\n            ('AllUpper', ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            ('AllLower', ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            ('NonAlpha', ['123', '456', '789'], 'NonAlpha.123'),\n            ('MixedStrength', ['ABCabc', 'abcABC', 'ABCABC'], 'MixedStrength.ABCABC'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\n    def test_invalid_inputs(self):\n        with self.assertRaises(TypeError):\n            Strongest_Extension(123, ['abc'])\n        with self.assertRaises(TypeError):\n            Strongest_Extension('class', 'not_a_list')\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FEFFF\n======================================================================\nERROR: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='EmptyList', extensions=[])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_strongest_extension\n    result = Strongest_Extension(class_name, extensions)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 19, in Strongest_Extension\n    strong = extensions[0]\n             ~~~~~~~~~~^^^\nIndexError: list index out of range\n\n======================================================================\nFAIL: test_invalid_inputs (__main__.TestStrongestExtension.test_invalid_inputs)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 28, in test_invalid_inputs\n    with self.assertRaises(TypeError):\nAssertionError: TypeError not raised\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='MixedCase', extensions=['ABCdef123', 'abcDEF456', '123ABC'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'MixedCase.123ABC' != 'MixedCase.ABCdef123'\n- MixedCase.123ABC\n?              ---\n+ MixedCase.ABCdef123\n?           ++++++\n\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='VeryLongClassName', extensions=['ShortExt', 'VeryLongExtensionName'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'VeryLongClassName.ShortExt' != 'VeryLongClassName.VeryLongExtensionName'\n- VeryLongClassName.ShortExt\n+ VeryLongClassName.VeryLongExtensionName\n\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='Special!Class', extensions=['Norm@l', 'Speci@l!'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'Special!Class.Norm@l' != 'Special!Class.Speci@l!'\n- Special!Class.Norm@l\n?               ^^^^\n+ Special!Class.Speci@l!\n?               ^^^^^  +\n\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=4, errors=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      10      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            ('my_class', ['AA', 'Be', 'CC'], 'my_class.AA'),\n            ('Class', ['ABC', 'abc', '123'], 'Class.ABC'),\n            ('MixedCase', ['ABCdef', 'abcDEF', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            ('LongName', ['ShortExt', 'LongExtension'], 'LongName.ShortExt'),\n            ('TieBreaker', ['AAbb', 'AABB', 'AaBb'], 'TieBreaker.AABB'),\n            ('OnlyUpper', ['ABC', 'DEF', 'GHI'], 'OnlyUpper.ABC'),\n            ('OnlyLower', ['abc', 'def', 'ghi'], 'OnlyLower.abc'),\n            ('Special!Class', ['Norm@l', 'Speci@l!'], 'Special!Class.Speci@l!'),\n        ]\n        \n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\n    def test_empty_list(self):\n        with self.assertRaises(ValueError):\n            Strongest_Extension('EmptyList', [])\n\n    def test_invalid_inputs(self):\n        with self.assertRaises(TypeError):\n            Strongest_Extension(123, ['ABC'])\n        with self.assertRaises(TypeError):\n            Strongest_Extension('Class', 'NotAList')\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "EFF\n======================================================================\nERROR: test_empty_list (__main__.TestStrongestExtension.test_empty_list)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 26, in test_empty_list\n    Strongest_Extension('EmptyList', [])\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 19, in Strongest_Extension\n    strong = extensions[0]\n             ~~~~~~~~~~^^^\nIndexError: list index out of range\n\n======================================================================\nFAIL: test_invalid_inputs (__main__.TestStrongestExtension.test_invalid_inputs)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 31, in test_invalid_inputs\n    with self.assertRaises(TypeError):\nAssertionError: TypeError not raised\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='Special!Class', extensions=['Norm@l', 'Speci@l!'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'Special!Class.Norm@l' != 'Special!Class.Speci@l!'\n- Special!Class.Norm@l\n?               ^^^^\n+ Special!Class.Speci@l!\n?               ^^^^^  +\n\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nFAILED (failures=2, errors=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      10      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_empty_list(self):\n        # Test that an IndexError is raised when an empty list is passed\n        with self.assertRaises(IndexError):\n            Strongest_Extension('EmptyList', [])\n\n    def test_invalid_inputs(self):\n        # Test that a TypeError is raised when extensions is not a list\n        with self.assertRaises(TypeError):\n            Strongest_Extension('InvalidInput', 'not_a_list')\n\n    def test_strongest_extension(self):\n        test_cases = [\n            ('Class', ['AA', 'Be', 'CC'], 'Class.AA'),\n            ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            ('Special!Class', ['Norm@l', 'Speci@l!'], 'Special!Class.Norm@l'),\n            ('OnlySpecial', ['@#$', '!@#', '%^&'], 'OnlySpecial.@#$'),\n            ('EqualStrength', ['AAaa', 'BBbb', 'CCcc'], 'EqualStrength.AAaa'),\n            ('SingleExtension', ['OnlyOne'], 'SingleExtension.OnlyOne'),\n            ('MixedCase', ['abcDEF', 'ABCdef'], 'MixedCase.ABCdef'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\n    def test_equal_strength_first_occurrence(self):\n        # Test that the function returns the first occurrence when multiple extensions have the same strength\n        class_name = 'EqualStrength'\n        extensions = ['AA', 'BB', 'CC']\n        expected = 'EqualStrength.AA'\n        result = Strongest_Extension(class_name, extensions)\n        self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "..FF\n======================================================================\nFAIL: test_invalid_inputs (__main__.TestStrongestExtension.test_invalid_inputs)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 14, in test_invalid_inputs\n    with self.assertRaises(TypeError):\nAssertionError: TypeError not raised\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='MixedCase', extensions=['abcDEF', 'ABCdef'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 31, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'MixedCase.abcDEF' != 'MixedCase.ABCdef'\n- MixedCase.abcDEF\n+ MixedCase.ABCdef\n\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nFAILED (failures=2)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      10      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_empty_list(self):\n        # Test that an IndexError is raised when an empty list is passed\n        with self.assertRaises(IndexError):\n            Strongest_Extension('EmptyList', [])\n\n    def test_invalid_inputs(self):\n        # Test that a TypeError is raised when extensions is not a list\n        with self.assertRaises(TypeError):\n            Strongest_Extension('InvalidInput', 'not_a_list')\n\n    def test_strongest_extension(self):\n        test_cases = [\n            ('Class', ['AA', 'Be', 'CC'], 'Class.AA'),\n            ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            ('Special!Class', ['Norm@l', 'Speci@l!'], 'Special!Class.Norm@l'),\n            ('OnlySpecial', ['@#$', '!@#', '%^&'], 'OnlySpecial.@#$'),\n            ('EqualStrength', ['AAaa', 'BBbb', 'CCcc'], 'EqualStrength.AAaa'),\n            ('SingleExtension', ['OnlyOne'], 'SingleExtension.OnlyOne'),\n            ('MixedCase', ['abcDEF', 'ABCdef'], 'MixedCase.ABCdef'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\n    def test_equal_strength_first_occurrence(self):\n        # Test that the function returns the first occurrence when multiple extensions have the same strength\n        class_name = 'EqualStrength'\n        extensions = ['AA', 'BB', 'CC']\n        expected = 'EqualStrength.AA'\n        result = Strongest_Extension(class_name, extensions)\n        self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], 'Empty.'),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.VeryLongExtension'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 0,
    "use_filter": false
}