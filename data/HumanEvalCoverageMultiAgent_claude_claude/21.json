{
    "task_id": "HumanEval/21",
    "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
    "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
    "entry_point": "rescale_to_unit",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n            ([0.0, 10.0], [0.0, 1.0]),\n            ([-5.0, 0.0, 5.0], [0.0, 0.5, 1.0]),\n            ([2.5, 2.5, 2.5], [0.0, 0.0, 0.0]),\n            ([1.0, 3.0, 2.0, 4.0], [0.0, 2/3, 1/3, 1.0]),\n        ]\n        \n        for input_list, expected_output in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(result, expected_output)\n\n    def test_input_validation(self):\n        with self.assertRaises(ValueError):\n            rescale_to_unit([])\n        with self.assertRaises(ValueError):\n            rescale_to_unit([1.0])\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "EE\n======================================================================\nERROR: test_input_validation (__main__.TestRescaleToUnit.test_input_validation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_input_validation\n    rescale_to_unit([1.0])\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nERROR: test_rescale_to_unit (__main__.TestRescaleToUnit.test_rescale_to_unit) (input=[2.5, 2.5, 2.5])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 17, in test_rescale_to_unit\n    result = rescale_to_unit(input_list)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (errors=2)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\nimport random\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n            ([0.0, 10.0, 20.0], [0.0, 0.5, 1.0]),\n            ([-10.0, 0.0, 10.0], [0.0, 0.5, 1.0]),\n            ([1e-5, 1e-4, 1e-3], [0.0, 0.1111111111111111, 1.0]),\n            ([2.5, 2.5, 2.5], [0.0, 0.0, 0.0]),\n            ([-1.5, -0.5, 0.5, 1.5], [0.0, 0.3333333333333333, 0.6666666666666666, 1.0])\n        ]\n        \n        for input_list, expected_output in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(result, expected_output)\n\n    def test_input_validation(self):\n        with self.subTest(\"Empty list\"):\n            with self.assertRaises(ValueError):\n                rescale_to_unit([])\n        \n        with self.subTest(\"Single element list\"):\n            with self.assertRaises(ValueError):\n                rescale_to_unit([1.0])\n\n    def test_preserve_order(self):\n        input_list = [3.0, 1.0, 4.0, 2.0, 5.0]\n        result = rescale_to_unit(input_list)\n        self.assertEqual([x for _, x in sorted(zip(input_list, result))], [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_extremes(self):\n        input_list = [random.uniform(-1000, 1000) for _ in range(100)]\n        result = rescale_to_unit(input_list)\n        self.assertAlmostEqual(min(result), 0.0)\n        self.assertAlmostEqual(max(result), 1.0)\n\n    def test_large_input(self):\n        input_list = [random.uniform(-1e6, 1e6) for _ in range(10000)]\n        result = rescale_to_unit(input_list)\n        self.assertEqual(len(result), 10000)\n        self.assertGreaterEqual(min(result), 0.0)\n        self.assertLessEqual(max(result), 1.0)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": ".E..FE\n======================================================================\nERROR: test_input_validation (__main__.TestRescaleToUnit.test_input_validation) [Single element list]\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 30, in test_input_validation\n    rescale_to_unit([1.0])\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nERROR: test_rescale_to_unit (__main__.TestRescaleToUnit.test_rescale_to_unit) (input=[2.5, 2.5, 2.5])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 20, in test_rescale_to_unit\n    result = rescale_to_unit(input_list)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nFAIL: test_rescale_to_unit (__main__.TestRescaleToUnit.test_rescale_to_unit) (input=[1e-05, 0.0001, 0.001])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_rescale_to_unit\n    self.assertEqual(result, expected_output)\nAssertionError: Lists differ: [0.0, 0.09090909090909091, 1.0] != [0.0, 0.1111111111111111, 1.0]\n\nFirst differing element 1:\n0.09090909090909091\n0.1111111111111111\n\n- [0.0, 0.09090909090909091, 1.0]\n+ [0.0, 0.1111111111111111, 1.0]\n\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nFAILED (failures=1, errors=2)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        \"\"\"Test rescale_to_unit function with various inputs.\"\"\"\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n            ([-1.0, 0.0, 1.0], [0.0, 0.5, 1.0]),\n            ([1e-5, 1e-4, 1e-3], [0.0, 0.1111111111111111, 1.0]),\n            ([1e10, 2e10, 3e10], [0.0, 0.5, 1.0]),\n            ([1.0, 1.0, 2.0, 2.0], [0.0, 0.0, 1.0, 1.0]),\n            ([-10.0, -5.0, 0.0, 5.0, 10.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n        ]\n        \n        for input_list, expected_output in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(len(result), len(expected_output))\n                for r, e in zip(result, expected_output):\n                    self.assertAlmostEqual(r, e, places=7)\n\n    def test_input_validation(self):\n        \"\"\"Test input validation for lists with fewer than two elements.\"\"\"\n        with self.assertRaises(ValueError):\n            rescale_to_unit([])\n        with self.assertRaises(ValueError):\n            rescale_to_unit([1.0])\n\n    def test_same_value_input(self):\n        \"\"\"Test handling of input lists with all elements being the same.\"\"\"\n        input_list = [2.5, 2.5, 2.5]\n        expected_output = [0.0, 0.0, 0.0]\n        result = rescale_to_unit(input_list)\n        self.assertEqual(result, expected_output)\n\n    def test_edge_cases(self):\n        \"\"\"Test edge cases and boundary conditions.\"\"\"\n        test_cases = [\n            ([0.0, 1.0], [0.0, 1.0]),\n            ([-1.0, 1.0], [0.0, 1.0]),\n            ([float('-inf'), 0.0, float('inf')], [0.0, 0.5, 1.0]),\n        ]\n        \n        for input_list, expected_output in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(result, expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FEFE\n======================================================================\nERROR: test_input_validation (__main__.TestRescaleToUnit.test_input_validation)\nTest input validation for lists with fewer than two elements.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 30, in test_input_validation\n    rescale_to_unit([1.0])\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nERROR: test_same_value_input (__main__.TestRescaleToUnit.test_same_value_input)\nTest handling of input lists with all elements being the same.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 36, in test_same_value_input\n    result = rescale_to_unit(input_list)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nFAIL: test_edge_cases (__main__.TestRescaleToUnit.test_edge_cases) (input=[-inf, 0.0, inf])\nTest edge cases and boundary conditions.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 50, in test_edge_cases\n    self.assertEqual(result, expected_output)\nAssertionError: Lists differ: [nan, nan, nan] != [0.0, 0.5, 1.0]\n\nFirst differing element 0:\nnan\n0.0\n\n- [nan, nan, nan]\n+ [0.0, 0.5, 1.0]\n\n======================================================================\nFAIL: test_rescale_to_unit (__main__.TestRescaleToUnit.test_rescale_to_unit) (input=[1e-05, 0.0001, 0.001])\nTest rescale_to_unit function with various inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_rescale_to_unit\n    self.assertAlmostEqual(r, e, places=7)\nAssertionError: 0.09090909090909091 != 0.1111111111111111 within 7 places (0.020202020202020193 difference)\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nFAILED (failures=2, errors=2)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\nimport math\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n            ([0.0, 1.0, 2.0], [0.0, 0.5, 1.0]),\n            ([-1.0, 0.0, 1.0], [0.0, 0.5, 1.0]),\n            ([10.0, 20.0, 30.0, 40.0], [0.0, 1/3, 2/3, 1.0]),\n            ([1e-5, 1e-4, 1e-3], [0.0, 0.1, 1.0]),\n        ]\n        for input_list, expected_output in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(len(result), len(expected_output))\n                for r, e in zip(result, expected_output):\n                    self.assertAlmostEqual(r, e, places=7)\n\n    def test_input_validation(self):\n        with self.assertRaises(ValueError):\n            rescale_to_unit([1.0])\n        with self.assertRaises(ValueError):\n            rescale_to_unit([])\n        with self.assertRaises(TypeError):\n            rescale_to_unit(\"not a list\")\n        with self.assertRaises(TypeError):\n            rescale_to_unit([1, \"2\", 3])\n\n    def test_same_value_input(self):\n        input_list = [5.0, 5.0, 5.0]\n        with self.assertRaises(ValueError):\n            rescale_to_unit(input_list)\n\n    def test_edge_cases(self):\n        test_cases = [\n            ([-float('inf'), 0.0, float('inf')], [0.0, 0.5, 1.0]),\n            ([1e-10, 1e-9], [0.0, 1.0]),\n            ([-1e9, 0, 1e9], [0.0, 0.5, 1.0]),\n        ]\n        for input_list, expected_output in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(len(result), len(expected_output))\n                for r, e in zip(result, expected_output):\n                    if math.isnan(e):\n                        self.assertTrue(math.isnan(r))\n                    else:\n                        self.assertAlmostEqual(r, e, places=7)\n\n    def test_docstring_example(self):\n        input_list = [1.0, 2.0, 3.0, 4.0, 5.0]\n        expected_output = [0.0, 0.25, 0.5, 0.75, 1.0]\n        result = rescale_to_unit(input_list)\n        self.assertEqual(result, expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": ".FEFE\n======================================================================\nERROR: test_input_validation (__main__.TestRescaleToUnit.test_input_validation)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 25, in test_input_validation\n    rescale_to_unit([1.0])\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nERROR: test_same_value_input (__main__.TestRescaleToUnit.test_same_value_input)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 36, in test_same_value_input\n    rescale_to_unit(input_list)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nFAIL: test_edge_cases (__main__.TestRescaleToUnit.test_edge_cases) (input=[-inf, 0.0, inf])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 52, in test_edge_cases\n    self.assertAlmostEqual(r, e, places=7)\nAssertionError: nan != 0.0 within 7 places (nan difference)\n\n======================================================================\nFAIL: test_rescale_to_unit (__main__.TestRescaleToUnit.test_rescale_to_unit) (input=[1e-05, 0.0001, 0.001])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_rescale_to_unit\n    self.assertAlmostEqual(r, e, places=7)\nAssertionError: 0.09090909090909091 != 0.1 within 7 places (0.009090909090909094 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=2, errors=2)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\nimport sys\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n            ([1e-5, 1e-4, 1e-3], [0.0, 0.09090909090909091, 1.0]),\n            ([-10, 0, 10], [0.0, 0.5, 1.0]),\n            ([1e10, 2e10, 3e10], [0.0, 0.5, 1.0]),\n            ([1, 1, 2, 2, 3], [0.0, 0.0, 0.5, 0.5, 1.0]),\n        ]\n        for input_list, expected in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(len(result), len(expected))\n                for r, e in zip(result, expected):\n                    self.assertAlmostEqual(r, e, places=7)\n\n    def test_input_validation(self):\n        invalid_inputs = [\n            [],\n            [1.0],\n            \"not a list\",\n            [1, \"2\", 3],\n            [1, 2, None],\n        ]\n        for input_list in invalid_inputs:\n            with self.subTest(input=input_list):\n                with self.assertRaises((ValueError, TypeError)):\n                    rescale_to_unit(input_list)\n\n    def test_same_value_input(self):\n        same_value_inputs = [\n            [1.0, 1.0],\n            [0, 0, 0],\n            [-5, -5, -5, -5],\n        ]\n        for input_list in same_value_inputs:\n            with self.subTest(input=input_list):\n                with self.assertRaises(ValueError):\n                    rescale_to_unit(input_list)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            ([sys.float_info.min, sys.float_info.max], [0.0, 1.0]),\n            ([-1e100, 0, 1e100], [0.0, 0.5, 1.0]),\n            ([1e-10, 1e10], [0.0, 1.0]),\n        ]\n        for input_list, expected in edge_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(len(result), len(expected))\n                for r, e in zip(result, expected):\n                    self.assertAlmostEqual(r, e, places=7)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": ".E.EEE\n======================================================================\nERROR: test_input_validation (__main__.TestRescaleToUnit.test_input_validation) (input=[1.0])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_input_validation\n    rescale_to_unit(input_list)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nERROR: test_same_value_input (__main__.TestRescaleToUnit.test_same_value_input) (input=[1.0, 1.0])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 45, in test_same_value_input\n    rescale_to_unit(input_list)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: float division by zero\n\n======================================================================\nERROR: test_same_value_input (__main__.TestRescaleToUnit.test_same_value_input) (input=[0, 0, 0])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 45, in test_same_value_input\n    rescale_to_unit(input_list)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: division by zero\n\n======================================================================\nERROR: test_same_value_input (__main__.TestRescaleToUnit.test_same_value_input) (input=[-5, -5, -5, -5])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 45, in test_same_value_input\n    rescale_to_unit(input_list)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n            ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nZeroDivisionError: division by zero\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nFAILED (errors=4)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import rescale_to_unit\nimport sys\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n            ([1e-5, 1e-4, 1e-3], [0.0, 0.09090909090909091, 1.0]),\n            ([-10, 0, 10], [0.0, 0.5, 1.0]),\n            ([1e10, 2e10, 3e10], [0.0, 0.5, 1.0]),\n            ([1, 1, 2, 2, 3], [0.0, 0.0, 0.5, 0.5, 1.0]),\n        ]\n        for input_list, expected in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(len(result), len(expected))\n                for r, e in zip(result, expected):\n                    self.assertAlmostEqual(r, e, places=7)\n\n    def test_input_validation(self):\n        invalid_inputs = [\n            [],\n            [1.0],\n            \"not a list\",\n            [1, \"2\", 3],\n            [1, 2, None],\n        ]\n        for input_list in invalid_inputs:\n            with self.subTest(input=input_list):\n                with self.assertRaises((ValueError, TypeError)):\n                    rescale_to_unit(input_list)\n\n    def test_same_value_input(self):\n        same_value_inputs = [\n            [1.0, 1.0],\n            [0, 0, 0],\n            [-5, -5, -5, -5],\n        ]\n        for input_list in same_value_inputs:\n            with self.subTest(input=input_list):\n                with self.assertRaises(ValueError):\n                    rescale_to_unit(input_list)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            ([sys.float_info.min, sys.float_info.max], [0.0, 1.0]),\n            ([-1e100, 0, 1e100], [0.0, 0.5, 1.0]),\n            ([1e-10, 1e10], [0.0, 1.0]),\n        ]\n        for input_list, expected in edge_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(len(result), len(expected))\n                for r, e in zip(result, expected):\n                    self.assertAlmostEqual(r, e, places=7)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\nclass TestRescaleToUnit(unittest.TestCase):\n    def test_rescale_to_unit(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 0.25, 0.5, 0.75, 1.0]),\n            ([0.0, 10.0], [0.0, 1.0]),\n            ([-5.0, 0.0, 5.0], [0.0, 0.5, 1.0]),\n            ([2.5, 2.5, 2.5], [0.0, 0.0, 0.0]),\n            ([1.0, 3.0, 2.0, 4.0], [0.0, 2/3, 1/3, 1.0]),\n        ]\n        \n        for input_list, expected_output in test_cases:\n            with self.subTest(input=input_list):\n                result = rescale_to_unit(input_list)\n                self.assertEqual(result, expected_output)\n\n    def test_input_validation(self):\n        with self.assertRaises(ValueError):\n            rescale_to_unit([])\n        with self.assertRaises(ValueError):\n            rescale_to_unit([1.0])\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 0,
    "use_filter": false
}