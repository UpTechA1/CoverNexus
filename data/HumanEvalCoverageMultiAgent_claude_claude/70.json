{
    "task_id": "HumanEval/70",
    "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "strange_sort_list",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import strange_sort_list\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_normal_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_reverse_list(self):\n        self.assertEqual(strange_sort_list([4, 3, 2, 1]), [1, 4, 2, 3])\n\n    def test_duplicate_values(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_empty_list(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_single_element(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_negative_numbers(self):\n        self.assertEqual(strange_sort_list([-3, -1, -4, -2]), [-4, -1, -3, -2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(strange_sort_list([-2, 0, 3, -1, 2]), [-2, 3, -1, 2, 0])\n\n    def test_large_list(self):\n        input_list = list(range(1000))\n        result = strange_sort_list(input_list)\n        self.assertEqual(len(result), 1000)\n        self.assertEqual(result[0], 0)\n        self.assertEqual(result[1], 999)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       7      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               7      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import strange_sort_list\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_normal_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_reverse_list(self):\n        self.assertEqual(strange_sort_list([4, 3, 2, 1]), [1, 4, 2, 3])\n\n    def test_duplicate_values(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_empty_list(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_single_element(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_negative_numbers(self):\n        self.assertEqual(strange_sort_list([-3, -1, -4, -2]), [-4, -1, -3, -2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(strange_sort_list([-2, 0, 3, -1, 2]), [-2, 3, -1, 2, 0])\n\n    def test_large_list(self):\n        input_list = list(range(1000))\n        result = strange_sort_list(input_list)\n        self.assertEqual(len(result), 1000)\n        self.assertEqual(result[0], 0)\n        self.assertEqual(result[1], 999)\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import strange_sort_list\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_normal_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_reverse_list(self):\n        self.assertEqual(strange_sort_list([4, 3, 2, 1]), [1, 4, 2, 3])\n\n    def test_duplicate_values(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_empty_list(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_single_element(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_negative_numbers(self):\n        self.assertEqual(strange_sort_list([-3, -1, -4, -2]), [-4, -1, -3, -2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(strange_sort_list([-2, 0, 3, -1, 2]), [-2, 3, -1, 2, 0])\n\n    def test_large_list(self):\n        input_list = list(range(1000))\n        result = strange_sort_list(input_list)\n        self.assertEqual(len(result), 1000)\n        self.assertEqual(result[0], 0)\n        self.assertEqual(result[1], 999)\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import strange_sort_list\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_normal_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_reverse_list(self):\n        self.assertEqual(strange_sort_list([4, 3, 2, 1]), [1, 4, 2, 3])\n\n    def test_duplicate_values(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_empty_list(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_single_element(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_negative_numbers(self):\n        self.assertEqual(strange_sort_list([-3, -1, -4, -2]), [-4, -1, -3, -2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(strange_sort_list([-2, 0, 3, -1, 2]), [-2, 3, -1, 2, 0])\n\n    def test_large_list(self):\n        input_list = list(range(1000))\n        result = strange_sort_list(input_list)\n        self.assertEqual(len(result), 1000)\n        self.assertEqual(result[0], 0)\n        self.assertEqual(result[1], 999)\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import strange_sort_list\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_normal_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n\n    def test_reverse_list(self):\n        self.assertEqual(strange_sort_list([4, 3, 2, 1]), [1, 4, 2, 3])\n\n    def test_duplicate_values(self):\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n\n    def test_empty_list(self):\n        self.assertEqual(strange_sort_list([]), [])\n\n    def test_single_element(self):\n        self.assertEqual(strange_sort_list([1]), [1])\n\n    def test_negative_numbers(self):\n        self.assertEqual(strange_sort_list([-3, -1, -4, -2]), [-4, -1, -3, -2])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(strange_sort_list([-2, 0, 3, -1, 2]), [-2, 3, -1, 2, 0])\n\n    def test_large_list(self):\n        input_list = list(range(1000))\n        result = strange_sort_list(input_list)\n        self.assertEqual(len(result), 1000)\n        self.assertEqual(result[0], 0)\n        self.assertEqual(result[1], 999)\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}