{
    "task_id": "HumanEval/26",
    "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
    "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
    "entry_point": "remove_duplicates",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import remove_duplicates\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(remove_duplicates([]), [])\n\n    def test_no_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n\n    def test_all_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 1, 1, 1]), [])\n\n    def test_some_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 2, 3, 4, 4, 5]), [1, 3, 5])\n\n    def test_duplicates_at_ends(self):\n        self.assertEqual(remove_duplicates([1, 1, 2, 3, 4, 4]), [2, 3])\n\n    def test_negative_numbers(self):\n        self.assertEqual(remove_duplicates([-1, -2, -2, -3, -1]), [-3])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(remove_duplicates([-1, 0, 1, -1, 0, 1, 2]), [2])\n\n    def test_large_numbers(self):\n        self.assertEqual(remove_duplicates([10**6, 10**7, 10**6, 10**8]), [10**7, 10**8])\n\n    def test_order_preservation(self):\n        self.assertEqual(remove_duplicates([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), [4, 9, 2, 6])\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import remove_duplicates\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(remove_duplicates([]), [])\n\n    def test_no_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n\n    def test_all_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 1, 1, 1]), [])\n\n    def test_some_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 2, 3, 4, 4, 5]), [1, 3, 5])\n\n    def test_duplicates_at_ends(self):\n        self.assertEqual(remove_duplicates([1, 1, 2, 3, 4, 4]), [2, 3])\n\n    def test_negative_numbers(self):\n        self.assertEqual(remove_duplicates([-1, -2, -2, -3, -1]), [-3])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(remove_duplicates([-1, 0, 1, -1, 0, 1, 2]), [2])\n\n    def test_large_numbers(self):\n        self.assertEqual(remove_duplicates([10**6, 10**7, 10**6, 10**8]), [10**7, 10**8])\n\n    def test_order_preservation(self):\n        self.assertEqual(remove_duplicates([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), [4, 9, 2, 6])\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import remove_duplicates\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(remove_duplicates([]), [])\n\n    def test_no_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n\n    def test_all_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 1, 1, 1]), [])\n\n    def test_some_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 2, 3, 4, 4, 5]), [1, 3, 5])\n\n    def test_duplicates_at_ends(self):\n        self.assertEqual(remove_duplicates([1, 1, 2, 3, 4, 4]), [2, 3])\n\n    def test_negative_numbers(self):\n        self.assertEqual(remove_duplicates([-1, -2, -2, -3, -1]), [-3])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(remove_duplicates([-1, 0, 1, -1, 0, 1, 2]), [2])\n\n    def test_large_numbers(self):\n        self.assertEqual(remove_duplicates([10**6, 10**7, 10**6, 10**8]), [10**7, 10**8])\n\n    def test_order_preservation(self):\n        self.assertEqual(remove_duplicates([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), [4, 9, 2, 6])\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import remove_duplicates\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(remove_duplicates([]), [])\n\n    def test_no_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n\n    def test_all_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 1, 1, 1]), [])\n\n    def test_some_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 2, 3, 4, 4, 5]), [1, 3, 5])\n\n    def test_duplicates_at_ends(self):\n        self.assertEqual(remove_duplicates([1, 1, 2, 3, 4, 4]), [2, 3])\n\n    def test_negative_numbers(self):\n        self.assertEqual(remove_duplicates([-1, -2, -2, -3, -1]), [-3])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(remove_duplicates([-1, 0, 1, -1, 0, 1, 2]), [2])\n\n    def test_large_numbers(self):\n        self.assertEqual(remove_duplicates([10**6, 10**7, 10**6, 10**8]), [10**7, 10**8])\n\n    def test_order_preservation(self):\n        self.assertEqual(remove_duplicates([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), [4, 9, 2, 6])\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import remove_duplicates\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(remove_duplicates([]), [])\n\n    def test_no_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n\n    def test_all_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 1, 1, 1]), [])\n\n    def test_some_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 2, 3, 4, 4, 5]), [1, 3, 5])\n\n    def test_duplicates_at_ends(self):\n        self.assertEqual(remove_duplicates([1, 1, 2, 3, 4, 4]), [2, 3])\n\n    def test_negative_numbers(self):\n        self.assertEqual(remove_duplicates([-1, -2, -2, -3, -1]), [-3])\n\n    def test_mixed_numbers(self):\n        self.assertEqual(remove_duplicates([-1, 0, 1, -1, 0, 1, 2]), [2])\n\n    def test_large_numbers(self):\n        self.assertEqual(remove_duplicates([10**6, 10**7, 10**6, 10**8]), [10**7, 10**8])\n\n    def test_order_preservation(self):\n        self.assertEqual(remove_duplicates([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), [4, 9, 2, 6])\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}