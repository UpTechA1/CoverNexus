{
    "task_id": "HumanEval/133",
    "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
    "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "sum_squares",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import sum_squares\n\nclass TestSumSquares(unittest.TestCase):\n    def test_sum_squares(self):\n        test_cases = [\n            ([1, 2, 3], 14),\n            ([1, 4, 9], 98),\n            ([1, 3, 5, 7], 84),\n            ([1.4, 4.2, 0], 29),\n            ([-2.4, 1, 1], 6),\n            ([], 0),\n            ([0], 0),\n            ([-1, -1], 2),\n            ([0.1, 0.2, 0.3], 3),\n            ([9.9, 9.9, 9.9], 300),\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(lst=lst):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_large_numbers(self):\n        self.assertEqual(sum_squares([1000000, 2000000]), 5000000000000)\n\n    def test_negative_numbers(self):\n        self.assertEqual(sum_squares([-5, -3, -1]), 35)\n\n    def test_mixed_types(self):\n        self.assertEqual(sum_squares([1, 2.5, 3.7, -4.2]), 31)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".F..\n======================================================================\nFAIL: test_mixed_types (__main__.TestSumSquares.test_mixed_types)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 31, in test_mixed_types\n    self.assertEqual(sum_squares([1, 2.5, 3.7, -4.2]), 31)\nAssertionError: 42 != 31\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       6      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import sum_squares\n\nclass TestSumSquares(unittest.TestCase):\n    def test_basic_cases(self):\n        test_cases = [\n            ([1, 2, 3], 14),\n            ([1, 4, 9], 98),\n            ([1, 3, 5, 7], 84),\n            ([1.4, 4.2, 0], 29),\n            ([-2.4, 1, 1], 6),\n            ([], 0),\n            ([0], 0),\n            ([-1, -1], 2),\n            ([0.1, 0.2, 0.3], 3),\n            ([9.9, 9.9, 9.9], 300),\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(lst=lst):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_large_numbers(self):\n        with self.subTest(case=\"Large integers\"):\n            self.assertEqual(sum_squares([1000000, 2000000]), 5000000000000)\n        with self.subTest(case=\"Large floats\"):\n            self.assertEqual(sum_squares([1e15, 2e15]), 5e30)\n\n    def test_small_numbers(self):\n        with self.subTest(case=\"Small positive floats\"):\n            self.assertEqual(sum_squares([0.001, 0.002, 0.003]), 3)\n        with self.subTest(case=\"Small negative floats\"):\n            self.assertEqual(sum_squares([-0.001, -0.002, -0.003]), 3)\n\n    def test_mixed_types(self):\n        with self.subTest(case=\"Mixed positive and negative\"):\n            self.assertEqual(sum_squares([1, 2.5, 3.7, -4.2]), 42)\n        with self.subTest(case=\"Mixed types with zeroes\"):\n            self.assertEqual(sum_squares([-1.5, 0, 2.5, -3.7, 4.2]), 46)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".FFF\n======================================================================\nFAIL: test_large_numbers (__main__.TestSumSquares.test_large_numbers) (case='Large floats')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 28, in test_large_numbers\n    self.assertEqual(sum_squares([1e15, 2e15]), 5e30)\nAssertionError: 5000000000000000000000000000000 != 5e+30\n\n======================================================================\nFAIL: test_mixed_types (__main__.TestSumSquares.test_mixed_types) (case='Mixed types with zeroes')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 40, in test_mixed_types\n    self.assertEqual(sum_squares([-1.5, 0, 2.5, -3.7, 4.2]), 46)\nAssertionError: 44 != 46\n\n======================================================================\nFAIL: test_small_numbers (__main__.TestSumSquares.test_small_numbers) (case='Small negative floats')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_small_numbers\n    self.assertEqual(sum_squares([-0.001, -0.002, -0.003]), 3)\nAssertionError: 0 != 3\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       6      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import sum_squares\n\nclass TestSumSquares(unittest.TestCase):\n    def test_basic_cases(self):\n        test_cases = [\n            ([1, 2, 3], 14),\n            ([1, 4, 9], 98),\n            ([1, 3, 5, 7], 84),\n            ([1.4, 4.2, 0], 29),\n            ([-2.4, 1, 1], 6)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Basic case: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_edge_cases(self):\n        test_cases = [\n            ([], 0),\n            ([0], 0),\n            ([1], 1),\n            ([-1], 1),\n            ([0.1], 1),\n            ([-0.1], 1)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Edge case: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_large_numbers(self):\n        test_cases = [\n            ([1e15, 2e15], 5e30),\n            ([-1e15, -2e15], 5e30),\n            ([1e100, 1e100], 2e200)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Large numbers: {lst}\"):\n                self.assertAlmostEqual(sum_squares(lst), expected, delta=1e-10)\n\n    def test_small_numbers(self):\n        test_cases = [\n            ([-0.001, -0.002, -0.003], 3),\n            ([0.001, 0.002, 0.003], 3),\n            ([1e-10, 2e-10, 3e-10], 3)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Small numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_mixed_types(self):\n        test_cases = [\n            ([-1.5, 0, 2.5, -3.7, 4.2], 46),\n            ([1, -2.3, 3.8, -4, 5.2], 66),\n            ([0, 1, -1, 0.5, -0.5], 4)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Mixed types: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".F.FFFF\n======================================================================\nFAIL: test_edge_cases (__main__.TestSumSquares.test_edge_cases) (case='Edge case: [-0.1]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 29, in test_edge_cases\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_mixed_types (__main__.TestSumSquares.test_mixed_types) (case='Mixed types: [-1.5, 0, 2.5, -3.7, 4.2]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 59, in test_mixed_types\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 44 != 46\n\n======================================================================\nFAIL: test_mixed_types (__main__.TestSumSquares.test_mixed_types) (case='Mixed types: [1, -2.3, 3.8, -4, 5.2]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 59, in test_mixed_types\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 73 != 66\n\n======================================================================\nFAIL: test_mixed_types (__main__.TestSumSquares.test_mixed_types) (case='Mixed types: [0, 1, -1, 0.5, -0.5]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 59, in test_mixed_types\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 3 != 4\n\n======================================================================\nFAIL: test_small_numbers (__main__.TestSumSquares.test_small_numbers) (case='Small numbers: [-0.001, -0.002, -0.003]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 49, in test_small_numbers\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 0 != 3\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=5)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       6      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import sum_squares\n\nclass TestSumSquares(unittest.TestCase):\n    def test_positive_integers(self):\n        test_cases = [\n            ([1, 2, 3], 14),\n            ([1, 4, 9], 98),\n            ([1, 3, 5, 7], 84)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Positive integers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_floats(self):\n        test_cases = [\n            ([1.4, 4.2, 0], 29),\n            ([2.5, 3.7, 1.2], 29),\n            ([0.1, 0.2, 0.3], 3)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Floats: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_negative_numbers(self):\n        test_cases = [\n            ([-2.4, 1, 1], 6),\n            ([-1, -2, -3], 14),\n            ([-0.5, -1.5, -2.5], 9)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Negative numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_edge_cases(self):\n        test_cases = [\n            ([], 0),\n            ([0], 0),\n            ([-0.1], 0),\n            ([0.1], 1)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Edge case: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_mixed_types(self):\n        test_cases = [\n            ([-1.5, 0, 2.5, -3.7, 4.2], 44),\n            ([1, -2.3, 3.8, -4, 5.2], 73),\n            ([0, 1, -1, 0.5, -0.5], 3)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Mixed types: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_small_numbers(self):\n        test_cases = [\n            ([0.001, 0.002, 0.003], 3),\n            ([-0.001, -0.002, -0.003], 0),\n            ([0.999, -0.999, 1.001], 3)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Small numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_additional_edge_cases(self):\n        test_cases = [\n            ([-1, -2, -3, -4, -5], 55),\n            ([-1000000, -2000000, -3000000], 14000000000000),\n            ([1.99, 2.01, 2.99, 3.01], 30)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Additional edge case: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "F...F.F\n======================================================================\nFAIL: test_additional_edge_cases (__main__.TestSumSquares.test_additional_edge_cases) (case='Additional edge case: [1.99, 2.01, 2.99, 3.01]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 75, in test_additional_edge_cases\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 38 != 30\n\n======================================================================\nFAIL: test_negative_numbers (__main__.TestSumSquares.test_negative_numbers) (case='Negative numbers: [-0.5, -1.5, -2.5]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_negative_numbers\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 5 != 9\n\n======================================================================\nFAIL: test_small_numbers (__main__.TestSumSquares.test_small_numbers) (case='Small numbers: [0.999, -0.999, 1.001]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 65, in test_small_numbers\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 5 != 3\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       6      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import sum_squares\n\nclass TestSumSquares(unittest.TestCase):\n    def test_positive_integers(self):\n        test_cases = [\n            ([1, 2, 3], 14),\n            ([1, 4, 9], 98),\n            ([1, 3, 5, 7], 84)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Positive integers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_floating_point_numbers(self):\n        test_cases = [\n            ([1.4, 4.2, 0], 29),\n            ([1.99, 2.01, 2.99, 3.01], 38)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Floating point numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_negative_numbers(self):\n        test_cases = [\n            ([-2.4, 1, 1], 6),\n            ([-0.5, -1.5, -2.5], 14)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Negative numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_mixed_numbers(self):\n        test_cases = [\n            ([-1, 0, 1], 2),\n            ([-1.5, 0, 1.5], 6)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Mixed numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_small_numbers(self):\n        test_cases = [\n            ([0.999, -0.999, 1.001], 3),\n            ([0.1, 0.2, 0.3], 3)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Small numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_edge_cases(self):\n        test_cases = [\n            ([], 0),\n            ([0], 0),\n            ([-0.0, 0.0], 0)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Edge case: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "..FF.F\n======================================================================\nFAIL: test_mixed_numbers (__main__.TestSumSquares.test_mixed_numbers) (case='Mixed numbers: [-1.5, 0, 1.5]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 41, in test_mixed_numbers\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 5 != 6\n\n======================================================================\nFAIL: test_negative_numbers (__main__.TestSumSquares.test_negative_numbers) (case='Negative numbers: [-0.5, -1.5, -2.5]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 32, in test_negative_numbers\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 5 != 14\n\n======================================================================\nFAIL: test_small_numbers (__main__.TestSumSquares.test_small_numbers) (case='Small numbers: [0.999, -0.999, 1.001]')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 50, in test_small_numbers\n    self.assertEqual(sum_squares(lst), expected)\nAssertionError: 5 != 3\n\n----------------------------------------------------------------------\nRan 6 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       6      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import sum_squares\n\nclass TestSumSquares(unittest.TestCase):\n    def test_positive_integers(self):\n        test_cases = [\n            ([1, 2, 3], 14),\n            ([1, 4, 9], 98),\n            ([1, 3, 5, 7], 84)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Positive integers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_floating_point_numbers(self):\n        test_cases = [\n            ([1.4, 4.2, 0], 29),\n            ([1.99, 2.01, 2.99, 3.01], 38)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Floating point numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_negative_numbers(self):\n        test_cases = [\n            ([-2.4, 1, 1], 6),\n            ([-0.5, -1.5, -2.5], 14)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Negative numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_mixed_numbers(self):\n        test_cases = [\n            ([-1, 0, 1], 2),\n            ([-1.5, 0, 1.5], 6)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Mixed numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_small_numbers(self):\n        test_cases = [\n            ([0.999, -0.999, 1.001], 3),\n            ([0.1, 0.2, 0.3], 3)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Small numbers: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_edge_cases(self):\n        test_cases = [\n            ([], 0),\n            ([0], 0),\n            ([-0.0, 0.0], 0)\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(case=f\"Edge case: {lst}\"):\n                self.assertEqual(sum_squares(lst), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import sum_squares\n\nclass TestSumSquares(unittest.TestCase):\n    def test_sum_squares(self):\n        test_cases = [\n            ([1, 2, 3], 14),\n            ([1, 4, 9], 98),\n            ([1, 3, 5, 7], 84),\n            ([1.4, 4.2, 0], 29),\n            ([-2.4, 1, 1], 6),\n            ([], 0),\n            ([0], 0),\n            ([-1, -1], 2),\n            ([0.1, 0.2, 0.3], 3),\n            ([9.9, 9.9, 9.9], 300),\n        ]\n        for lst, expected in test_cases:\n            with self.subTest(lst=lst):\n                self.assertEqual(sum_squares(lst), expected)\n\n    def test_large_numbers(self):\n        self.assertEqual(sum_squares([1000000, 2000000]), 5000000000000)\n\n    def test_negative_numbers(self):\n        self.assertEqual(sum_squares([-5, -3, -1]), 35)\n\n    def test_mixed_types(self):\n        self.assertEqual(sum_squares([1, 2.5, 3.7, -4.2]), 31)\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 0,
    "use_filter": false
}