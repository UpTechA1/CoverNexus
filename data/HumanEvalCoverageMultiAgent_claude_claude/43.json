{
    "task_id": "HumanEval/43",
    "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
    "entry_point": "pairs_sum_to_zero",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertFalse(pairs_sum_to_zero([]))\n\n    def test_single_element(self):\n        self.assertFalse(pairs_sum_to_zero([0]))\n\n    def test_two_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, -1]))\n\n    def test_two_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2]))\n\n    def test_multiple_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, 2, 3, -2, 4]))\n\n    def test_multiple_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2, 3, 4, 5]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([-1, -2, -3, 2, -5]))\n\n    def test_all_zeros(self):\n        self.assertTrue(pairs_sum_to_zero([0, 0, 0]))\n\n    def test_large_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([1000000, -1000000, 2, 3]))\n\n    def test_duplicate_numbers(self):\n        self.assertFalse(pairs_sum_to_zero([1, 1, 2, 2, 3, 3]))\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       6      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               6      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertFalse(pairs_sum_to_zero([]))\n\n    def test_single_element(self):\n        self.assertFalse(pairs_sum_to_zero([0]))\n\n    def test_two_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, -1]))\n\n    def test_two_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2]))\n\n    def test_multiple_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, 2, 3, -2, 4]))\n\n    def test_multiple_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2, 3, 4, 5]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([-1, -2, -3, 2, -5]))\n\n    def test_all_zeros(self):\n        self.assertTrue(pairs_sum_to_zero([0, 0, 0]))\n\n    def test_large_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([1000000, -1000000, 2, 3]))\n\n    def test_duplicate_numbers(self):\n        self.assertFalse(pairs_sum_to_zero([1, 1, 2, 2, 3, 3]))\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertFalse(pairs_sum_to_zero([]))\n\n    def test_single_element(self):\n        self.assertFalse(pairs_sum_to_zero([0]))\n\n    def test_two_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, -1]))\n\n    def test_two_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2]))\n\n    def test_multiple_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, 2, 3, -2, 4]))\n\n    def test_multiple_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2, 3, 4, 5]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([-1, -2, -3, 2, -5]))\n\n    def test_all_zeros(self):\n        self.assertTrue(pairs_sum_to_zero([0, 0, 0]))\n\n    def test_large_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([1000000, -1000000, 2, 3]))\n\n    def test_duplicate_numbers(self):\n        self.assertFalse(pairs_sum_to_zero([1, 1, 2, 2, 3, 3]))\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertFalse(pairs_sum_to_zero([]))\n\n    def test_single_element(self):\n        self.assertFalse(pairs_sum_to_zero([0]))\n\n    def test_two_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, -1]))\n\n    def test_two_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2]))\n\n    def test_multiple_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, 2, 3, -2, 4]))\n\n    def test_multiple_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2, 3, 4, 5]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([-1, -2, -3, 2, -5]))\n\n    def test_all_zeros(self):\n        self.assertTrue(pairs_sum_to_zero([0, 0, 0]))\n\n    def test_large_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([1000000, -1000000, 2, 3]))\n\n    def test_duplicate_numbers(self):\n        self.assertFalse(pairs_sum_to_zero([1, 1, 2, 2, 3, 3]))\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertFalse(pairs_sum_to_zero([]))\n\n    def test_single_element(self):\n        self.assertFalse(pairs_sum_to_zero([0]))\n\n    def test_two_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, -1]))\n\n    def test_two_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2]))\n\n    def test_multiple_elements_sum_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, 2, 3, -2, 4]))\n\n    def test_multiple_elements_not_sum_zero(self):\n        self.assertFalse(pairs_sum_to_zero([1, 2, 3, 4, 5]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([-1, -2, -3, 2, -5]))\n\n    def test_all_zeros(self):\n        self.assertTrue(pairs_sum_to_zero([0, 0, 0]))\n\n    def test_large_numbers(self):\n        self.assertTrue(pairs_sum_to_zero([1000000, -1000000, 2, 3]))\n\n    def test_duplicate_numbers(self):\n        self.assertFalse(pairs_sum_to_zero([1, 1, 2, 2, 3, 3]))\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}