{
    "task_id": "HumanEval/157",
    "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
    "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
    "entry_point": "right_angle_triangle",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import right_angle_triangle\n\nclass TestRightAngleTriangle(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        test_cases = [\n            (3, 4, 5, True),\n            (5, 12, 13, True),\n            (8, 15, 17, True),\n            (1, 2, 3, False),\n            (5, 5, 5, False),\n            (0, 0, 0, False),\n            (1, 1, 1.414213562, True),\n            (10, 24, 26, True),\n            (7, 24, 25, True),\n            (20, 21, 29, True),\n        ]\n\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(right_angle_triangle(a, b, c), expected)\n\n    def test_edge_cases(self):\n        self.assertFalse(right_angle_triangle(-3, 4, 5))\n        self.assertFalse(right_angle_triangle(3, -4, 5))\n        self.assertFalse(right_angle_triangle(3, 4, -5))\n\n    def test_float_values(self):\n        self.assertTrue(right_angle_triangle(3.0, 4.0, 5.0))\n        self.assertFalse(right_angle_triangle(3.1, 4.1, 5.1))\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "F.FF\n======================================================================\nFAIL: test_edge_cases (__main__.TestRightAngleTriangle.test_edge_cases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 25, in test_edge_cases\n    self.assertFalse(right_angle_triangle(-3, 4, 5))\nAssertionError: True is not false\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=0, b=0, c=0)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_right_angle_triangle\n    self.assertEqual(right_angle_triangle(a, b, c), expected)\nAssertionError: True != False\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1, b=1, c=1.414213562)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_right_angle_triangle\n    self.assertEqual(right_angle_triangle(a, b, c), expected)\nAssertionError: False != True\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       2      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               2      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import right_angle_triangle\n\nclass TestRightAngleTriangle(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        test_cases = [\n            (3, 4, 5, True),\n            (5, 12, 13, True),\n            (1, 2, 3, False),\n            (7, 24, 25, True),\n            (8, 15, 17, True),\n            (1, 1, math.sqrt(2), True),\n            (10**6, 10**6 * math.sqrt(3), 2 * 10**6, True),\n            (0.3, 0.4, 0.5, True),\n            (1.5, 2.0, 2.5, True),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(right_angle_triangle(a, b, c), expected)\n\n    def test_edge_cases(self):\n        self.assertTrue(right_angle_triangle(-3, 4, 5))\n        self.assertTrue(right_angle_triangle(3, -4, 5))\n        self.assertTrue(right_angle_triangle(3, 4, -5))\n\n    def test_input_validation(self):\n        with self.assertRaises(TypeError):\n            right_angle_triangle(\"3\", 4, 5)\n        with self.assertRaises(TypeError):\n            right_angle_triangle(3, \"4\", 5)\n        with self.assertRaises(TypeError):\n            right_angle_triangle(3, 4, \"5\")\n        with self.assertRaises(TypeError):\n            right_angle_triangle(None, 4, 5)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "..F\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1, b=1, c=1.4142135623730951)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_right_angle_triangle\n    self.assertAlmostEqual(right_angle_triangle(a, b, c), expected)\nAssertionError: False != True within 7 places (1 difference)\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       2      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               2      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import right_angle_triangle\n\nclass TestRightAngleTriangle(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        test_cases = [\n            (3, 4, 5, True),\n            (5, 12, 13, True),\n            (1, 1, math.sqrt(2), True),\n            (1, 2, 3, False),\n            (5, 5, 5, False),\n            (0.3, 0.4, 0.5, True),\n            (1e-9, 1e-9, math.sqrt(2) * 1e-9, True),\n            (1e9, 1e9, math.sqrt(2) * 1e9, True),\n            (3, 4, 5.000001, False),\n            (5, 4, 3, True),\n            (4, 5, 3, True)\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                result = right_angle_triangle(a, b, c)\n                self.assertEqual(result, expected)\n\n    def test_edge_cases(self):\n        self.assertFalse(right_angle_triangle(0, 0, 0))\n        self.assertFalse(right_angle_triangle(1e-15, 1e-15, 1e-15))\n        self.assertTrue(right_angle_triangle(1e-15, 1e-15, math.sqrt(2) * 1e-15))\n\n    def test_input_validation(self):\n        with self.assertRaises(TypeError):\n            right_angle_triangle(\"1\", 2, 3)\n        with self.assertRaises(TypeError):\n            right_angle_triangle(1, \"2\", 3)\n        with self.assertRaises(TypeError):\n            right_angle_triangle(1, 2, \"3\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "F.FF\n======================================================================\nFAIL: test_edge_cases (__main__.TestRightAngleTriangle.test_edge_cases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_edge_cases\n    self.assertFalse(right_angle_triangle(0, 0, 0))\nAssertionError: True is not false\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1, b=1, c=1.4142135623730951)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_right_angle_triangle\n    self.assertEqual(result, expected)\nAssertionError: False != True\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1e-09, b=1e-09, c=1.4142135623730953e-09)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_right_angle_triangle\n    self.assertEqual(result, expected)\nAssertionError: False != True\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       2      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               2      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import right_angle_triangle\nimport math\n\nclass TestRightAngleTriangle(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        test_cases = [\n            (3, 4, 5, True),\n            (5, 12, 13, True),\n            (1, 1, math.sqrt(2), True),\n            (1, 2, 3, False),\n            (7, 24, 25, True),\n            (8, 15, 17, True),\n            (0.3, 0.4, 0.5, True),\n            (1e-9, 1e-9, math.sqrt(2) * 1e-9, True),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertTrue(math.isclose(right_angle_triangle(a, b, c), expected, rel_tol=1e-9))\n\n    def test_edge_cases(self):\n        self.assertFalse(right_angle_triangle(0, 0, 0))\n        self.assertFalse(right_angle_triangle(-1, 2, 2))\n        self.assertFalse(right_angle_triangle(1, -2, 2))\n        self.assertFalse(right_angle_triangle(1, 2, -2))\n\n    def test_floating_point_precision(self):\n        self.assertTrue(right_angle_triangle(0.3, 0.4, 0.5))\n        self.assertTrue(right_angle_triangle(1e-6, 1e-6, math.sqrt(2) * 1e-6))\n        self.assertFalse(right_angle_triangle(1e-6, 1e-6, 1e-6))\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFFF\n======================================================================\nFAIL: test_edge_cases (__main__.TestRightAngleTriangle.test_edge_cases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_edge_cases\n    self.assertFalse(right_angle_triangle(0, 0, 0))\nAssertionError: True is not false\n\n======================================================================\nFAIL: test_floating_point_precision (__main__.TestRightAngleTriangle.test_floating_point_precision)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 30, in test_floating_point_precision\n    self.assertTrue(right_angle_triangle(1e-6, 1e-6, math.sqrt(2) * 1e-6))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1, b=1, c=1.4142135623730951)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 20, in test_right_angle_triangle\n    self.assertTrue(math.isclose(right_angle_triangle(a, b, c), expected, rel_tol=1e-9))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1e-09, b=1e-09, c=1.4142135623730953e-09)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 20, in test_right_angle_triangle\n    self.assertTrue(math.isclose(right_angle_triangle(a, b, c), expected, rel_tol=1e-9))\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nFAILED (failures=4)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       2      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               2      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import right_angle_triangle\n\nclass TestRightAngleTriangle(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        test_cases = [\n            (3, 4, 5, True),\n            (5, 12, 13, True),\n            (1, 1, math.sqrt(2), True),\n            (1, 2, 3, False),\n            (7, 24, 25, True),\n            (8, 15, 17, True),\n            (1e-9, 1e-9, math.sqrt(2) * 1e-9, True),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(right_angle_triangle(a, b, c), expected)\n\n    def test_edge_cases(self):\n        self.assertFalse(right_angle_triangle(0, 0, 0))\n        self.assertFalse(right_angle_triangle(1, 1, 1))\n        self.assertTrue(right_angle_triangle(0, 3, 3))\n\n    def test_floating_point_precision(self):\n        self.assertTrue(right_angle_triangle(1, 1, math.sqrt(2)))\n        self.assertTrue(right_angle_triangle(0.1, 0.1, 0.1414213562373095))\n\n    def test_invalid_inputs(self):\n        with self.assertRaises(TypeError):\n            right_angle_triangle(\"a\", \"b\", \"c\")\n        with self.assertRaises(ValueError):\n            right_angle_triangle(-1, 2, 3)\n        with self.assertRaises(ValueError):\n            right_angle_triangle(1, -2, 3)\n        with self.assertRaises(ValueError):\n            right_angle_triangle(1, 2, -3)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFFFF\n======================================================================\nFAIL: test_edge_cases (__main__.TestRightAngleTriangle.test_edge_cases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_edge_cases\n    self.assertFalse(right_angle_triangle(0, 0, 0))\nAssertionError: True is not false\n\n======================================================================\nFAIL: test_floating_point_precision (__main__.TestRightAngleTriangle.test_floating_point_precision)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_floating_point_precision\n    self.assertTrue(right_angle_triangle(1, 1, math.sqrt(2)))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_invalid_inputs (__main__.TestRightAngleTriangle.test_invalid_inputs)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_invalid_inputs\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1, b=1, c=1.4142135623730951)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 19, in test_right_angle_triangle\n    self.assertEqual(right_angle_triangle(a, b, c), expected)\nAssertionError: False != True\n\n======================================================================\nFAIL: test_right_angle_triangle (__main__.TestRightAngleTriangle.test_right_angle_triangle) (a=1e-09, b=1e-09, c=1.4142135623730953e-09)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 19, in test_right_angle_triangle\n    self.assertEqual(right_angle_triangle(a, b, c), expected)\nAssertionError: False != True\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nFAILED (failures=5)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       2      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               2      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import right_angle_triangle\n\nclass TestRightAngleTriangle(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        test_cases = [\n            (3, 4, 5, True),\n            (5, 12, 13, True),\n            (1, 1, math.sqrt(2), True),\n            (1, 2, 3, False),\n            (7, 24, 25, True),\n            (8, 15, 17, True),\n            (1e-9, 1e-9, math.sqrt(2) * 1e-9, True),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(right_angle_triangle(a, b, c), expected)\n\n    def test_edge_cases(self):\n        self.assertFalse(right_angle_triangle(0, 0, 0))\n        self.assertFalse(right_angle_triangle(1, 1, 1))\n        self.assertTrue(right_angle_triangle(0, 3, 3))\n\n    def test_floating_point_precision(self):\n        self.assertTrue(right_angle_triangle(1, 1, math.sqrt(2)))\n        self.assertTrue(right_angle_triangle(0.1, 0.1, 0.1414213562373095))\n\n    def test_invalid_inputs(self):\n        with self.assertRaises(TypeError):\n            right_angle_triangle(\"a\", \"b\", \"c\")\n        with self.assertRaises(ValueError):\n            right_angle_triangle(-1, 2, 3)\n        with self.assertRaises(ValueError):\n            right_angle_triangle(1, -2, 3)\n        with self.assertRaises(ValueError):\n            right_angle_triangle(1, 2, -3)\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import right_angle_triangle\n\nclass TestRightAngleTriangle(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        test_cases = [\n            (3, 4, 5, True),\n            (5, 12, 13, True),\n            (8, 15, 17, True),\n            (1, 2, 3, False),\n            (5, 5, 5, False),\n            (0, 0, 0, False),\n            (1, 1, 1.414213562, True),\n            (10, 24, 26, True),\n            (7, 24, 25, True),\n            (20, 21, 29, True),\n        ]\n\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(right_angle_triangle(a, b, c), expected)\n\n    def test_edge_cases(self):\n        self.assertFalse(right_angle_triangle(-3, 4, 5))\n        self.assertFalse(right_angle_triangle(3, -4, 5))\n        self.assertFalse(right_angle_triangle(3, 4, -5))\n\n    def test_float_values(self):\n        self.assertTrue(right_angle_triangle(3.0, 4.0, 5.0))\n        self.assertFalse(right_angle_triangle(3.1, 4.1, 5.1))\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nimport math\nfrom codebase import right_angle_triangle\n\n\nclass TestRightAngleTriangle(unittest.TestCase):\n\n    def test_edge_cases_2(self):\n        self.assertFalse(right_angle_triangle(1, 1, 1))\n\n    def test_edge_cases_3(self):\n        self.assertTrue(right_angle_triangle(0, 3, 3))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 100.0,
    "use_filter": true
}