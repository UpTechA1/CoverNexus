{
    "task_id": "HumanEval/92",
    "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
    "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
    "entry_point": "any_int",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import any_int\n\nclass TestAnyInt(unittest.TestCase):\n    def test_positive_integers(self):\n        self.assertTrue(any_int(5, 2, 7))\n        self.assertTrue(any_int(7, 5, 2))\n        self.assertTrue(any_int(2, 7, 5))\n\n    def test_negative_integers(self):\n        self.assertTrue(any_int(-5, -2, -7))\n        self.assertTrue(any_int(3, -2, 1))\n        self.assertTrue(any_int(-1, 3, -4))\n\n    def test_zero(self):\n        self.assertTrue(any_int(0, 0, 0))\n        self.assertTrue(any_int(1, 1, 0))\n\n    def test_large_numbers(self):\n        self.assertTrue(any_int(1000000, 1, 1000001))\n        self.assertTrue(any_int(-1000000, 1000001, 1))\n\n    def test_false_cases(self):\n        self.assertFalse(any_int(3, 2, 2))\n        self.assertFalse(any_int(1, 2, 4))\n        self.assertFalse(any_int(-1, -2, -4))\n\n    def test_non_integers(self):\n        self.assertFalse(any_int(3.6, -2.2, 2))\n        self.assertFalse(any_int(1, 2, 3.0))\n        self.assertFalse(any_int(1.5, 2.5, 4))\n\n    def test_non_numeric(self):\n        self.assertFalse(any_int(\"1\", 2, 3))\n        self.assertFalse(any_int(1, [2], 3))\n        self.assertFalse(any_int(1, 2, None))\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       6      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               6      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import any_int\n\nclass TestAnyInt(unittest.TestCase):\n    def test_positive_integers(self):\n        self.assertTrue(any_int(5, 2, 7))\n        self.assertTrue(any_int(7, 5, 2))\n        self.assertTrue(any_int(2, 7, 5))\n\n    def test_negative_integers(self):\n        self.assertTrue(any_int(-5, -2, -7))\n        self.assertTrue(any_int(3, -2, 1))\n        self.assertTrue(any_int(-1, 3, -4))\n\n    def test_zero(self):\n        self.assertTrue(any_int(0, 0, 0))\n        self.assertTrue(any_int(1, 1, 0))\n\n    def test_large_numbers(self):\n        self.assertTrue(any_int(1000000, 1, 1000001))\n        self.assertTrue(any_int(-1000000, 1000001, 1))\n\n    def test_false_cases(self):\n        self.assertFalse(any_int(3, 2, 2))\n        self.assertFalse(any_int(1, 2, 4))\n        self.assertFalse(any_int(-1, -2, -4))\n\n    def test_non_integers(self):\n        self.assertFalse(any_int(3.6, -2.2, 2))\n        self.assertFalse(any_int(1, 2, 3.0))\n        self.assertFalse(any_int(1.5, 2.5, 4))\n\n    def test_non_numeric(self):\n        self.assertFalse(any_int(\"1\", 2, 3))\n        self.assertFalse(any_int(1, [2], 3))\n        self.assertFalse(any_int(1, 2, None))\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import any_int\n\nclass TestAnyInt(unittest.TestCase):\n    def test_positive_integers(self):\n        self.assertTrue(any_int(5, 2, 7))\n        self.assertTrue(any_int(7, 5, 2))\n        self.assertTrue(any_int(2, 7, 5))\n\n    def test_negative_integers(self):\n        self.assertTrue(any_int(-5, -2, -7))\n        self.assertTrue(any_int(3, -2, 1))\n        self.assertTrue(any_int(-1, 3, -4))\n\n    def test_zero(self):\n        self.assertTrue(any_int(0, 0, 0))\n        self.assertTrue(any_int(1, 1, 0))\n\n    def test_large_numbers(self):\n        self.assertTrue(any_int(1000000, 1, 1000001))\n        self.assertTrue(any_int(-1000000, 1000001, 1))\n\n    def test_false_cases(self):\n        self.assertFalse(any_int(3, 2, 2))\n        self.assertFalse(any_int(1, 2, 4))\n        self.assertFalse(any_int(-1, -2, -4))\n\n    def test_non_integers(self):\n        self.assertFalse(any_int(3.6, -2.2, 2))\n        self.assertFalse(any_int(1, 2, 3.0))\n        self.assertFalse(any_int(1.5, 2.5, 4))\n\n    def test_non_numeric(self):\n        self.assertFalse(any_int(\"1\", 2, 3))\n        self.assertFalse(any_int(1, [2], 3))\n        self.assertFalse(any_int(1, 2, None))\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import any_int\n\nclass TestAnyInt(unittest.TestCase):\n    def test_positive_integers(self):\n        self.assertTrue(any_int(5, 2, 7))\n        self.assertTrue(any_int(7, 5, 2))\n        self.assertTrue(any_int(2, 7, 5))\n\n    def test_negative_integers(self):\n        self.assertTrue(any_int(-5, -2, -7))\n        self.assertTrue(any_int(3, -2, 1))\n        self.assertTrue(any_int(-1, 3, -4))\n\n    def test_zero(self):\n        self.assertTrue(any_int(0, 0, 0))\n        self.assertTrue(any_int(1, 1, 0))\n\n    def test_large_numbers(self):\n        self.assertTrue(any_int(1000000, 1, 1000001))\n        self.assertTrue(any_int(-1000000, 1000001, 1))\n\n    def test_false_cases(self):\n        self.assertFalse(any_int(3, 2, 2))\n        self.assertFalse(any_int(1, 2, 4))\n        self.assertFalse(any_int(-1, -2, -4))\n\n    def test_non_integers(self):\n        self.assertFalse(any_int(3.6, -2.2, 2))\n        self.assertFalse(any_int(1, 2, 3.0))\n        self.assertFalse(any_int(1.5, 2.5, 4))\n\n    def test_non_numeric(self):\n        self.assertFalse(any_int(\"1\", 2, 3))\n        self.assertFalse(any_int(1, [2], 3))\n        self.assertFalse(any_int(1, 2, None))\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import any_int\n\nclass TestAnyInt(unittest.TestCase):\n    def test_positive_integers(self):\n        self.assertTrue(any_int(5, 2, 7))\n        self.assertTrue(any_int(7, 5, 2))\n        self.assertTrue(any_int(2, 7, 5))\n\n    def test_negative_integers(self):\n        self.assertTrue(any_int(-5, -2, -7))\n        self.assertTrue(any_int(3, -2, 1))\n        self.assertTrue(any_int(-1, 3, -4))\n\n    def test_zero(self):\n        self.assertTrue(any_int(0, 0, 0))\n        self.assertTrue(any_int(1, 1, 0))\n\n    def test_large_numbers(self):\n        self.assertTrue(any_int(1000000, 1, 1000001))\n        self.assertTrue(any_int(-1000000, 1000001, 1))\n\n    def test_false_cases(self):\n        self.assertFalse(any_int(3, 2, 2))\n        self.assertFalse(any_int(1, 2, 4))\n        self.assertFalse(any_int(-1, -2, -4))\n\n    def test_non_integers(self):\n        self.assertFalse(any_int(3.6, -2.2, 2))\n        self.assertFalse(any_int(1, 2, 3.0))\n        self.assertFalse(any_int(1.5, 2.5, 4))\n\n    def test_non_numeric(self):\n        self.assertFalse(any_int(\"1\", 2, 3))\n        self.assertFalse(any_int(1, [2], 3))\n        self.assertFalse(any_int(1, 2, None))\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}