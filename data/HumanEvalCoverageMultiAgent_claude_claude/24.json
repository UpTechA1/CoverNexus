{
    "task_id": "HumanEval/24",
    "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
    "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
    "entry_point": "largest_divisor",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import largest_divisor\n\nclass TestLargestDivisor(unittest.TestCase):\n    def test_largest_divisor(self):\n        test_cases = [\n            (15, 5),\n            (16, 8),\n            (17, 1),\n            (100, 50),\n            (1, 1),\n            (2, 1),\n            (3, 1),\n            (4, 2),\n            (9, 3),\n            (12, 6),\n            (25, 5),\n            (36, 18),\n            (49, 7),\n            (64, 32),\n            (81, 27),\n            (100, 50),\n        ]\n        \n        for n, expected in test_cases:\n            with self.subTest(n=n, expected=expected):\n                self.assertEqual(largest_divisor(n), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "E\n======================================================================\nERROR: test_largest_divisor (__main__.TestLargestDivisor.test_largest_divisor) (n=1, expected=1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 28, in test_largest_divisor\n    self.assertEqual(largest_divisor(n), expected)\n                     ^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 9, in largest_divisor\n    if n % i == 0:\n       ~~^~~\nZeroDivisionError: integer modulo by zero\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (errors=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       4      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               4      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import largest_divisor\n\nclass TestLargestDivisor(unittest.TestCase):\n    def test_largest_divisor(self):\n        test_cases = [\n            (1, 1),\n            (2, 1),\n            (3, 1),\n            (4, 2),\n            (9, 3),\n            (12, 6),\n            (15, 5),\n            (16, 8),\n            (17, 1),\n            (25, 5),\n            (36, 18),\n            (49, 7),\n            (64, 32),\n            (81, 27),\n            (100, 50),\n        ]\n        \n        for n, expected in test_cases:\n            with self.subTest(n=n, expected=expected):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            largest_divisor(0)\n        \n        with self.assertRaises(ValueError):\n            largest_divisor(-1)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FE\n======================================================================\nERROR: test_largest_divisor (__main__.TestLargestDivisor.test_largest_divisor) (n=1, expected=1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_largest_divisor\n    self.assertEqual(largest_divisor(n), expected)\n                     ^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 9, in largest_divisor\n    if n % i == 0:\n       ~~^~~\nZeroDivisionError: integer modulo by zero\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 30, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=1, errors=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       4      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               4      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import largest_divisor\n\nclass TestLargestDivisor(unittest.TestCase):\n    def test_largest_divisor(self):\n        test_cases = [\n            (2, 1),\n            (3, 1),\n            (4, 2),\n            (9, 3),\n            (12, 6),\n            (15, 5),\n            (16, 8),\n            (17, 1),\n            (25, 5),\n            (36, 18),\n            (49, 7),\n            (64, 32),\n            (81, 27),\n            (100, 50),\n            (121, 11),\n            (1000, 500),\n        ]\n        \n        for n, expected in test_cases:\n            with self.subTest(n=n, expected=expected):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_invalid_input(self):\n        invalid_inputs = [0, -1, -10, 1.5, \"2\"]\n        for invalid_input in invalid_inputs:\n            with self.subTest(invalid_input=invalid_input):\n                with self.assertRaises(ValueError):\n                    largest_divisor(invalid_input)\n\n    def test_edge_cases(self):\n        with self.subTest(n=1):\n            self.assertEqual(largest_divisor(1), 1)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "EFFFEE.\n======================================================================\nERROR: test_edge_cases (__main__.TestLargestDivisor.test_edge_cases) (n=1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 39, in test_edge_cases\n    self.assertEqual(largest_divisor(1), 1)\n                     ^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 9, in largest_divisor\n    if n % i == 0:\n       ~~^~~\nZeroDivisionError: integer modulo by zero\n\n======================================================================\nERROR: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=1.5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_invalid_input\n    largest_divisor(invalid_input)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 8, in largest_divisor\n    for i in reversed(range(n)):\n                      ^^^^^^^^\nTypeError: 'float' object cannot be interpreted as an integer\n\n======================================================================\nERROR: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input='2')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_invalid_input\n    largest_divisor(invalid_input)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 8, in largest_divisor\n    for i in reversed(range(n)):\n                      ^^^^^^^^\nTypeError: 'str' object cannot be interpreted as an integer\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=0)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=-1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=-10)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nFAILED (failures=3, errors=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       4      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               4      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import largest_divisor\n\nclass TestLargestDivisor(unittest.TestCase):\n    def test_largest_divisor(self):\n        test_cases = [\n            (15, 5),\n            (24, 12),\n            (7, 1),\n            (100, 50),\n        ]\n        for n, expected in test_cases:\n            with self.subTest(n=n):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_invalid_input(self):\n        invalid_inputs = [0, 1.5, '2']\n        for invalid_input in invalid_inputs:\n            with self.subTest(invalid_input=invalid_input):\n                with self.assertRaises(ValueError):\n                    largest_divisor(invalid_input)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (1, 1),\n            (2, 1),\n            (3, 1),\n            (97, 1),\n            (10**6, 500000),\n        ]\n        for n, expected in edge_cases:\n            with self.subTest(n=n):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_negative_inputs(self):\n        negative_inputs = [-1, -10, -15, -100]\n        for n in negative_inputs:\n            with self.subTest(n=n):\n                self.assertEqual(largest_divisor(n), abs(n) // 2)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "EFEE.FFFF\n======================================================================\nERROR: test_edge_cases (__main__.TestLargestDivisor.test_edge_cases) (n=1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 34, in test_edge_cases\n    self.assertEqual(largest_divisor(n), expected)\n                     ^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 9, in largest_divisor\n    if n % i == 0:\n       ~~^~~\nZeroDivisionError: integer modulo by zero\n\n======================================================================\nERROR: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=1.5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_invalid_input\n    largest_divisor(invalid_input)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 8, in largest_divisor\n    for i in reversed(range(n)):\n                      ^^^^^^^^\nTypeError: 'float' object cannot be interpreted as an integer\n\n======================================================================\nERROR: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input='2')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_invalid_input\n    largest_divisor(invalid_input)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 8, in largest_divisor\n    for i in reversed(range(n)):\n                      ^^^^^^^^\nTypeError: 'str' object cannot be interpreted as an integer\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=0)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_negative_inputs (__main__.TestLargestDivisor.test_negative_inputs) (n=-1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 40, in test_negative_inputs\n    self.assertEqual(largest_divisor(n), abs(n) // 2)\nAssertionError: None != 0\n\n======================================================================\nFAIL: test_negative_inputs (__main__.TestLargestDivisor.test_negative_inputs) (n=-10)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 40, in test_negative_inputs\n    self.assertEqual(largest_divisor(n), abs(n) // 2)\nAssertionError: None != 5\n\n======================================================================\nFAIL: test_negative_inputs (__main__.TestLargestDivisor.test_negative_inputs) (n=-15)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 40, in test_negative_inputs\n    self.assertEqual(largest_divisor(n), abs(n) // 2)\nAssertionError: None != 7\n\n======================================================================\nFAIL: test_negative_inputs (__main__.TestLargestDivisor.test_negative_inputs) (n=-100)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 40, in test_negative_inputs\n    self.assertEqual(largest_divisor(n), abs(n) // 2)\nAssertionError: None != 50\n\n----------------------------------------------------------------------\nRan 4 tests in 0.034s\n\nFAILED (failures=5, errors=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       4      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               4      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import largest_divisor\n\nclass TestLargestDivisor(unittest.TestCase):\n    def test_largest_divisor(self):\n        test_cases = [\n            (15, 5),\n            (24, 12),\n            (7, 1),\n            (100, 50),\n        ]\n        for n, expected in test_cases:\n            with self.subTest(n=n):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_invalid_input(self):\n        invalid_inputs = [-1, 1.5, '2', -10, -15, -100]\n        for invalid_input in invalid_inputs:\n            with self.subTest(invalid_input=invalid_input):\n                with self.assertRaises(ValueError):\n                    largest_divisor(invalid_input)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (1, 1),\n            (2, 1),\n            (3, 1),\n            (97, 1),\n            (10**6, 500000),\n        ]\n        for n, expected in edge_cases:\n            with self.subTest(n=n):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_zero_input(self):\n        with self.subTest(n=0):\n            self.assertEqual(largest_divisor(0), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "EFEEFFF.F\n======================================================================\nERROR: test_edge_cases (__main__.TestLargestDivisor.test_edge_cases) (n=1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_edge_cases\n    self.assertEqual(largest_divisor(n), expected)\n                     ^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 9, in largest_divisor\n    if n % i == 0:\n       ~~^~~\nZeroDivisionError: integer modulo by zero\n\n======================================================================\nERROR: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=1.5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_invalid_input\n    largest_divisor(invalid_input)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 8, in largest_divisor\n    for i in reversed(range(n)):\n                      ^^^^^^^^\nTypeError: 'float' object cannot be interpreted as an integer\n\n======================================================================\nERROR: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input='2')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_invalid_input\n    largest_divisor(invalid_input)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 8, in largest_divisor\n    for i in reversed(range(n)):\n                      ^^^^^^^^\nTypeError: 'str' object cannot be interpreted as an integer\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=-1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=-10)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=-15)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestLargestDivisor.test_invalid_input) (invalid_input=-100)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_zero_input (__main__.TestLargestDivisor.test_zero_input) (n=0)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 39, in test_zero_input\n    self.assertEqual(largest_divisor(0), 0)\nAssertionError: None != 0\n\n----------------------------------------------------------------------\nRan 4 tests in 0.033s\n\nFAILED (failures=5, errors=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       4      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               4      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import largest_divisor\n\nclass TestLargestDivisor(unittest.TestCase):\n    def test_largest_divisor(self):\n        test_cases = [\n            (15, 5),\n            (24, 12),\n            (7, 1),\n            (100, 50),\n        ]\n        for n, expected in test_cases:\n            with self.subTest(n=n):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_invalid_input(self):\n        invalid_inputs = [-1, 1.5, '2', -10, -15, -100]\n        for invalid_input in invalid_inputs:\n            with self.subTest(invalid_input=invalid_input):\n                with self.assertRaises(ValueError):\n                    largest_divisor(invalid_input)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (1, 1),\n            (2, 1),\n            (3, 1),\n            (97, 1),\n            (10**6, 500000),\n        ]\n        for n, expected in edge_cases:\n            with self.subTest(n=n):\n                self.assertEqual(largest_divisor(n), expected)\n\n    def test_zero_input(self):\n        with self.subTest(n=0):\n            self.assertEqual(largest_divisor(0), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import largest_divisor\n\nclass TestLargestDivisor(unittest.TestCase):\n    def test_largest_divisor(self):\n        test_cases = [\n            (15, 5),\n            (16, 8),\n            (17, 1),\n            (100, 50),\n            (1, 1),\n            (2, 1),\n            (3, 1),\n            (4, 2),\n            (9, 3),\n            (12, 6),\n            (25, 5),\n            (36, 18),\n            (49, 7),\n            (64, 32),\n            (81, 27),\n            (100, 50),\n        ]\n        \n        for n, expected in test_cases:\n            with self.subTest(n=n, expected=expected):\n                self.assertEqual(largest_divisor(n), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 0,
    "use_filter": false
}