{
    "task_id": "HumanEval/49",
    "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
    "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
    "entry_point": "modp",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_modp(self):\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n            (10, 7, 2),\n            (50, 97, 59),\n            (1000000, 1000000007, 973628284),\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        self.assertEqual(modp(1, 2), 0)\n        self.assertEqual(modp(1, 3), 2)\n        self.assertEqual(modp(10**6, 10**9+7), 597959891)\n\n    def test_large_numbers(self):\n        self.assertEqual(modp(10**9, 10**9+7), 582344008)\n\n    def test_prime_modulus(self):\n        self.assertEqual(modp(100, 97), 59)\n\n    def test_power_of_two_modulus(self):\n        self.assertEqual(modp(10, 16), 0)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "The process took too long to complete and was terminated, please use small number for input or check the test script.",
            "coverage": 0,
            "exist_error": false
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_modp(self):\n        test_cases = [\n            (3, 5, 3),\n            (0, 101, 1),\n            (1, 11, 2),\n            (2, 7, 4),\n            (5, 17, 15),\n            (10, 23, 13),\n            (15, 31, 2),\n            (20, 41, 16),\n            (25, 53, 32),\n            (30, 61, 35)\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        self.assertEqual(modp(0, 5), 1)\n        self.assertEqual(modp(1, 2), 0)\n        self.assertEqual(modp(100, 2), 0)\n\n    def test_prime_moduli(self):\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        for p in primes:\n            with self.subTest(p=p):\n                self.assertEqual(modp(p-1, p), p-1)\n\n    def test_error_cases(self):\n        with self.assertRaises(ValueError):\n            modp(-1, 5)\n        with self.assertRaises(ValueError):\n            modp(5, -1)\n        with self.assertRaises(ValueError):\n            modp(5, 0)\n        with self.assertRaises(TypeError):\n            modp(3.14, 5)\n        with self.assertRaises(TypeError):\n            modp(5, 3.14)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".FFFFFFFFFFFFFFFF\n======================================================================\nFAIL: test_error_cases (__main__.TestModp.test_error_cases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 36, in test_error_cases\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=10, p=23)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 12 != 13\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=15, p=31)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 1 != 2\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=20, p=41)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 1 != 16\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=25, p=53)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 26 != 32\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=30, p=61)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 60 != 35\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=2)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=3)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 2\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 4\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=7)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 6\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=11)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 10\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=13)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 12\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=17)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 16\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=19)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 18\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=23)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 22\n\n======================================================================\nFAIL: test_prime_moduli (__main__.TestModp.test_prime_moduli) (p=29)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 33, in test_prime_moduli\n    self.assertEqual(modp(p-1, p), p-1)\nAssertionError: 1 != 28\n\n----------------------------------------------------------------------\nRan 4 tests in 0.002s\n\nFAILED (failures=16)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_modp(self):\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n            (10, 23, 12),\n            (15, 31, 1),\n            (20, 41, 1),\n            (25, 53, 26),\n            (30, 61, 60)\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 5, 1),\n            (1, 2, 0),\n            (100, 2, 0),\n            (1000000, 3, 1),\n            (1, 1000000007, 2)\n        ]\n        \n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_large_numbers(self):\n        large_cases = [\n            (10**6, 10**9+7, 976371285),\n            (10**9, 10**9+9, 209715200)\n        ]\n        \n        for n, p, expected in large_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_documentation_examples(self):\n        doc_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1)\n        ]\n        \n        for n, p, expected in doc_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "The process took too long to complete and was terminated, please use small number for input or check the test script.",
            "coverage": 0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_small_numbers(self):\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n            (7, 13, 11),\n            (10, 17, 4),\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 5, 1),\n            (1, 2, 0),\n            (0, 2, 1),\n            (1, 3, 2),\n        ]\n        \n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_moderate_numbers(self):\n        moderate_cases = [\n            (1000, 997, 1),\n            (10000, 10007, 2894),\n            (5000, 4999, 4998),\n            (2000, 2003, 1998),\n        ]\n        \n        for n, p, expected in moderate_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_prime_modulus(self):\n        prime_cases = [\n            (50, 97, 59),\n            (100, 101, 1),\n            (200, 199, 2),\n        ]\n        \n        for n, p, expected in prime_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_power_of_two_modulus(self):\n        power_of_two_cases = [\n            (10, 16, 0),\n            (15, 32, 0),\n            (20, 64, 0),\n        ]\n        \n        for n, p, expected in power_of_two_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_large_exponent_small_modulus(self):\n        large_exp_cases = [\n            (1000000, 7, 2),\n            (999999, 5, 4),\n            (1000001, 3, 1),\n        ]\n        \n        for n, p, expected in large_exp_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_error_cases(self):\n        with self.subTest(case=\"negative n\"):\n            with self.assertRaises(ValueError):\n                modp(-1, 5)\n        \n        with self.subTest(case=\"negative p\"):\n            with self.assertRaises(ValueError):\n                modp(5, -1)\n        \n        with self.subTest(case=\"zero p\"):\n            with self.assertRaises(ValueError):\n                modp(5, 0)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".FFEFFFFFF.FF.\n======================================================================\nERROR: test_error_cases (__main__.TestModp.test_error_cases) (case='zero p')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 89, in test_error_cases\n    modp(5, 0)\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py\", line 18, in modp\n    ret = (2 * ret) % p\n          ~~~~~~~~~~^~~\nZeroDivisionError: integer modulo by zero\n\n======================================================================\nFAIL: test_error_cases (__main__.TestModp.test_error_cases) (case='negative n')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 80, in test_error_cases\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_error_cases (__main__.TestModp.test_error_cases) (case='negative p')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 84, in test_error_cases\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n======================================================================\nFAIL: test_large_exponent_small_modulus (__main__.TestModp.test_large_exponent_small_modulus) (n=999999, p=5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 76, in test_large_exponent_small_modulus\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 3 != 4\n\n======================================================================\nFAIL: test_large_exponent_small_modulus (__main__.TestModp.test_large_exponent_small_modulus) (n=1000001, p=3)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 76, in test_large_exponent_small_modulus\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 2 != 1\n\n======================================================================\nFAIL: test_moderate_numbers (__main__.TestModp.test_moderate_numbers) (n=1000, p=997)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 43, in test_moderate_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 16 != 1\n\n======================================================================\nFAIL: test_moderate_numbers (__main__.TestModp.test_moderate_numbers) (n=10000, p=10007)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 43, in test_moderate_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 3909 != 2894\n\n======================================================================\nFAIL: test_moderate_numbers (__main__.TestModp.test_moderate_numbers) (n=5000, p=4999)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 43, in test_moderate_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 4 != 4998\n\n======================================================================\nFAIL: test_moderate_numbers (__main__.TestModp.test_moderate_numbers) (n=2000, p=2003)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 43, in test_moderate_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 501 != 1998\n\n======================================================================\nFAIL: test_prime_modulus (__main__.TestModp.test_prime_modulus) (n=50, p=97)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 54, in test_prime_modulus\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 4 != 59\n\n======================================================================\nFAIL: test_prime_modulus (__main__.TestModp.test_prime_modulus) (n=200, p=199)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 54, in test_prime_modulus\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 4 != 2\n\n----------------------------------------------------------------------\nRan 7 tests in 0.190s\n\nFAILED (failures=10, errors=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_small_numbers(self):\n        \"\"\"Test modp function with small numbers.\"\"\"\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1)\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_moderate_numbers(self):\n        \"\"\"Test modp function with moderate-sized numbers.\"\"\"\n        test_cases = [\n            (1000, 997, 1),\n            (10000, 10007, 2894),\n            (5000, 4999, 4998),\n            (2000, 2003, 1998)\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_prime_modulus(self):\n        \"\"\"Test modp function with prime modulus.\"\"\"\n        test_cases = [\n            (50, 97, 59),\n            (200, 199, 2)\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_large_exponent_small_modulus(self):\n        \"\"\"Test modp function with large exponents and small modulus.\"\"\"\n        test_cases = [\n            (999999, 5, 4),\n            (1000001, 3, 1)\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_very_large_exponents(self):\n        \"\"\"Test modp function with very large exponents.\"\"\"\n        test_cases = [\n            (10**9, 1000000007, 106978),\n            (2**30, 1000000009, 702464239)\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        \"\"\"Test modp function with edge cases.\"\"\"\n        test_cases = [\n            (1000000, 2, 0),  # p = 2 (smallest prime)\n            (1234, 2**31 - 1, 641459953)  # Large prime p\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_error_cases(self):\n        \"\"\"Test modp function with error cases.\"\"\"\n        with self.subTest(case='zero p'):\n            with self.assertRaises(ZeroDivisionError):\n                modp(5, 0)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "The process took too long to complete and was terminated, please use small number for input or check the test script.",
            "coverage": 0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_small_numbers(self):\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n            (7, 13, 11),\n            (10, 17, 4),\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 5, 1),\n            (1, 2, 0),\n            (0, 2, 1),\n            (1, 3, 2),\n        ]\n        \n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_moderate_numbers(self):\n        moderate_cases = [\n            (1000, 997, 1),\n            (10000, 10007, 2894),\n            (5000, 4999, 4998),\n            (2000, 2003, 1998),\n        ]\n        \n        for n, p, expected in moderate_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_prime_modulus(self):\n        prime_cases = [\n            (50, 97, 59),\n            (100, 101, 1),\n            (200, 199, 2),\n        ]\n        \n        for n, p, expected in prime_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_power_of_two_modulus(self):\n        power_of_two_cases = [\n            (10, 16, 0),\n            (15, 32, 0),\n            (20, 64, 0),\n        ]\n        \n        for n, p, expected in power_of_two_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_large_exponent_small_modulus(self):\n        large_exp_cases = [\n            (1000000, 7, 2),\n            (999999, 5, 4),\n            (1000001, 3, 1),\n        ]\n        \n        for n, p, expected in large_exp_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_error_cases(self):\n        with self.subTest(case=\"negative n\"):\n            with self.assertRaises(ValueError):\n                modp(-1, 5)\n        \n        with self.subTest(case=\"negative p\"):\n            with self.assertRaises(ValueError):\n                modp(5, -1)\n        \n        with self.subTest(case=\"zero p\"):\n            with self.assertRaises(ValueError):\n                modp(5, 0)\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 0.0,
    "not_error_best_score": 0.0,
    "exist_not_error": true,
    "filtered_score": 0.0,
    "use_filter": false
}