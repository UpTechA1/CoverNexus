{
    "task_id": "HumanEval/93",
    "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
    "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "encode",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            ('test', 'TGST'),\n            ('This is a message', 'tHKS KS C MGSSCGG'),\n            ('aeiou', 'CGKQW'),\n            ('AEIOU', 'cgkqw'),\n            ('bcdfghjklmnpqrstvwxyz', 'BCDFGHJKLMNPQRSTVWXYZ'),\n            ('BCDFGHJKLMNPQRSTVWXYZ', 'bcdfghjklmnpqrstvwxyz'),\n            ('', ''),\n            ('a', 'C'),\n            ('Z', 'z'),\n            ('AaEeIiOoUu', 'ccGGkkQQww'),\n            ('ThIs Is A cOmPlEx MeSsAgE', 'tHkS kS c CqMpLgX mGsScGg'),\n        ]\n        \n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "F\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='AaEeIiOoUu')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'cCgGkKqQwW' != 'ccGGkkQQww'\n- cCgGkKqQwW\n+ ccGGkkQQww\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            ('test', 'TGST'),\n            ('This is a message', 'tHKS KS C MGSSCGG'),\n            ('AaEeIiOoUu', 'cCgGkKqQwW'),\n            ('', ''),\n            ('XYZ', 'xyz'),\n            ('aeiou', 'CGKQW'),\n            ('AEIOU', 'cgkqw'),\n            ('abcdefghijklmnopqrstuvwxyz', 'CBEDGFHIJKLMNQPRSTWVWXYZ'),\n            ('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cbedgfhijklmnqprstwvwxyz'),\n            ('The quick brown fox jumps over the lazy dog', 'tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG'),\n        ]\n        \n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFF\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='abcdefghijklmnopqrstuvwxyz')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'CBCDGFGHKJKLMNQPQRSTWVWXYZ' != 'CBEDGFHIJKLMNQPRSTWVWXYZ'\n- CBCDGFGHKJKLMNQPQRSTWVWXYZ\n?   ^   - ^       -\n+ CBEDGFHIJKLMNQPRSTWVWXYZ\n?   ^    ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'cbcdgfghkjklmnqpqrstwvwxyz' != 'cbedgfhijklmnqprstwvwxyz'\n- cbcdgfghkjklmnqpqrstwvwxyz\n?   ^   - ^       -\n+ cbedgfhijklmnqprstwvwxyz\n?   ^    ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='The quick brown fox jumps over the lazy dog')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 22, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG' != 'tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG'\n- tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG\n?        ^\n+ tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG\n?        ^\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      5     0%   2-19\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      5     0%\n",
            "coverage": 0.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            ('', ''),\n            ('a', 'C'),\n            ('z', 'Z'),\n            ('aeiou', 'CGKQW'),\n            ('AEIOU', 'cgkqw'),\n            ('bcdfghjklmnpqrstvwxyz', 'BCDFGHJKLMNPQRSTVWXYZ'),\n            ('BCDFGHJKLMNPQRSTVWXYZ', 'bcdfghjklmnpqrstvwxyz'),\n            ('abcdefghijklmnopqrstuvwxyz', 'CBEDGFHKJKLMNQPQRSTWVWXYZ'),\n            ('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cbedgfhkjklmnqpqrstwvwxyz'),\n            ('The quick brown fox jumps over the lazy dog', 'tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG'),\n            ('TEST', 'tgst'),\n            ('This is a message', 'tHKS KS C MGSSCGG'),\n            ('AaEeIiOoUu', 'ccGgKkQqWw'),\n            ('MixEd CaSe', 'mKXgD eCsG'),\n            ('123!@#', '123!@#'),\n        ]\n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FFFFF\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='abcdefghijklmnopqrstuvwxyz')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'CBCDGFGHKJKLMNQPQRSTWVWXYZ' != 'CBEDGFHKJKLMNQPQRSTWVWXYZ'\n- CBCDGFGHKJKLMNQPQRSTWVWXYZ\n?   ^   -\n+ CBEDGFHKJKLMNQPQRSTWVWXYZ\n?   ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'cbcdgfghkjklmnqpqrstwvwxyz' != 'cbedgfhkjklmnqpqrstwvwxyz'\n- cbcdgfghkjklmnqpqrstwvwxyz\n?   ^   -\n+ cbedgfhkjklmnqpqrstwvwxyz\n?   ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='The quick brown fox jumps over the lazy dog')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG' != 'tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG'\n- tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG\n?        ^\n+ tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG\n?        ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='AaEeIiOoUu')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'cCgGkKqQwW' != 'ccGgKkQqWw'\n- cCgGkKqQwW\n+ ccGgKkQqWw\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='MixEd CaSe')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 27, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'mKXgD cCsG' != 'mKXgD eCsG'\n- mKXgD cCsG\n?       ^\n+ mKXgD eCsG\n?       ^\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.002s\n\nFAILED (failures=5)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            # Test lowercase input\n            ('abcdefghijklmnopqrstuvwxyz', 'CBEDGFGHKJKLMNQPQRSTWVWXYZ'),\n            # Test uppercase input\n            ('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cbedgfghkjklmnqpqrstwvwxyz'),\n            # Test mixed case input\n            ('The quick brown fox jumps over the lazy dog', 'tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG'),\n            # Test all vowels\n            ('AaEeIiOoUu', 'ccGgKkQqWw'),\n            # Test mixed case with spaces\n            ('MixEd CaSe', 'mKXgD eCsG'),\n            # Test single characters\n            ('a', 'C'),\n            ('Z', 'z'),\n            # Test empty string\n            ('', ''),\n            # Test string with no vowels\n            ('rhythm', 'RHYTHM'),\n            # Test string with all vowels\n            ('aeiou', 'CGKQW'),\n        ]\n\n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FFFFF\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='abcdefghijklmnopqrstuvwxyz')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 32, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'CBCDGFGHKJKLMNQPQRSTWVWXYZ' != 'CBEDGFGHKJKLMNQPQRSTWVWXYZ'\n- CBCDGFGHKJKLMNQPQRSTWVWXYZ\n?   ^\n+ CBEDGFGHKJKLMNQPQRSTWVWXYZ\n?   ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 32, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'cbcdgfghkjklmnqpqrstwvwxyz' != 'cbedgfghkjklmnqpqrstwvwxyz'\n- cbcdgfghkjklmnqpqrstwvwxyz\n?   ^\n+ cbedgfghkjklmnqpqrstwvwxyz\n?   ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='The quick brown fox jumps over the lazy dog')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 32, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG' != 'tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG'\n- tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG\n?        ^\n+ tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG\n?        ^\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='AaEeIiOoUu')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 32, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'cCgGkKqQwW' != 'ccGgKkQqWw'\n- cCgGkKqQwW\n+ ccGgKkQqWw\n\n\n======================================================================\nFAIL: test_encode (__main__.TestEncode.test_encode) (input_str='MixEd CaSe')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 32, in test_encode\n    self.assertEqual(encode(input_str), expected)\nAssertionError: 'mKXgD cCsG' != 'mKXgD eCsG'\n- mKXgD cCsG\n?       ^\n+ mKXgD eCsG\n?       ^\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=5)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            ('abcdefghijklmnopqrstuvwxyz', 'CBCDGFGHKJKLMNQPQRSTWVWXYZ'),\n            ('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cbcdgfghkjklmnqpqrstwvwxyz'),\n            ('The quick brown fox jumps over the lazy dog', 'tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG'),\n            ('AaEeIiOoUu', 'cCgGkKqQwW'),\n            ('MixEd CaSe', 'mKXgD cCsG'),\n            ('a', 'C'),\n            ('Z', 'z'),\n            ('', ''),\n            ('rhythm', 'RHYTHM'),\n            ('aeiou', 'CGKQW'),\n        ]\n        \n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      5     0%   2-19\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      5     0%\n",
            "coverage": 0.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            # Test lowercase input\n            ('abcdefghijklmnopqrstuvwxyz', 'CBEDGFGHKJKLMNQPQRSTWVWXYZ'),\n            # Test uppercase input\n            ('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cbedgfghkjklmnqpqrstwvwxyz'),\n            # Test mixed case input\n            ('The quick brown fox jumps over the lazy dog', 'tHG QWKEK BRQWN FQX JWMPS QVGR THG LCZY DQG'),\n            # Test all vowels\n            ('AaEeIiOoUu', 'ccGgKkQqWw'),\n            # Test mixed case with spaces\n            ('MixEd CaSe', 'mKXgD eCsG'),\n            # Test single characters\n            ('a', 'C'),\n            ('Z', 'z'),\n            # Test empty string\n            ('', ''),\n            # Test string with no vowels\n            ('rhythm', 'RHYTHM'),\n            # Test string with all vowels\n            ('aeiou', 'CGKQW'),\n        ]\n\n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            ('test', 'TGST'),\n            ('This is a message', 'tHKS KS C MGSSCGG'),\n            ('aeiou', 'CGKQW'),\n            ('AEIOU', 'cgkqw'),\n            ('bcdfghjklmnpqrstvwxyz', 'BCDFGHJKLMNPQRSTVWXYZ'),\n            ('BCDFGHJKLMNPQRSTVWXYZ', 'bcdfghjklmnpqrstvwxyz'),\n            ('', ''),\n            ('a', 'C'),\n            ('Z', 'z'),\n            ('AaEeIiOoUu', 'ccGGkkQQww'),\n            ('ThIs Is A cOmPlEx MeSsAgE', 'tHkS kS c CqMpLgX mGsScGg'),\n        ]\n        \n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            ('abcdefghijklmnopqrstuvwxyz', 'CBCDGFGHKJKLMNQPQRSTWVWXYZ'),\n            ('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cbcdgfghkjklmnqpqrstwvwxyz'),\n            ('The quick brown fox jumps over the lazy dog', 'tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG'),\n            ('AaEeIiOoUu', 'cCgGkKqQwW'),\n            ('MixEd CaSe', 'mKXgD cCsG'),\n            ('a', 'C'),\n            ('Z', 'z'),\n            ('', ''),\n            ('rhythm', 'RHYTHM'),\n            ('aeiou', 'CGKQW'),\n        ]\n        \n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import encode\n\nclass TestEncode(unittest.TestCase):\n    def test_encode(self):\n        test_cases = [\n            ('abcdefghijklmnopqrstuvwxyz', 'CBCDGFGHKJKLMNQPQRSTWVWXYZ'),\n            ('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cbcdgfghkjklmnqpqrstwvwxyz'),\n            ('The quick brown fox jumps over the lazy dog', 'tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG'),\n            ('AaEeIiOoUu', 'cCgGkKqQwW'),\n            ('MixEd CaSe', 'mKXgD cCsG'),\n            ('a', 'C'),\n            ('Z', 'z'),\n            ('', ''),\n            ('rhythm', 'RHYTHM'),\n            ('aeiou', 'CGKQW'),\n        ]\n        \n        for input_str, expected in test_cases:\n            with self.subTest(input_str=input_str):\n                self.assertEqual(encode(input_str), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0.0,
    "exist_not_error": true,
    "filtered_score": 0.0,
    "use_filter": false
}