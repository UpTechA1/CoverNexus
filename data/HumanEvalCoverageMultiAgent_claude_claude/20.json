{
    "task_id": "HumanEval/20",
    "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
    "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
    "entry_point": "find_closest_elements",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import find_closest_elements\n\nclass TestFindClosestElements(unittest.TestCase):\n    def test_find_closest_elements(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], (2.0, 2.2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], (2.0, 2.0)),\n            ([1.0, 5.0], (1.0, 5.0)),\n            ([1.0, 1.1, 1.2, 1.3], (1.0, 1.1)),\n            ([-1.0, 0.0, 1.0], (-1.0, 0.0)),\n            ([0.1, 0.2, 0.3, 0.4, 0.5], (0.1, 0.2)),\n            ([10.0, 20.0, 30.0, 40.0, 50.0], (10.0, 20.0)),\n            ([1.5, 2.5, 3.5, 4.5, 5.5], (1.5, 2.5)),\n            ([0.0, 0.0, 1.0, 1.0], (0.0, 0.0)),\n            ([-5.0, -4.0, -3.0, -2.0, -1.0], (-2.0, -1.0))\n        ]\n        \n        for numbers, expected in test_cases:\n            with self.subTest(numbers=numbers):\n                result = find_closest_elements(numbers)\n                self.assertEqual(result, expected)\n\n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            find_closest_elements([1.0])\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFFF\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[1.0, 1.1, 1.2, 1.3])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (1.1, 1.2) != (1.0, 1.1)\n\nFirst differing element 0:\n1.1\n1.0\n\n- (1.1, 1.2)\n?    ^    ^\n\n+ (1.0, 1.1)\n?    ^    ^\n\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[0.1, 0.2, 0.3, 0.4, 0.5])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (0.2, 0.3) != (0.1, 0.2)\n\nFirst differing element 0:\n0.2\n0.1\n\n- (0.2, 0.3)\n?    ^    ^\n\n+ (0.1, 0.2)\n?    ^    ^\n\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[-5.0, -4.0, -3.0, -2.0, -1.0])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (-5.0, -4.0) != (-2.0, -1.0)\n\nFirst differing element 0:\n-5.0\n-2.0\n\n- (-5.0, -4.0)\n?   ^     ^\n\n+ (-2.0, -1.0)\n?   ^     ^\n\n\n======================================================================\nFAIL: test_invalid_input (__main__.TestFindClosestElements.test_invalid_input)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 26, in test_invalid_input\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=4)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      15      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              15      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import find_closest_elements\n\nclass TestFindClosestElements(unittest.TestCase):\n    def test_find_closest_elements(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], (2.0, 2.2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], (2.0, 2.0)),\n            ([1.0, 1.1, 1.2, 1.3], (1.1, 1.2)),\n            ([0.1, 0.2, 0.3, 0.4, 0.5], (0.2, 0.3)),\n            ([-5.0, -4.0, -3.0, -2.0, -1.0], (-5.0, -4.0)),\n            ([-1.0, 1.0, 2.0, -2.0], (-1.0, 1.0)),\n            ([1e6, 1e6 + 1, 1e6 + 2], (1e6, 1e6 + 1)),\n            ([1e-6, 2e-6, 3e-6], (1e-6, 2e-6)),\n            ([1.0, 1.0, 2.0, 3.0], (1.0, 1.0)),\n        ]\n        \n        for numbers, expected in test_cases:\n            with self.subTest(numbers=numbers):\n                result = find_closest_elements(numbers)\n                self.assertEqual(result, expected)\n\n    def test_single_element_list(self):\n        with self.subTest(numbers=[1.0]):\n            result = find_closest_elements([1.0])\n            self.assertIsNone(result)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "F.\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[-1.0, 1.0, 2.0, -2.0])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (-2.0, -1.0) != (-1.0, 1.0)\n\nFirst differing element 0:\n-2.0\n-1.0\n\n- (-2.0, -1.0)\n+ (-1.0, 1.0)\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      15      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              15      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import find_closest_elements\n\nclass TestFindClosestElements(unittest.TestCase):\n    def test_find_closest_elements(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], (2.0, 2.2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], (2.0, 2.0)),\n            ([-1.0, 1.0, 2.0, -2.0], (-2.0, -1.0)),\n            ([0.1, 0.2, 0.3, 0.4], (0.1, 0.2)),\n            ([-1e6, 1e6, 1], (-1, 1)),\n            ([1.0, 1.0, 1.0], (1.0, 1.0)),\n            ([1.0, 2.0], (1.0, 2.0)),\n            ([1.0, 1.0], (1.0, 1.0)),\n        ]\n        \n        for numbers, expected in test_cases:\n            with self.subTest(numbers=numbers):\n                result = find_closest_elements(numbers)\n                self.assertEqual(result, expected)\n\n    def test_invalid_inputs(self):\n        with self.assertRaises(ValueError):\n            find_closest_elements([])\n        with self.assertRaises(ValueError):\n            find_closest_elements([1.0])\n        with self.assertRaises(TypeError):\n            find_closest_elements(['a', 'b', 'c'])\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFF\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[0.1, 0.2, 0.3, 0.4])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (0.2, 0.3) != (0.1, 0.2)\n\nFirst differing element 0:\n0.2\n0.1\n\n- (0.2, 0.3)\n?    ^    ^\n\n+ (0.1, 0.2)\n?    ^    ^\n\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[-1000000.0, 1000000.0, 1])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (1, 1000000.0) != (-1, 1)\n\nFirst differing element 0:\n1\n-1\n\n- (1, 1000000.0)\n+ (-1, 1)\n\n======================================================================\nFAIL: test_invalid_inputs (__main__.TestFindClosestElements.test_invalid_inputs)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_invalid_inputs\n    with self.assertRaises(ValueError):\nAssertionError: ValueError not raised\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      15      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              15      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import find_closest_elements\n\nclass TestFindClosestElements(unittest.TestCase):\n    def test_find_closest_elements(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], (2.0, 2.2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], (2.0, 2.0)),\n            ([-1.0, 1.0, 2.0, -2.0], (-2.0, -1.0)),\n            ([0.1, 0.2, 0.3, 0.4], (0.2, 0.3)),\n            ([-1e6, 1e6, 1], (1, 1e6)),\n            ([1.0, 1.0, 1.0], (1.0, 1.0)),\n            ([1.0, 2.0], (1.0, 2.0)),\n            ([1.0, 1.0], (1.0, 1.0)),\n            ([-0.1, 0.1, 0.2, -0.2], (-0.1, 0.1)),\n            ([1e10, 1e11, 1e12], (1e10, 1e11)),\n            ([1e-10, 1e-11, 1e-12], (1e-12, 1e-11)),\n            ([0.0, 0.0001, -0.0001], (-0.0001, 0.0001)),\n            ([1, 1.5, 2, 2.5, 3], (1.5, 2)),\n        ]\n        \n        for numbers, expected in test_cases:\n            with self.subTest(numbers=numbers):\n                result = find_closest_elements(numbers)\n                self.assertEqual(result, expected)\n\n    def test_invalid_inputs(self):\n        with self.subTest(case=\"non-numeric input\"):\n            with self.assertRaises(TypeError):\n                find_closest_elements(['a', 'b', 'c'])\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFF.\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[-0.1, 0.1, 0.2, -0.2])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 26, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (-0.2, -0.1) != (-0.1, 0.1)\n\nFirst differing element 0:\n-0.2\n-0.1\n\n- (-0.2, -0.1)\n?     ^  -\n\n+ (-0.1, 0.1)\n?     ^\n\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[0.0, 0.0001, -0.0001])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 26, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (0.0, 0.0001) != (-0.0001, 0.0001)\n\nFirst differing element 0:\n0.0\n-0.0001\n\n- (0.0, 0.0001)\n+ (-0.0001, 0.0001)\n?  +   +++\n\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[1, 1.5, 2, 2.5, 3])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 26, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (1, 1.5) != (1.5, 2)\n\nFirst differing element 0:\n1\n1.5\n\n- (1, 1.5)\n+ (1.5, 2)\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      15      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              15      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import find_closest_elements\n\nclass TestFindClosestElements(unittest.TestCase):\n    def test_find_closest_elements(self):\n        test_cases = [\n            ([-0.1, 0.1, 0.2, -0.2], (-0.2, -0.1)),\n            ([0.0, 0.0001, -0.0001], (-0.0001, 0.0)),\n            ([1, 1.5, 2, 2.5, 3], (1.5, 2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], (2.0, 2.2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], (2.0, 2.0)),\n            ([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5], (-0.5, 0.0)),\n            ([0.1, 0.2, 0.3, 0.4, 0.5], (0.1, 0.2)),\n            ([10, 20, 30, 40, 50, 21], (20, 21)),\n            ([1e-5, 2e-5, 3e-5, 4e-5], (1e-5, 2e-5)),\n            ([-100, -50, 0, 50, 100], (-50, 0)),\n        ]\n\n        for numbers, expected in test_cases:\n            with self.subTest(numbers=numbers):\n                result = find_closest_elements(numbers)\n                self.assertEqual(result, expected)\n\n    def test_invalid_input(self):\n        with self.assertRaises(TypeError):\n            find_closest_elements(['a', 'b', 'c'])\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FFFFFF.\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[0.0, 0.0001, -0.0001])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (0.0, 0.0001) != (-0.0001, 0.0)\n\nFirst differing element 0:\n0.0\n-0.0001\n\n- (0.0, 0.0001)\n+ (-0.0001, 0.0)\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[1, 1.5, 2, 2.5, 3])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (1, 1.5) != (1.5, 2)\n\nFirst differing element 0:\n1\n1.5\n\n- (1, 1.5)\n+ (1.5, 2)\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (-1.5, -1.0) != (-0.5, 0.0)\n\nFirst differing element 0:\n-1.5\n-0.5\n\n- (-1.5, -1.0)\n?   ^    ^^\n\n+ (-0.5, 0.0)\n?   ^    ^\n\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[0.1, 0.2, 0.3, 0.4, 0.5])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (0.2, 0.3) != (0.1, 0.2)\n\nFirst differing element 0:\n0.2\n0.1\n\n- (0.2, 0.3)\n?    ^    ^\n\n+ (0.1, 0.2)\n?    ^    ^\n\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[1e-05, 2e-05, 3e-05, 4e-05])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (2e-05, 3e-05) != (1e-05, 2e-05)\n\nFirst differing element 0:\n2e-05\n1e-05\n\n- (2e-05, 3e-05)\n+ (1e-05, 2e-05)\n\n======================================================================\nFAIL: test_find_closest_elements (__main__.TestFindClosestElements.test_find_closest_elements) (numbers=[-100, -50, 0, 50, 100])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 24, in test_find_closest_elements\n    self.assertEqual(result, expected)\nAssertionError: Tuples differ: (-100, -50) != (-50, 0)\n\nFirst differing element 0:\n-100\n-50\n\n- (-100, -50)\n+ (-50, 0)\n\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\n\nFAILED (failures=6)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py      15      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              15      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import find_closest_elements\n\nclass TestFindClosestElements(unittest.TestCase):\n    def test_find_closest_elements(self):\n        test_cases = [\n            ([-0.1, 0.1, 0.2, -0.2], (-0.2, -0.1)),\n            ([0.0, 0.0001, -0.0001], (-0.0001, 0.0)),\n            ([1, 1.5, 2, 2.5, 3], (1.5, 2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], (2.0, 2.2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], (2.0, 2.0)),\n            ([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5], (-0.5, 0.0)),\n            ([0.1, 0.2, 0.3, 0.4, 0.5], (0.1, 0.2)),\n            ([10, 20, 30, 40, 50, 21], (20, 21)),\n            ([1e-5, 2e-5, 3e-5, 4e-5], (1e-5, 2e-5)),\n            ([-100, -50, 0, 50, 100], (-50, 0)),\n        ]\n\n        for numbers, expected in test_cases:\n            with self.subTest(numbers=numbers):\n                result = find_closest_elements(numbers)\n                self.assertEqual(result, expected)\n\n    def test_invalid_input(self):\n        with self.assertRaises(TypeError):\n            find_closest_elements(['a', 'b', 'c'])\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import find_closest_elements\n\nclass TestFindClosestElements(unittest.TestCase):\n    def test_find_closest_elements(self):\n        test_cases = [\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], (2.0, 2.2)),\n            ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], (2.0, 2.0)),\n            ([1.0, 5.0], (1.0, 5.0)),\n            ([1.0, 1.1, 1.2, 1.3], (1.0, 1.1)),\n            ([-1.0, 0.0, 1.0], (-1.0, 0.0)),\n            ([0.1, 0.2, 0.3, 0.4, 0.5], (0.1, 0.2)),\n            ([10.0, 20.0, 30.0, 40.0, 50.0], (10.0, 20.0)),\n            ([1.5, 2.5, 3.5, 4.5, 5.5], (1.5, 2.5)),\n            ([0.0, 0.0, 1.0, 1.0], (0.0, 0.0)),\n            ([-5.0, -4.0, -3.0, -2.0, -1.0], (-2.0, -1.0))\n        ]\n        \n        for numbers, expected in test_cases:\n            with self.subTest(numbers=numbers):\n                result = find_closest_elements(numbers)\n                self.assertEqual(result, expected)\n\n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            find_closest_elements([1.0])\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 0,
    "use_filter": false
}