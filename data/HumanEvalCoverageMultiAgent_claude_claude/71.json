{
    "task_id": "HumanEval/71",
    "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
    "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
    "entry_point": "triangle_area",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import triangle_area\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_valid_triangle(self):\n        self.assertEqual(triangle_area(3, 4, 5), 6.00)\n        self.assertEqual(triangle_area(5, 12, 13), 30.00)\n        self.assertEqual(triangle_area(8, 15, 17), 60.00)\n\n    def test_invalid_triangle(self):\n        self.assertEqual(triangle_area(1, 2, 10), -1)\n        self.assertEqual(triangle_area(1, 1, 2), -1)\n        self.assertEqual(triangle_area(0, 1, 1), -1)\n\n    def test_equilateral_triangle(self):\n        self.assertEqual(triangle_area(5, 5, 5), 10.83)\n\n    def test_isosceles_triangle(self):\n        self.assertEqual(triangle_area(5, 5, 8), 12.00)\n\n    def test_float_inputs(self):\n        self.assertEqual(triangle_area(3.5, 4.5, 5.5), 7.65)\n\n    def test_zero_area(self):\n        self.assertEqual(triangle_area(1, 1, 2), -1)\n\n    def test_rounding(self):\n        self.assertEqual(triangle_area(2, 3, 4), 2.90)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".F.....\n======================================================================\nFAIL: test_float_inputs (__main__.TestTriangleArea.test_float_inputs)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 23, in test_float_inputs\n    self.assertEqual(triangle_area(3.5, 4.5, 5.5), 7.65)\nAssertionError: 7.85 != 7.65\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       7      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               7      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import triangle_area\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_valid_triangle(self):\n        test_cases = [\n            (3, 4, 5, 6.00),\n            (5, 12, 13, 30.00),\n            (8, 15, 17, 60.00),\n            (7, 24, 25, 84.00),\n            (20, 21, 29, 210.00)\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(triangle_area(a, b, c), expected)\n\n    def test_invalid_triangle(self):\n        self.assertEqual(triangle_area(1, 2, 10), -1)\n        self.assertEqual(triangle_area(10, 2, 1), -1)\n        self.assertEqual(triangle_area(1, 10, 2), -1)\n\n    def test_float_inputs(self):\n        self.assertEqual(triangle_area(3.5, 4.5, 5.5), 7.85)\n\n    def test_edge_cases(self):\n        test_cases = [\n            (0.1, 0.1, 0.1, 0.00),\n            (1e-5, 1e-5, 1.4e-5, 0.00),\n            (1e5, 1e5, 1.4e5, 4330127018.92),\n            (1, 1, 1.9999, 0.50)\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_almost_invalid_triangle(self):\n        self.assertAlmostEqual(triangle_area(1, 1, 1.9999), 0.50, places=2)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFF...\n======================================================================\nFAIL: test_almost_invalid_triangle (__main__.TestTriangleArea.test_almost_invalid_triangle)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 38, in test_almost_invalid_triangle\n    self.assertAlmostEqual(triangle_area(1, 1, 1.9999), 0.50, places=2)\nAssertionError: 0.01 != 0.5 within 2 places (0.49 difference)\n\n======================================================================\nFAIL: test_edge_cases (__main__.TestTriangleArea.test_edge_cases) (a=100000.0, b=100000.0, c=140000.0)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_edge_cases\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 4998999899.98 != 4330127018.92 within 2 places (668872881.0599995 difference)\n\n======================================================================\nFAIL: test_edge_cases (__main__.TestTriangleArea.test_edge_cases) (a=1, b=1, c=1.9999)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 35, in test_edge_cases\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 0.01 != 0.5 within 2 places (0.49 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       7      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               7      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import triangle_area\nimport math\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_valid_triangles(self):\n        test_cases = [\n            (3, 4, 5, 6.00),\n            (5, 12, 13, 30.00),\n            (8, 15, 17, 60.00),\n            (7, 24, 25, 84.00)\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_invalid_triangles(self):\n        test_cases = [\n            (1, 2, 10),\n            (1, 1, 3),\n            (3, 4, 8),\n            (0, 1, 2),\n            (-1, 2, 3),\n            (1, -2, 3),\n            (1, 2, -3)\n        ]\n        for a, b, c in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(triangle_area(a, b, c), -1)\n\n    def test_edge_cases(self):\n        test_cases = [\n            (1, 1, 1.9999, -1),\n            (0.1, 0.1, 0.1, 0.00),\n            (1e-5, 1e-5, 1e-5, 0.00),\n            (1e5, 1e5, 1.4e5, 4330127018.92)\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                if expected == -1:\n                    self.assertEqual(triangle_area(a, b, c), expected)\n                else:\n                    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_equilateral_triangles(self):\n        test_cases = [(1, 1, 1), (2, 2, 2), (10, 10, 10)]\n        for a, b, c in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                expected = (math.sqrt(3) / 4) * a * a\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_isosceles_triangles(self):\n        test_cases = [(2, 2, 3), (5, 5, 6), (10, 10, 12)]\n        for a, b, c in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                s = (a + b + c) / 2\n                expected = math.sqrt(s * (s - a) * (s - b) * (s - c))\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FF....\n======================================================================\nFAIL: test_edge_cases (__main__.TestTriangleArea.test_edge_cases) (a=1, b=1, c=1.9999)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 42, in test_edge_cases\n    self.assertEqual(triangle_area(a, b, c), expected)\nAssertionError: 0.01 != -1\n\n======================================================================\nFAIL: test_edge_cases (__main__.TestTriangleArea.test_edge_cases) (a=100000.0, b=100000.0, c=140000.0)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 44, in test_edge_cases\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 4998999899.98 != 4330127018.92 within 2 places (668872881.0599995 difference)\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=2)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       7      7     0%   2-18\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               7      7     0%\n",
            "coverage": 0.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import triangle_area\nimport sys\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_valid_triangles(self):\n        test_cases = [\n            (3, 4, 5, 6.00),\n            (5, 12, 13, 30.00),\n            (8, 15, 17, 60.00),\n            (1, 1, 1, 0.43),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_invalid_triangles(self):\n        test_cases = [\n            (1, 2, 10),\n            (3, 3, 6),\n            (0, 1, 2),\n            (-1, 2, 3),\n        ]\n        for a, b, c in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(triangle_area(a, b, c), -1)\n\n    def test_edge_cases(self):\n        test_cases = [\n            (1, 1, 1.9999, 0.01),\n            (100000.0, 100000.0, 140000.0, 4330127018.92),\n            (1e-10, 1e-10, 1.4e-10, 4.33e-21),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_floating_point(self):\n        test_cases = [\n            (3.14, 4.15, 5.16, 6.48),\n            (2.5, 3.5, 4.5, 4.37),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_non_numeric_input(self):\n        with self.assertRaises(TypeError):\n            triangle_area(\"a\", \"b\", \"c\")\n        with self.assertRaises(TypeError):\n            triangle_area(None, 2, 3)\n\n    def test_triangle_inequality_limit(self):\n        self.assertAlmostEqual(triangle_area(3, 4, 7), 0.00, places=2)\n        self.assertEqual(triangle_area(3, 4, 7.0001), -1)\n\n    def test_max_triangle(self):\n        max_float = sys.float_info.max\n        self.assertIsInstance(triangle_area(max_float/3, max_float/3, max_float/3), float)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFF..FF.\n======================================================================\nFAIL: test_edge_cases (__main__.TestTriangleArea.test_edge_cases) (a=100000.0, b=100000.0, c=140000.0)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 37, in test_edge_cases\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 4998999899.98 != 4330127018.92 within 2 places (668872881.0599995 difference)\n\n======================================================================\nFAIL: test_floating_point (__main__.TestTriangleArea.test_floating_point) (a=3.14, b=4.15, c=5.16)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 46, in test_floating_point\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 6.51 != 6.48 within 2 places (0.02999999999999936 difference)\n\n======================================================================\nFAIL: test_floating_point (__main__.TestTriangleArea.test_floating_point) (a=2.5, b=3.5, c=4.5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 46, in test_floating_point\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 4.35 != 4.37 within 2 places (0.020000000000000462 difference)\n\n======================================================================\nFAIL: test_non_numeric_input (__main__.TestTriangleArea.test_non_numeric_input)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 49, in test_non_numeric_input\n    with self.assertRaises(TypeError):\nAssertionError: TypeError not raised\n\n======================================================================\nFAIL: test_triangle_inequality_limit (__main__.TestTriangleArea.test_triangle_inequality_limit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 55, in test_triangle_inequality_limit\n    self.assertAlmostEqual(triangle_area(3, 4, 7), 0.00, places=2)\nAssertionError: -1 != 0.0 within 2 places (1.0 difference)\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (failures=5)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       7      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               7      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import triangle_area\nimport math\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_valid_triangles(self):\n        test_cases = [\n            (3, 4, 5, 6.00),\n            (5, 12, 13, 30.00),\n            (8, 15, 17, 60.00),\n            (7, 24, 25, 84.00),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_invalid_triangles(self):\n        test_cases = [\n            (1, 2, 10),\n            (1, 1, 3),\n            (0, 1, 2),\n            (-1, 2, 3),\n        ]\n        for a, b, c in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(triangle_area(a, b, c), -1)\n\n    def test_edge_cases(self):\n        test_cases = [\n            (100000, 100000, 140000, 4330127018.92),\n            (0.1, 0.1, 0.1, 0.00),\n            (1e-5, 1e-5, 1e-5, 0.00),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_floating_point(self):\n        test_cases = [\n            (3.14, 4.15, 5.16, 6.48),\n            (2.5, 3.5, 4.5, 4.37),\n            (1.23, 4.56, 5.67, 2.79),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_non_numeric_input(self):\n        with self.assertRaises(TypeError):\n            triangle_area(\"3\", 4, 5)\n        with self.assertRaises(TypeError):\n            triangle_area(3, \"4\", 5)\n        with self.assertRaises(TypeError):\n            triangle_area(3, 4, \"5\")\n\n    def test_triangle_inequality_limit(self):\n        self.assertEqual(triangle_area(3, 4, 7), -1)\n        self.assertEqual(triangle_area(3, 7, 4), -1)\n        self.assertEqual(triangle_area(7, 3, 4), -1)\n\n    def test_special_triangles(self):\n        # Equilateral triangle\n        self.assertAlmostEqual(triangle_area(5, 5, 5), 10.83, places=2)\n        \n        # Isosceles triangle\n        self.assertAlmostEqual(triangle_area(5, 5, 6), 12.00, places=2)\n        \n        # Right-angled triangle\n        self.assertAlmostEqual(triangle_area(3, 4, 5), 6.00, places=2)\n\n    def test_small_triangles(self):\n        self.assertAlmostEqual(triangle_area(0.01, 0.01, 0.01), 0.00, places=2)\n        self.assertAlmostEqual(triangle_area(0.3, 0.4, 0.5), 0.06, places=2)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FFFF......\n======================================================================\nFAIL: test_edge_cases (__main__.TestTriangleArea.test_edge_cases) (a=100000, b=100000, c=140000)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 38, in test_edge_cases\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 4998999899.98 != 4330127018.92 within 2 places (668872881.0599995 difference)\n\n======================================================================\nFAIL: test_floating_point (__main__.TestTriangleArea.test_floating_point) (a=3.14, b=4.15, c=5.16)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 48, in test_floating_point\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 6.51 != 6.48 within 2 places (0.02999999999999936 difference)\n\n======================================================================\nFAIL: test_floating_point (__main__.TestTriangleArea.test_floating_point) (a=2.5, b=3.5, c=4.5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 48, in test_floating_point\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 4.35 != 4.37 within 2 places (0.020000000000000462 difference)\n\n======================================================================\nFAIL: test_floating_point (__main__.TestTriangleArea.test_floating_point) (a=1.23, b=4.56, c=5.67)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 48, in test_floating_point\n    self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\nAssertionError: 1.35 != 2.79 within 2 places (1.44 difference)\n\n----------------------------------------------------------------------\nRan 8 tests in 0.001s\n\nFAILED (failures=4)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       7      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               7      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import triangle_area\nimport math\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_valid_triangles(self):\n        test_cases = [\n            (3, 4, 5, 6.00),\n            (5, 12, 13, 30.00),\n            (8, 15, 17, 60.00),\n            (7, 24, 25, 84.00),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_invalid_triangles(self):\n        test_cases = [\n            (1, 2, 10),\n            (1, 1, 3),\n            (0, 1, 2),\n            (-1, 2, 3),\n        ]\n        for a, b, c in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertEqual(triangle_area(a, b, c), -1)\n\n    def test_edge_cases(self):\n        test_cases = [\n            (100000, 100000, 140000, 4330127018.92),\n            (0.1, 0.1, 0.1, 0.00),\n            (1e-5, 1e-5, 1e-5, 0.00),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_floating_point(self):\n        test_cases = [\n            (3.14, 4.15, 5.16, 6.48),\n            (2.5, 3.5, 4.5, 4.37),\n            (1.23, 4.56, 5.67, 2.79),\n        ]\n        for a, b, c, expected in test_cases:\n            with self.subTest(a=a, b=b, c=c):\n                self.assertAlmostEqual(triangle_area(a, b, c), expected, places=2)\n\n    def test_non_numeric_input(self):\n        with self.assertRaises(TypeError):\n            triangle_area(\"3\", 4, 5)\n        with self.assertRaises(TypeError):\n            triangle_area(3, \"4\", 5)\n        with self.assertRaises(TypeError):\n            triangle_area(3, 4, \"5\")\n\n    def test_triangle_inequality_limit(self):\n        self.assertEqual(triangle_area(3, 4, 7), -1)\n        self.assertEqual(triangle_area(3, 7, 4), -1)\n        self.assertEqual(triangle_area(7, 3, 4), -1)\n\n    def test_special_triangles(self):\n        # Equilateral triangle\n        self.assertAlmostEqual(triangle_area(5, 5, 5), 10.83, places=2)\n        \n        # Isosceles triangle\n        self.assertAlmostEqual(triangle_area(5, 5, 6), 12.00, places=2)\n        \n        # Right-angled triangle\n        self.assertAlmostEqual(triangle_area(3, 4, 5), 6.00, places=2)\n\n    def test_small_triangles(self):\n        self.assertAlmostEqual(triangle_area(0.01, 0.01, 0.01), 0.00, places=2)\n        self.assertAlmostEqual(triangle_area(0.3, 0.4, 0.5), 0.06, places=2)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import triangle_area\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_valid_triangle(self):\n        self.assertEqual(triangle_area(3, 4, 5), 6.00)\n        self.assertEqual(triangle_area(5, 12, 13), 30.00)\n        self.assertEqual(triangle_area(8, 15, 17), 60.00)\n\n    def test_invalid_triangle(self):\n        self.assertEqual(triangle_area(1, 2, 10), -1)\n        self.assertEqual(triangle_area(1, 1, 2), -1)\n        self.assertEqual(triangle_area(0, 1, 1), -1)\n\n    def test_equilateral_triangle(self):\n        self.assertEqual(triangle_area(5, 5, 5), 10.83)\n\n    def test_isosceles_triangle(self):\n        self.assertEqual(triangle_area(5, 5, 8), 12.00)\n\n    def test_float_inputs(self):\n        self.assertEqual(triangle_area(3.5, 4.5, 5.5), 7.65)\n\n    def test_zero_area(self):\n        self.assertEqual(triangle_area(1, 1, 2), -1)\n\n    def test_rounding(self):\n        self.assertEqual(triangle_area(2, 3, 4), 2.90)\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 0,
    "use_filter": false
}