{
    "task_id": "HumanEval/155",
    "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
    "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "even_odd_count",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestEvenOddCount(unittest.TestCase):\n    def test_positive_number(self):\n        self.assertEqual(even_odd_count(123), (1, 2))\n\n    def test_negative_number(self):\n        self.assertEqual(even_odd_count(-123), (1, 2))\n\n    def test_zero(self):\n        self.assertEqual(even_odd_count(0), (1, 0))\n\n    def test_positive_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(000123), (1, 2))\n\n    def test_negative_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(-000123), (1, 2))\n\n    def test_all_even_digits(self):\n        self.assertEqual(even_odd_count(2468), (4, 0))\n\n    def test_all_odd_digits(self):\n        self.assertEqual(even_odd_count(13579), (0, 5))\n\n    def test_mixed_digits(self):\n        self.assertEqual(even_odd_count(1234567890), (5, 0))\n\n    def test_single_digit(self):\n        self.assertEqual(even_odd_count(1), (0, 1))\n        self.assertEqual(even_odd_count(2), (1, 0))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py       8      8     0%   2-16\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 8      8     0%\n",
            "coverage": 0.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestEvenOddCount(unittest.TestCase):\n    def test_positive_number(self):\n        self.assertEqual(even_odd_count(123), (1, 2))\n\n    def test_negative_number(self):\n        self.assertEqual(even_odd_count(-123), (1, 2))\n\n    def test_zero(self):\n        self.assertEqual(even_odd_count(0), (1, 0))\n\n    def test_positive_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(000123), (1, 2))\n\n    def test_negative_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(-000123), (1, 2))\n\n    def test_all_even_digits(self):\n        self.assertEqual(even_odd_count(2468), (4, 0))\n\n    def test_all_odd_digits(self):\n        self.assertEqual(even_odd_count(13579), (0, 5))\n\n    def test_mixed_digits(self):\n        self.assertEqual(even_odd_count(1234567890), (5, 0))\n\n    def test_single_digit(self):\n        self.assertEqual(even_odd_count(1), (0, 1))\n        self.assertEqual(even_odd_count(2), (1, 0))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestEvenOddCount(unittest.TestCase):\n    def test_positive_number(self):\n        self.assertEqual(even_odd_count(123), (1, 2))\n\n    def test_negative_number(self):\n        self.assertEqual(even_odd_count(-123), (1, 2))\n\n    def test_zero(self):\n        self.assertEqual(even_odd_count(0), (1, 0))\n\n    def test_positive_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(000123), (1, 2))\n\n    def test_negative_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(-000123), (1, 2))\n\n    def test_all_even_digits(self):\n        self.assertEqual(even_odd_count(2468), (4, 0))\n\n    def test_all_odd_digits(self):\n        self.assertEqual(even_odd_count(13579), (0, 5))\n\n    def test_mixed_digits(self):\n        self.assertEqual(even_odd_count(1234567890), (5, 0))\n\n    def test_single_digit(self):\n        self.assertEqual(even_odd_count(1), (0, 1))\n        self.assertEqual(even_odd_count(2), (1, 0))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestEvenOddCount(unittest.TestCase):\n    def test_positive_number(self):\n        self.assertEqual(even_odd_count(123), (1, 2))\n\n    def test_negative_number(self):\n        self.assertEqual(even_odd_count(-123), (1, 2))\n\n    def test_zero(self):\n        self.assertEqual(even_odd_count(0), (1, 0))\n\n    def test_positive_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(000123), (1, 2))\n\n    def test_negative_number_with_leading_zeros(self):\n        self.assertEqual(even_odd_count(-000123), (1, 2))\n\n    def test_all_even_digits(self):\n        self.assertEqual(even_odd_count(2468), (4, 0))\n\n    def test_all_odd_digits(self):\n        self.assertEqual(even_odd_count(13579), (0, 5))\n\n    def test_mixed_digits(self):\n        self.assertEqual(even_odd_count(1234567890), (5, 0))\n\n    def test_single_digit(self):\n        self.assertEqual(even_odd_count(1), (0, 1))\n        self.assertEqual(even_odd_count(2), (1, 0))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "",
    "exist_error": false,
    "best_score": 0.0,
    "first_score": 0.0,
    "not_error_best_score": 0.0,
    "exist_not_error": true,
    "filtered_score": 0.0,
    "use_filter": false
}