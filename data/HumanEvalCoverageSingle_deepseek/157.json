{
    "task_id": "HumanEval/157",
    "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
    "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
    "entry_point": "right_angle_triangle",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestRightAngleTriangle(unittest.TestCase):\n\n    def test_right_angle_triangle_true(self):\n        self.assertTrue(right_angle_triangle(3, 4, 5))\n        self.assertTrue(right_angle_triangle(5, 12, 13))\n        self.assertTrue(right_angle_triangle(7, 24, 25))\n\n    def test_right_angle_triangle_false(self):\n        self.assertFalse(right_angle_triangle(1, 2, 3))\n        self.assertFalse(right_angle_triangle(2, 3, 4))\n        self.assertFalse(right_angle_triangle(3, 4, 7))\n\n    def test_right_angle_triangle_zero(self):\n        self.assertFalse(right_angle_triangle(0, 0, 0))\n\n    def test_right_angle_triangle_negative(self):\n        self.assertFalse(right_angle_triangle(-1, -2, -3))\n        self.assertFalse(right_angle_triangle(-1, 2, 3))\n        self.assertFalse(right_angle_triangle(1, -2, 3))\n        self.assertFalse(right_angle_triangle(1, 2, -3))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "...F\n======================================================================\nFAIL: test_right_angle_triangle_zero (__main__.TestRightAngleTriangle.test_right_angle_triangle_zero)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 18, in test_right_angle_triangle_zero\n    self.assertFalse(right_angle_triangle(0, 0, 0))\nAssertionError: True is not false\n\n----------------------------------------------------------------------\nRan 4 tests in 0.000s\n\nFAILED (failures=1)\n\nName                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py       2      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 2      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestRightAngleTriangle(unittest.TestCase):\n\n    def test_right_angle_triangle_true(self):\n        self.assertTrue(right_angle_triangle(3, 4, 5))\n        self.assertTrue(right_angle_triangle(5, 12, 13))\n        self.assertTrue(right_angle_triangle(7, 24, 25))\n\n    def test_right_angle_triangle_false(self):\n        self.assertFalse(right_angle_triangle(1, 2, 3))\n        self.assertFalse(right_angle_triangle(2, 3, 4))\n        self.assertFalse(right_angle_triangle(3, 4, 7))\n\n    def test_right_angle_triangle_zero(self):\n        self.assertFalse(right_angle_triangle(0, 0, 0))\n\n    def test_right_angle_triangle_negative(self):\n        self.assertFalse(right_angle_triangle(-1, -2, -3))\n        self.assertFalse(right_angle_triangle(-1, 2, 3))\n        self.assertFalse(right_angle_triangle(1, -2, 3))\n        self.assertFalse(right_angle_triangle(1, 2, -3))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestRightAngleTriangle(unittest.TestCase):\n\n    def test_right_angle_triangle_true(self):\n        self.assertTrue(right_angle_triangle(3, 4, 5))\n        self.assertTrue(right_angle_triangle(5, 12, 13))\n        self.assertTrue(right_angle_triangle(7, 24, 25))\n\n    def test_right_angle_triangle_false(self):\n        self.assertFalse(right_angle_triangle(1, 2, 3))\n        self.assertFalse(right_angle_triangle(2, 3, 4))\n        self.assertFalse(right_angle_triangle(3, 4, 7))\n\n    def test_right_angle_triangle_zero(self):\n        self.assertFalse(right_angle_triangle(0, 0, 0))\n\n    def test_right_angle_triangle_negative(self):\n        self.assertFalse(right_angle_triangle(-1, -2, -3))\n        self.assertFalse(right_angle_triangle(-1, 2, 3))\n        self.assertFalse(right_angle_triangle(1, -2, 3))\n        self.assertFalse(right_angle_triangle(1, 2, -3))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\n\n\nclass TestRightAngleTriangle(unittest.TestCase):\n\n    def test_right_angle_triangle_true_1(self):\n        self.assertTrue(right_angle_triangle(3, 4, 5))\n\n    def test_right_angle_triangle_true_2(self):\n        self.assertTrue(right_angle_triangle(5, 12, 13))\n\n    def test_right_angle_triangle_true_3(self):\n        self.assertTrue(right_angle_triangle(7, 24, 25))\n\n    def test_right_angle_triangle_false_1(self):\n        self.assertFalse(right_angle_triangle(1, 2, 3))\n\n    def test_right_angle_triangle_false_2(self):\n        self.assertFalse(right_angle_triangle(2, 3, 4))\n\n    def test_right_angle_triangle_false_3(self):\n        self.assertFalse(right_angle_triangle(3, 4, 7))\n\n    def test_right_angle_triangle_negative_1(self):\n        self.assertFalse(right_angle_triangle(-1, -2, -3))\n\n    def test_right_angle_triangle_negative_2(self):\n        self.assertFalse(right_angle_triangle(-1, 2, 3))\n\n    def test_right_angle_triangle_negative_3(self):\n        self.assertFalse(right_angle_triangle(1, -2, 3))\n\n    def test_right_angle_triangle_negative_4(self):\n        self.assertFalse(right_angle_triangle(1, 2, -3))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 100.0,
    "use_filter": true
}