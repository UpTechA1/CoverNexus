{
    "task_id": "HumanEval/55",
    "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
    "entry_point": "fib",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFib(unittest.TestCase):\n    def test_fib_0(self):\n        self.assertEqual(fib(0), 0)\n\n    def test_fib_1(self):\n        self.assertEqual(fib(1), 1)\n\n    def test_fib_2(self):\n        self.assertEqual(fib(2), 1)\n\n    def test_fib_3(self):\n        self.assertEqual(fib(3), 2)\n\n    def test_fib_4(self):\n        self.assertEqual(fib(4), 3)\n\n    def test_fib_5(self):\n        self.assertEqual(fib(5), 5)\n\n    def test_fib_6(self):\n        self.assertEqual(fib(6), 8)\n\n    def test_fib_7(self):\n        self.assertEqual(fib(7), 13)\n\n    def test_fib_8(self):\n        self.assertEqual(fib(8), 21)\n\n    def test_fib_9(self):\n        self.assertEqual(fib(9), 34)\n\n    def test_fib_10(self):\n        self.assertEqual(fib(10), 55)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py       6      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 6      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFib(unittest.TestCase):\n    def test_fib_0(self):\n        self.assertEqual(fib(0), 0)\n\n    def test_fib_1(self):\n        self.assertEqual(fib(1), 1)\n\n    def test_fib_2(self):\n        self.assertEqual(fib(2), 1)\n\n    def test_fib_3(self):\n        self.assertEqual(fib(3), 2)\n\n    def test_fib_4(self):\n        self.assertEqual(fib(4), 3)\n\n    def test_fib_5(self):\n        self.assertEqual(fib(5), 5)\n\n    def test_fib_6(self):\n        self.assertEqual(fib(6), 8)\n\n    def test_fib_7(self):\n        self.assertEqual(fib(7), 13)\n\n    def test_fib_8(self):\n        self.assertEqual(fib(8), 21)\n\n    def test_fib_9(self):\n        self.assertEqual(fib(9), 34)\n\n    def test_fib_10(self):\n        self.assertEqual(fib(10), 55)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFib(unittest.TestCase):\n    def test_fib_0(self):\n        self.assertEqual(fib(0), 0)\n\n    def test_fib_1(self):\n        self.assertEqual(fib(1), 1)\n\n    def test_fib_2(self):\n        self.assertEqual(fib(2), 1)\n\n    def test_fib_3(self):\n        self.assertEqual(fib(3), 2)\n\n    def test_fib_4(self):\n        self.assertEqual(fib(4), 3)\n\n    def test_fib_5(self):\n        self.assertEqual(fib(5), 5)\n\n    def test_fib_6(self):\n        self.assertEqual(fib(6), 8)\n\n    def test_fib_7(self):\n        self.assertEqual(fib(7), 13)\n\n    def test_fib_8(self):\n        self.assertEqual(fib(8), 21)\n\n    def test_fib_9(self):\n        self.assertEqual(fib(9), 34)\n\n    def test_fib_10(self):\n        self.assertEqual(fib(10), 55)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFib(unittest.TestCase):\n    def test_fib_0(self):\n        self.assertEqual(fib(0), 0)\n\n    def test_fib_1(self):\n        self.assertEqual(fib(1), 1)\n\n    def test_fib_2(self):\n        self.assertEqual(fib(2), 1)\n\n    def test_fib_3(self):\n        self.assertEqual(fib(3), 2)\n\n    def test_fib_4(self):\n        self.assertEqual(fib(4), 3)\n\n    def test_fib_5(self):\n        self.assertEqual(fib(5), 5)\n\n    def test_fib_6(self):\n        self.assertEqual(fib(6), 8)\n\n    def test_fib_7(self):\n        self.assertEqual(fib(7), 13)\n\n    def test_fib_8(self):\n        self.assertEqual(fib(8), 21)\n\n    def test_fib_9(self):\n        self.assertEqual(fib(9), 34)\n\n    def test_fib_10(self):\n        self.assertEqual(fib(10), 55)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFib(unittest.TestCase):\n    def test_fib_0(self):\n        self.assertEqual(fib(0), 0)\n\n    def test_fib_1(self):\n        self.assertEqual(fib(1), 1)\n\n    def test_fib_2(self):\n        self.assertEqual(fib(2), 1)\n\n    def test_fib_3(self):\n        self.assertEqual(fib(3), 2)\n\n    def test_fib_4(self):\n        self.assertEqual(fib(4), 3)\n\n    def test_fib_5(self):\n        self.assertEqual(fib(5), 5)\n\n    def test_fib_6(self):\n        self.assertEqual(fib(6), 8)\n\n    def test_fib_7(self):\n        self.assertEqual(fib(7), 13)\n\n    def test_fib_8(self):\n        self.assertEqual(fib(8), 21)\n\n    def test_fib_9(self):\n        self.assertEqual(fib(9), 34)\n\n    def test_fib_10(self):\n        self.assertEqual(fib(10), 55)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}