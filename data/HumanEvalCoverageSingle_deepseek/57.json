{
    "task_id": "HumanEval/57",
    "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
    "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
    "entry_point": "monotonic",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([1, 2, 2, 4]))\n        self.assertTrue(monotonic([5, 5, 5, 5]))\n        self.assertTrue(monotonic([]))\n        self.assertTrue(monotonic([1]))\n        self.assertTrue(monotonic([1, 1]))\n        self.assertFalse(monotonic([1, 2]))\n        self.assertFalse(monotonic([2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 4]))\n        self.assertFalse(monotonic([4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 2, 3]))\n        self.assertFalse(monotonic([3, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 0, -1, -2]))\n        self.assertFalse(monotonic([-2, -1, 0, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 1, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 2, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 4, 5, 6]))\n        self.assertFalse(monotonic([6, 5, 4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 2]))\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py       4      3    25%   12-14\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 4      3    25%\n",
            "coverage": 25.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([1, 2, 2, 4]))\n        self.assertTrue(monotonic([5, 5, 5, 5]))\n        self.assertTrue(monotonic([]))\n        self.assertTrue(monotonic([1]))\n        self.assertTrue(monotonic([1, 1]))\n        self.assertFalse(monotonic([1, 2]))\n        self.assertFalse(monotonic([2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 4]))\n        self.assertFalse(monotonic([4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 2, 3]))\n        self.assertFalse(monotonic([3, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 0, -1, -2]))\n        self.assertFalse(monotonic([-2, -1, 0, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 1, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 2, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 4, 5, 6]))\n        self.assertFalse(monotonic([6, 5, 4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 2]))\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([1, 2, 2, 4]))\n        self.assertTrue(monotonic([5, 5, 5, 5]))\n        self.assertTrue(monotonic([]))\n        self.assertTrue(monotonic([1]))\n        self.assertTrue(monotonic([1, 1]))\n        self.assertFalse(monotonic([1, 2]))\n        self.assertFalse(monotonic([2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 4]))\n        self.assertFalse(monotonic([4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 2, 3]))\n        self.assertFalse(monotonic([3, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 0, -1, -2]))\n        self.assertFalse(monotonic([-2, -1, 0, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 1, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 2, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 4, 5, 6]))\n        self.assertFalse(monotonic([6, 5, 4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 2]))\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([1, 2, 2, 4]))\n        self.assertTrue(monotonic([5, 5, 5, 5]))\n        self.assertTrue(monotonic([]))\n        self.assertTrue(monotonic([1]))\n        self.assertTrue(monotonic([1, 1]))\n        self.assertFalse(monotonic([1, 2]))\n        self.assertFalse(monotonic([2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 4]))\n        self.assertFalse(monotonic([4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 2, 3]))\n        self.assertFalse(monotonic([3, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 0, -1, -2]))\n        self.assertFalse(monotonic([-2, -1, 0, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 1, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 2, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 4, 5, 6]))\n        self.assertFalse(monotonic([6, 5, 4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 2]))\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([1, 2, 2, 4]))\n        self.assertTrue(monotonic([5, 5, 5, 5]))\n        self.assertTrue(monotonic([]))\n        self.assertTrue(monotonic([1]))\n        self.assertTrue(monotonic([1, 1]))\n        self.assertFalse(monotonic([1, 2]))\n        self.assertFalse(monotonic([2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 4]))\n        self.assertFalse(monotonic([4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 2, 3]))\n        self.assertFalse(monotonic([3, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 0, -1, -2]))\n        self.assertFalse(monotonic([-2, -1, 0, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 1, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 2, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2]))\n        self.assertTrue(monotonic([1, 2, 3, 4, 5, 6]))\n        self.assertFalse(monotonic([6, 5, 4, 3, 2, 1]))\n        self.assertTrue(monotonic([1, 2, 3, 3, 3, 2, 1]))\n        self.assertFalse(monotonic([1, 2, 3, 3, 3, 1, 2]))\n        self.assertTrue(monotonic([1, 2, 2, 2, 2, 2, 2]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 1]))\n        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 1]))\n        self.assertFalse(monotonic([2, 2, 2, 2, 2, 2, 2]))\n",
    "exist_error": false,
    "best_score": 25.0,
    "first_score": 25.0,
    "not_error_best_score": 25.0,
    "exist_not_error": true,
    "filtered_score": 25.0,
    "use_filter": false
}