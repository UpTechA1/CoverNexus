{
    "task_id": "HumanEval/57",
    "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
    "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
    "entry_point": "monotonic",
    "coverage": 100.0,
    "num_iterations_used": 3,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic_increasing(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n\n    def test_monotonic_decreasing(self):\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([10, 20, 4, 1]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       4      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 4      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        },
        "2": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic_increasing(self):\n        with self.subTest(test_case=\"Normal increasing list\"):\n            self.assertTrue(monotonic([1, 2, 4, 20]))\n\n        with self.subTest(test_case=\"Normal decreasing list\"):\n            self.assertTrue(monotonic([10, 20, 4, 1]))\n\n        with self.subTest(test_case=\"Single element list\"):\n            self.assertTrue(monotonic([5]))\n\n        with self.subTest(test_case=\"Empty list\"):\n            self.assertTrue(monotonic([]))\n\n    def test_monotonic_decreasing(self):\n        with self.subTest(test_case=\"Normal decreasing list\"):\n            self.assertTrue(monotonic([4, 1, 0, -10]))\n\n        with self.subTest(test_case=\"Normal increasing list\"):\n            self.assertTrue(monotonic([1, 20, 4, 10]))\n\n        with self.subTest(test_case=\"Single element list\"):\n            self.assertTrue(monotonic([-5]))\n\n        with self.subTest(test_case=\"Empty list\"):\n            self.assertTrue(monotonic([]))\n\n    def test_monotonic_mixed(self):\n        with self.subTest(test_case=\"Mixed increasing and decreasing list\"):\n            self.assertFalse(monotonic([1, 20, 4, 10, 5]))\n\n        with self.subTest(test_case=\"Mixed decreasing and increasing list\"):\n            self.assertFalse(monotonic([20, 4, 10, 1, 5]))\n\n        with self.subTest(test_case=\"Non-monotonic list\"):\n            self.assertFalse(monotonic([5, 3, 8, 6]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FF.\n======================================================================\nFAIL: test_monotonic_decreasing (__main__.TestMonotonic.test_monotonic_decreasing) (test_case='Normal increasing list')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/generated_test.py\", line 24, in test_monotonic_decreasing\n    self.assertTrue(monotonic([1, 20, 4, 10]))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_monotonic_increasing (__main__.TestMonotonic.test_monotonic_increasing) (test_case='Normal decreasing list')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/generated_test.py\", line 11, in test_monotonic_increasing\n    self.assertTrue(monotonic([10, 20, 4, 1]))\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nFAILED (failures=2)\n\nName                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       4      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 4      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n\n    def test_monotonic_increasing(self):\n        with self.subTest(test_case='Empty list'):\n            self.assertTrue(monotonic([]))\n        with self.subTest(test_case='Single element list'):\n            self.assertTrue(monotonic([42]))\n        with self.subTest(test_case='Normal increasing list'):\n            self.assertTrue(monotonic([10, 20, 30, 40]))\n        with self.subTest(test_case='Reverse normal increasing list'):\n            self.assertTrue(monotonic([40, 30, 20, 10]))\n\n    def test_monotonic_decreasing(self):\n        with self.subTest(test_case='Empty list'):\n            self.assertTrue(monotonic([]))\n        with self.subTest(test_case='Single element list'):\n            self.assertTrue(monotonic([42]))\n        with self.subTest(test_case='Normal decreasing list'):\n            self.assertTrue(monotonic([40, 30, 20, 10]))\n        with self.subTest(test_case='Reverse normal decreasing list'):\n            self.assertTrue(monotonic([10, 20, 30, 40]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       4      1    75%   14\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 4      1    75%\n",
            "coverage": 75.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic_increasing(self):\n        with self.subTest(test_case=\"Normal increasing list\"):\n            self.assertTrue(monotonic([1, 2, 4, 20]))\n\n        with self.subTest(test_case=\"Normal decreasing list\"):\n            self.assertTrue(monotonic([10, 20, 4, 1]))\n\n        with self.subTest(test_case=\"Single element list\"):\n            self.assertTrue(monotonic([5]))\n\n        with self.subTest(test_case=\"Empty list\"):\n            self.assertTrue(monotonic([]))\n\n    def test_monotonic_decreasing(self):\n        with self.subTest(test_case=\"Normal decreasing list\"):\n            self.assertTrue(monotonic([4, 1, 0, -10]))\n\n        with self.subTest(test_case=\"Normal increasing list\"):\n            self.assertTrue(monotonic([1, 20, 4, 10]))\n\n        with self.subTest(test_case=\"Single element list\"):\n            self.assertTrue(monotonic([-5]))\n\n        with self.subTest(test_case=\"Empty list\"):\n            self.assertTrue(monotonic([]))\n\n    def test_monotonic_mixed(self):\n        with self.subTest(test_case=\"Mixed increasing and decreasing list\"):\n            self.assertFalse(monotonic([1, 20, 4, 10, 5]))\n\n        with self.subTest(test_case=\"Mixed decreasing and increasing list\"):\n            self.assertFalse(monotonic([20, 4, 10, 1, 5]))\n\n        with self.subTest(test_case=\"Non-monotonic list\"):\n            self.assertFalse(monotonic([5, 3, 8, 6]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic_increasing(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n\n    def test_monotonic_decreasing(self):\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([10, 20, 4, 1]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic_increasing(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n\n    def test_monotonic_decreasing(self):\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([10, 20, 4, 1]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonic(unittest.TestCase):\n    def test_monotonic_increasing(self):\n        self.assertTrue(monotonic([1, 2, 4, 20]))\n        self.assertFalse(monotonic([1, 20, 4, 10]))\n\n    def test_monotonic_decreasing(self):\n        self.assertTrue(monotonic([4, 1, 0, -10]))\n        self.assertFalse(monotonic([10, 20, 4, 1]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}