{
    "task_id": "HumanEval/56",
    "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
    "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
    "entry_point": "correct_bracketing",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\n\nclass TestBracketing(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertTrue(correct_bracketing(\"\"))\n\n    def test_one_opening_bracket(self):\n        self.assertFalse(correct_bracketing(\"<\"))\n\n    def test_one_closing_bracket(self):\n        self.assertFalse(correct_bracketing(\">\"))\n\n    def test_balanced_brackets(self):\n        self.assertTrue(correct_bracketing(\"<>\"))\n\n    def test_nested_brackets(self):\n        self.assertTrue(correct_bracketing(\"<<><>>\"))\n\n    def test_unbalanced_brackets(self):\n        self.assertFalse(correct_bracketing(\"><<>\"))\n\n    def test_multiple_brackets(self):\n        self.assertTrue(correct_bracketing(\"<><><>\"))\n\n    def test_mixed_brackets(self):\n        self.assertFalse(correct_bracketing(\"<><>><\"))\n\n    def test_unbalanced_multiple_brackets(self):\n        self.assertFalse(correct_bracketing(\"<<><><>><\"))\n\n    def test_single_bracket(self):\n        self.assertTrue(correct_bracketing(\"<\"))\n\nif __name__ == \"__main__\":\n    unittest.main()",
            "executed_output": ".......F..\n======================================================================\nFAIL: test_single_bracket (__main__.TestBracketing.test_single_bracket)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/generated_test.py\", line 33, in test_single_bracket\n    self.assertTrue(correct_bracketing(\"<\"))\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 10 tests in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       9      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 9      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestBracketing(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertTrue(correct_bracketing(\"\"))\n\n    def test_one_opening_bracket(self):\n        self.assertFalse(correct_bracketing(\"<\"))\n\n    def test_one_closing_bracket(self):\n        self.assertFalse(correct_bracketing(\">\"))\n\n    def test_balanced_brackets(self):\n        self.assertTrue(correct_bracketing(\"<>\"))\n\n    def test_nested_brackets(self):\n        self.assertTrue(correct_bracketing(\"<<><>>\"))\n\n    def test_unbalanced_brackets(self):\n        self.assertFalse(correct_bracketing(\"><<>\"))\n\n    def test_multiple_brackets(self):\n        self.assertTrue(correct_bracketing(\"<><><>\"))\n\n    def test_mixed_brackets(self):\n        self.assertFalse(correct_bracketing(\"<><>><\"))\n\n    def test_unbalanced_multiple_brackets(self):\n        self.assertFalse(correct_bracketing(\"<<><><>><\"))\n\n    def test_single_bracket(self):\n        self.assertTrue(correct_bracketing(\"<\"))\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestBracketing(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertTrue(correct_bracketing(\"\"))\n\n    def test_one_opening_bracket(self):\n        self.assertFalse(correct_bracketing(\"<\"))\n\n    def test_one_closing_bracket(self):\n        self.assertFalse(correct_bracketing(\">\"))\n\n    def test_balanced_brackets(self):\n        self.assertTrue(correct_bracketing(\"<>\"))\n\n    def test_nested_brackets(self):\n        self.assertTrue(correct_bracketing(\"<<><>>\"))\n\n    def test_unbalanced_brackets(self):\n        self.assertFalse(correct_bracketing(\"><<>\"))\n\n    def test_multiple_brackets(self):\n        self.assertTrue(correct_bracketing(\"<><><>\"))\n\n    def test_mixed_brackets(self):\n        self.assertFalse(correct_bracketing(\"<><>><\"))\n\n    def test_unbalanced_multiple_brackets(self):\n        self.assertFalse(correct_bracketing(\"<<><><>><\"))\n\n    def test_single_bracket(self):\n        self.assertTrue(correct_bracketing(\"<\"))\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\n\n\nclass TestBracketing(unittest.TestCase):\n\n    def test_empty_string_1(self):\n        self.assertTrue(correct_bracketing(''))\n\n    def test_one_opening_bracket_1(self):\n        self.assertFalse(correct_bracketing('<'))\n\n    def test_one_closing_bracket_1(self):\n        self.assertFalse(correct_bracketing('>'))\n\n    def test_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('<>'))\n\n    def test_nested_brackets_1(self):\n        self.assertTrue(correct_bracketing('<<><>>'))\n\n    def test_unbalanced_brackets_1(self):\n        self.assertFalse(correct_bracketing('><<>'))\n\n    def test_multiple_brackets_1(self):\n        self.assertTrue(correct_bracketing('<><><>'))\n\n    def test_mixed_brackets_1(self):\n        self.assertFalse(correct_bracketing('<><>><'))\n\n    def test_unbalanced_multiple_brackets_1(self):\n        self.assertFalse(correct_bracketing('<<><><>><'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 100.0,
    "use_filter": true
}