{
    "task_id": "HumanEval/103",
    "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
    "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
    "entry_point": "rounded_avg",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\n\nclass TestRoundedAvg(unittest.TestCase):\n    def test_rounded_avg(self):\n        self.assertEqual(rounded_avg(1, 5), \"0b11\")\n        self.assertEqual(rounded_avg(7, 5), -1)\n        self.assertEqual(rounded_avg(10, 20), \"0b1111\")\n        self.assertEqual(rounded_avg(20, 33), \"0b11010\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       7      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 7      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestRoundedAvg(unittest.TestCase):\n    def test_rounded_avg(self):\n        self.assertEqual(rounded_avg(1, 5), \"0b11\")\n        self.assertEqual(rounded_avg(7, 5), -1)\n        self.assertEqual(rounded_avg(10, 20), \"0b1111\")\n        self.assertEqual(rounded_avg(20, 33), \"0b11010\")\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestRoundedAvg(unittest.TestCase):\n    def test_rounded_avg(self):\n        self.assertEqual(rounded_avg(1, 5), \"0b11\")\n        self.assertEqual(rounded_avg(7, 5), -1)\n        self.assertEqual(rounded_avg(10, 20), \"0b1111\")\n        self.assertEqual(rounded_avg(20, 33), \"0b11010\")\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestRoundedAvg(unittest.TestCase):\n    def test_rounded_avg(self):\n        self.assertEqual(rounded_avg(1, 5), \"0b11\")\n        self.assertEqual(rounded_avg(7, 5), -1)\n        self.assertEqual(rounded_avg(10, 20), \"0b1111\")\n        self.assertEqual(rounded_avg(20, 33), \"0b11010\")\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestRoundedAvg(unittest.TestCase):\n    def test_rounded_avg(self):\n        self.assertEqual(rounded_avg(1, 5), \"0b11\")\n        self.assertEqual(rounded_avg(7, 5), -1)\n        self.assertEqual(rounded_avg(10, 20), \"0b1111\")\n        self.assertEqual(rounded_avg(20, 33), \"0b11010\")\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}