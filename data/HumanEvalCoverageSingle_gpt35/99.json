{
    "task_id": "HumanEval/99",
    "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
    "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
    "entry_point": "closest_integer",
    "coverage": 86.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import closest_integer\n\n\nclass TestClosestInteger(unittest.TestCase):\n\n    def test_closest_integer_positive_1(self):\n        self.assertEqual(closest_integer('10'), 10)\n\n    def test_closest_integer_decimal_1(self):\n        self.assertEqual(closest_integer('15.3'), 15)\n\n    def test_closest_integer_negative_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n    def test_closest_integer_zero_1(self):\n        self.assertEqual(closest_integer('0'), 0)\n\n    def test_closest_integer_decimal_zero_1(self):\n        self.assertEqual(closest_integer('0.0'), 0)\n\n    def test_closest_integer_decimal_round_up_1(self):\n        self.assertEqual(closest_integer('14.5'), 15)\n\n    def test_closest_integer_decimal_round_down_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                           Stmts   Miss  Cover   Missing\n----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt35/codebase.py      14      1    93%   36\n----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                             14      1    93%\n",
            "coverage": 93.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import closest_integer\n\n\nclass TestClosestInteger(unittest.TestCase):\n\n    def test_closest_integer_positive_1(self):\n        self.assertEqual(closest_integer('10'), 10)\n\n    def test_closest_integer_decimal_1(self):\n        self.assertEqual(closest_integer('15.3'), 15)\n\n    def test_closest_integer_negative_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n    def test_closest_integer_zero_1(self):\n        self.assertEqual(closest_integer('0'), 0)\n\n    def test_closest_integer_decimal_zero_1(self):\n        self.assertEqual(closest_integer('0.0'), 0)\n\n    def test_closest_integer_decimal_round_up_1(self):\n        self.assertEqual(closest_integer('14.5'), 15)\n\n    def test_closest_integer_decimal_round_down_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import closest_integer\n\n\nclass TestClosestInteger(unittest.TestCase):\n\n    def test_closest_integer_positive_1(self):\n        self.assertEqual(closest_integer('10'), 10)\n\n    def test_closest_integer_decimal_1(self):\n        self.assertEqual(closest_integer('15.3'), 15)\n\n    def test_closest_integer_negative_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n    def test_closest_integer_zero_1(self):\n        self.assertEqual(closest_integer('0'), 0)\n\n    def test_closest_integer_decimal_zero_1(self):\n        self.assertEqual(closest_integer('0.0'), 0)\n\n    def test_closest_integer_decimal_round_up_1(self):\n        self.assertEqual(closest_integer('14.5'), 15)\n\n    def test_closest_integer_decimal_round_down_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import closest_integer\n\n\nclass TestClosestInteger(unittest.TestCase):\n\n    def test_closest_integer_positive_1(self):\n        self.assertEqual(closest_integer('10'), 10)\n\n    def test_closest_integer_decimal_1(self):\n        self.assertEqual(closest_integer('15.3'), 15)\n\n    def test_closest_integer_negative_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n    def test_closest_integer_zero_1(self):\n        self.assertEqual(closest_integer('0'), 0)\n\n    def test_closest_integer_decimal_zero_1(self):\n        self.assertEqual(closest_integer('0.0'), 0)\n\n    def test_closest_integer_decimal_round_up_1(self):\n        self.assertEqual(closest_integer('14.5'), 15)\n\n    def test_closest_integer_decimal_round_down_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import closest_integer\n\n\nclass TestClosestInteger(unittest.TestCase):\n\n    def test_closest_integer_positive_1(self):\n        self.assertEqual(closest_integer('10'), 10)\n\n    def test_closest_integer_decimal_1(self):\n        self.assertEqual(closest_integer('15.3'), 15)\n\n    def test_closest_integer_negative_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n    def test_closest_integer_zero_1(self):\n        self.assertEqual(closest_integer('0'), 0)\n\n    def test_closest_integer_decimal_zero_1(self):\n        self.assertEqual(closest_integer('0.0'), 0)\n\n    def test_closest_integer_decimal_round_up_1(self):\n        self.assertEqual(closest_integer('14.5'), 15)\n\n    def test_closest_integer_decimal_round_down_1(self):\n        self.assertEqual(closest_integer('-14.5'), -15)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 93.0,
    "first_score": 93.0,
    "not_error_best_score": 93.0,
    "exist_not_error": true,
    "filtered_score": 93.0,
    "use_filter": false
}