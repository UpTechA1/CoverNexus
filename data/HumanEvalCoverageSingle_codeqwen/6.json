{
    "task_id": "HumanEval/6",
    "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
    "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
    "entry_point": "parse_nested_parens",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestParseNestedParens(unittest.TestCase):\n    def test_single_group(self):\n        self.assertEqual(parse_nested_parens('(()())'), [2])\n\n    def test_multiple_groups(self):\n        self.assertEqual(parse_nested_parens('(()()) ((())) () ((())()())'), [2, 3, 1, 3])\n\n    def test_single_parenthesis(self):\n        self.assertEqual(parse_nested_parens('()'), [1])\n\n    def test_no_parentheses(self):\n        self.assertEqual(parse_nested_parens(''), [])\n\n    def test_nested_parentheses(self):\n        self.assertEqual(parse_nested_parens('((()))'), [3])\n\n    def test_mixed_parentheses(self):\n        self.assertEqual(parse_nested_parens('(()) ()'), [2, 1])\n\n    def test_spaces(self):\n        self.assertEqual(parse_nested_parens('   (()())   (((())))  '), [2, 4])\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py      12      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                12      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestParseNestedParens(unittest.TestCase):\n    def test_single_group(self):\n        self.assertEqual(parse_nested_parens('(()())'), [2])\n\n    def test_multiple_groups(self):\n        self.assertEqual(parse_nested_parens('(()()) ((())) () ((())()())'), [2, 3, 1, 3])\n\n    def test_single_parenthesis(self):\n        self.assertEqual(parse_nested_parens('()'), [1])\n\n    def test_no_parentheses(self):\n        self.assertEqual(parse_nested_parens(''), [])\n\n    def test_nested_parentheses(self):\n        self.assertEqual(parse_nested_parens('((()))'), [3])\n\n    def test_mixed_parentheses(self):\n        self.assertEqual(parse_nested_parens('(()) ()'), [2, 1])\n\n    def test_spaces(self):\n        self.assertEqual(parse_nested_parens('   (()())   (((())))  '), [2, 4])\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestParseNestedParens(unittest.TestCase):\n    def test_single_group(self):\n        self.assertEqual(parse_nested_parens('(()())'), [2])\n\n    def test_multiple_groups(self):\n        self.assertEqual(parse_nested_parens('(()()) ((())) () ((())()())'), [2, 3, 1, 3])\n\n    def test_single_parenthesis(self):\n        self.assertEqual(parse_nested_parens('()'), [1])\n\n    def test_no_parentheses(self):\n        self.assertEqual(parse_nested_parens(''), [])\n\n    def test_nested_parentheses(self):\n        self.assertEqual(parse_nested_parens('((()))'), [3])\n\n    def test_mixed_parentheses(self):\n        self.assertEqual(parse_nested_parens('(()) ()'), [2, 1])\n\n    def test_spaces(self):\n        self.assertEqual(parse_nested_parens('   (()())   (((())))  '), [2, 4])\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestParseNestedParens(unittest.TestCase):\n    def test_single_group(self):\n        self.assertEqual(parse_nested_parens('(()())'), [2])\n\n    def test_multiple_groups(self):\n        self.assertEqual(parse_nested_parens('(()()) ((())) () ((())()())'), [2, 3, 1, 3])\n\n    def test_single_parenthesis(self):\n        self.assertEqual(parse_nested_parens('()'), [1])\n\n    def test_no_parentheses(self):\n        self.assertEqual(parse_nested_parens(''), [])\n\n    def test_nested_parentheses(self):\n        self.assertEqual(parse_nested_parens('((()))'), [3])\n\n    def test_mixed_parentheses(self):\n        self.assertEqual(parse_nested_parens('(()) ()'), [2, 1])\n\n    def test_spaces(self):\n        self.assertEqual(parse_nested_parens('   (()())   (((())))  '), [2, 4])\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestParseNestedParens(unittest.TestCase):\n    def test_single_group(self):\n        self.assertEqual(parse_nested_parens('(()())'), [2])\n\n    def test_multiple_groups(self):\n        self.assertEqual(parse_nested_parens('(()()) ((())) () ((())()())'), [2, 3, 1, 3])\n\n    def test_single_parenthesis(self):\n        self.assertEqual(parse_nested_parens('()'), [1])\n\n    def test_no_parentheses(self):\n        self.assertEqual(parse_nested_parens(''), [])\n\n    def test_nested_parentheses(self):\n        self.assertEqual(parse_nested_parens('((()))'), [3])\n\n    def test_mixed_parentheses(self):\n        self.assertEqual(parse_nested_parens('(()) ()'), [2, 1])\n\n    def test_spaces(self):\n        self.assertEqual(parse_nested_parens('   (()())   (((())))  '), [2, 4])\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}