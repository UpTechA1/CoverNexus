{
    "task_id": "HumanEval/70",
    "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "strange_sort_list",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_strange_sort_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n        self.assertEqual(strange_sort_list([]), [])\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       7      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 7      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_strange_sort_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n        self.assertEqual(strange_sort_list([]), [])\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_strange_sort_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n        self.assertEqual(strange_sort_list([]), [])\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_strange_sort_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n        self.assertEqual(strange_sort_list([]), [])\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestStrangeSortList(unittest.TestCase):\n    def test_strange_sort_list(self):\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n        self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n        self.assertEqual(strange_sort_list([]), [])\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}