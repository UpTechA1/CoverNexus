{
    "task_id": "HumanEval/120",
    "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
    "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
    "entry_point": "maximum",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\n\nclass TestMaximum(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(maximum([-3, -4, 5], 3), [-4, -3, 5])\n        self.assertEqual(maximum([4, -4, 4], 2), [4, 4])\n        self.assertEqual(maximum([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    def test_edge_cases(self):\n        self.assertEqual(maximum([1], 1), [1])\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_negative_numbers(self):\n        self.assertEqual(maximum([-1, -2, -3], 3), [-3, -2, -1])\n\n    def test_large_arrays(self):\n        arr = [i for i in range(-1000, 1000)]\n        self.assertEqual(maximum(arr, 10), arr[-10:])\n\n    def test_zero_k(self):\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_k_greater_than_length(self):\n        self.assertEqual(maximum([1, 2, 3], 5), [1, 2, 3])\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       6      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 6      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestMaximum(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(maximum([-3, -4, 5], 3), [-4, -3, 5])\n        self.assertEqual(maximum([4, -4, 4], 2), [4, 4])\n        self.assertEqual(maximum([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    def test_edge_cases(self):\n        self.assertEqual(maximum([1], 1), [1])\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_negative_numbers(self):\n        self.assertEqual(maximum([-1, -2, -3], 3), [-3, -2, -1])\n\n    def test_large_arrays(self):\n        arr = [i for i in range(-1000, 1000)]\n        self.assertEqual(maximum(arr, 10), arr[-10:])\n\n    def test_zero_k(self):\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_k_greater_than_length(self):\n        self.assertEqual(maximum([1, 2, 3], 5), [1, 2, 3])\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestMaximum(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(maximum([-3, -4, 5], 3), [-4, -3, 5])\n        self.assertEqual(maximum([4, -4, 4], 2), [4, 4])\n        self.assertEqual(maximum([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    def test_edge_cases(self):\n        self.assertEqual(maximum([1], 1), [1])\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_negative_numbers(self):\n        self.assertEqual(maximum([-1, -2, -3], 3), [-3, -2, -1])\n\n    def test_large_arrays(self):\n        arr = [i for i in range(-1000, 1000)]\n        self.assertEqual(maximum(arr, 10), arr[-10:])\n\n    def test_zero_k(self):\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_k_greater_than_length(self):\n        self.assertEqual(maximum([1, 2, 3], 5), [1, 2, 3])\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestMaximum(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(maximum([-3, -4, 5], 3), [-4, -3, 5])\n        self.assertEqual(maximum([4, -4, 4], 2), [4, 4])\n        self.assertEqual(maximum([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    def test_edge_cases(self):\n        self.assertEqual(maximum([1], 1), [1])\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_negative_numbers(self):\n        self.assertEqual(maximum([-1, -2, -3], 3), [-3, -2, -1])\n\n    def test_large_arrays(self):\n        arr = [i for i in range(-1000, 1000)]\n        self.assertEqual(maximum(arr, 10), arr[-10:])\n\n    def test_zero_k(self):\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_k_greater_than_length(self):\n        self.assertEqual(maximum([1, 2, 3], 5), [1, 2, 3])\n\nif __name__ == '__main__':\n    unittest.main()",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\n\nclass TestMaximum(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(maximum([-3, -4, 5], 3), [-4, -3, 5])\n        self.assertEqual(maximum([4, -4, 4], 2), [4, 4])\n        self.assertEqual(maximum([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    def test_edge_cases(self):\n        self.assertEqual(maximum([1], 1), [1])\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_negative_numbers(self):\n        self.assertEqual(maximum([-1, -2, -3], 3), [-3, -2, -1])\n\n    def test_large_arrays(self):\n        arr = [i for i in range(-1000, 1000)]\n        self.assertEqual(maximum(arr, 10), arr[-10:])\n\n    def test_zero_k(self):\n        self.assertEqual(maximum([1, 2, 3], 0), [])\n\n    def test_k_greater_than_length(self):\n        self.assertEqual(maximum([1, 2, 3], 5), [1, 2, 3])\n\nif __name__ == '__main__':\n    unittest.main()",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}