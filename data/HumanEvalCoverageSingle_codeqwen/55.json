{
    "task_id": "HumanEval/55",
    "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
    "entry_point": "fib",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFibonacciFunction(unittest.TestCase):\n    def test_fibonacci(self):\n        # Test for the first three Fibonacci numbers\n        self.assertEqual(fib(10), 55)\n        self.assertEqual(fib(1), 1)\n        self.assertEqual(fib(8), 21)\n\n        # Test for larger numbers\n        self.assertEqual(fib(20), 6765)\n        self.assertEqual(fib(30), 832040)\n\n        # Test for negative numbers (should return 0, as per definition)\n        self.assertEqual(fib(-1), 0)\n        self.assertEqual(fib(-5), 0)\n\n        # Test for zero (should return 0, as per definition)\n        self.assertEqual(fib(0), 0)\n\n        # Test for large inputs (should be handled efficiently)\n        self.assertIsInstance(fib(1000), int)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "E\n======================================================================\nERROR: test_fibonacci (__main__.TestFibonacciFunction.test_fibonacci)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/generated_test.py\", line 17, in test_fibonacci\n    self.assertEqual(fib(-1), 0)\n                     ^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py\", line 16, in fib\n    return fib(n - 1) + fib(n - 2)\n           ^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py\", line 16, in fib\n    return fib(n - 1) + fib(n - 2)\n           ^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py\", line 16, in fib\n    return fib(n - 1) + fib(n - 2)\n           ^^^^^^^^^^\n  [Previous line repeated 973 more times]\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py\", line 3, in fib\n    def fib(n: int):\n    \n  File \"/home/pc/miniforge3/envs/myenv/lib/python3.11/site-packages/coverage/collector.py\", line 253, in lock_data\n    self.data_lock.acquire()\nRecursionError: maximum recursion depth exceeded while calling a Python object\n\n----------------------------------------------------------------------\nRan 1 test in 0.754s\n\nFAILED (errors=1)\n\nName                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_codeqwen/codebase.py       6      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFibonacciFunction(unittest.TestCase):\n    def test_fibonacci(self):\n        # Test for the first three Fibonacci numbers\n        self.assertEqual(fib(10), 55)\n        self.assertEqual(fib(1), 1)\n        self.assertEqual(fib(8), 21)\n\n        # Test for larger numbers\n        self.assertEqual(fib(20), 6765)\n        self.assertEqual(fib(30), 832040)\n\n        # Test for negative numbers (should return 0, as per definition)\n        self.assertEqual(fib(-1), 0)\n        self.assertEqual(fib(-5), 0)\n\n        # Test for zero (should return 0, as per definition)\n        self.assertEqual(fib(0), 0)\n\n        # Test for large inputs (should be handled efficiently)\n        self.assertIsInstance(fib(1000), int)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestFibonacciFunction(unittest.TestCase):\n    def test_fibonacci(self):\n        # Test for the first three Fibonacci numbers\n        self.assertEqual(fib(10), 55)\n        self.assertEqual(fib(1), 1)\n        self.assertEqual(fib(8), 21)\n\n        # Test for larger numbers\n        self.assertEqual(fib(20), 6765)\n        self.assertEqual(fib(30), 832040)\n\n        # Test for negative numbers (should return 0, as per definition)\n        self.assertEqual(fib(-1), 0)\n        self.assertEqual(fib(-5), 0)\n\n        # Test for zero (should return 0, as per definition)\n        self.assertEqual(fib(0), 0)\n\n        # Test for large inputs (should be handled efficiently)\n        self.assertIsInstance(fib(1000), int)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\n\n\nclass TestFibonacciFunction(unittest.TestCase):\n\n    def test_fibonacci_1(self):\n        self.assertEqual(fib(10), 55)\n\n    def test_fibonacci_2(self):\n        self.assertEqual(fib(1), 1)\n\n    def test_fibonacci_3(self):\n        self.assertEqual(fib(8), 21)\n\n    def test_fibonacci_4(self):\n        self.assertEqual(fib(20), 6765)\n\n    def test_fibonacci_5(self):\n        self.assertEqual(fib(30), 832040)\n\n    def test_fibonacci_8(self):\n        self.assertEqual(fib(0), 0)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 100.0,
    "use_filter": true
}