{
    "task_id": "HumanEval/61",
    "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
    "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
    "entry_point": "correct_bracketing",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_empty_string_1(self):\n        self.assertTrue(correct_bracketing(''))\n\n    def test_single_opening_bracket_1(self):\n        self.assertFalse(correct_bracketing('('))\n\n    def test_single_closing_bracket_1(self):\n        self.assertFalse(correct_bracketing(')'))\n\n    def test_simple_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('()'))\n\n    def test_nested_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())'))\n\n    def test_unbalanced_brackets_more_opening_1(self):\n        self.assertFalse(correct_bracketing('((()'))\n\n    def test_unbalanced_brackets_more_closing_1(self):\n        self.assertFalse(correct_bracketing('())'))\n\n    def test_closing_before_opening_1(self):\n        self.assertFalse(correct_bracketing(')('))\n\n    def test_complex_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())(())'))\n\n    def test_complex_unbalanced_brackets_1(self):\n        self.assertFalse(correct_bracketing('((()())()))'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                   Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Untitled/test_coverage_multiagents/temp_test_codeqwen/codebase.py       8      7    12%   11-17\n--------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                      8      7    12%\n",
            "coverage": 12.0,
            "exist_error": false
        }
    },
    "exist_error": false,
    "best_score": 12.0,
    "first_score": 12.0,
    "not_error_best_score": 12.0,
    "best_score_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_empty_string_1(self):\n        self.assertTrue(correct_bracketing(''))\n\n    def test_single_opening_bracket_1(self):\n        self.assertFalse(correct_bracketing('('))\n\n    def test_single_closing_bracket_1(self):\n        self.assertFalse(correct_bracketing(')'))\n\n    def test_simple_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('()'))\n\n    def test_nested_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())'))\n\n    def test_unbalanced_brackets_more_opening_1(self):\n        self.assertFalse(correct_bracketing('((()'))\n\n    def test_unbalanced_brackets_more_closing_1(self):\n        self.assertFalse(correct_bracketing('())'))\n\n    def test_closing_before_opening_1(self):\n        self.assertFalse(correct_bracketing(')('))\n\n    def test_complex_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())(())'))\n\n    def test_complex_unbalanced_brackets_1(self):\n        self.assertFalse(correct_bracketing('((()())()))'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_empty_string_1(self):\n        self.assertTrue(correct_bracketing(''))\n\n    def test_single_opening_bracket_1(self):\n        self.assertFalse(correct_bracketing('('))\n\n    def test_single_closing_bracket_1(self):\n        self.assertFalse(correct_bracketing(')'))\n\n    def test_simple_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('()'))\n\n    def test_nested_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())'))\n\n    def test_unbalanced_brackets_more_opening_1(self):\n        self.assertFalse(correct_bracketing('((()'))\n\n    def test_unbalanced_brackets_more_closing_1(self):\n        self.assertFalse(correct_bracketing('())'))\n\n    def test_closing_before_opening_1(self):\n        self.assertFalse(correct_bracketing(')('))\n\n    def test_complex_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())(())'))\n\n    def test_complex_unbalanced_brackets_1(self):\n        self.assertFalse(correct_bracketing('((()())()))'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_empty_string_1(self):\n        self.assertTrue(correct_bracketing(''))\n\n    def test_single_opening_bracket_1(self):\n        self.assertFalse(correct_bracketing('('))\n\n    def test_single_closing_bracket_1(self):\n        self.assertFalse(correct_bracketing(')'))\n\n    def test_simple_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('()'))\n\n    def test_nested_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())'))\n\n    def test_unbalanced_brackets_more_opening_1(self):\n        self.assertFalse(correct_bracketing('((()'))\n\n    def test_unbalanced_brackets_more_closing_1(self):\n        self.assertFalse(correct_bracketing('())'))\n\n    def test_closing_before_opening_1(self):\n        self.assertFalse(correct_bracketing(')('))\n\n    def test_complex_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())(())'))\n\n    def test_complex_unbalanced_brackets_1(self):\n        self.assertFalse(correct_bracketing('((()())()))'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "import unittest\nfrom codebase import correct_bracketing\n\n\nclass TestCorrectBracketing(unittest.TestCase):\n\n    def test_empty_string_1(self):\n        self.assertTrue(correct_bracketing(''))\n\n    def test_single_opening_bracket_1(self):\n        self.assertFalse(correct_bracketing('('))\n\n    def test_single_closing_bracket_1(self):\n        self.assertFalse(correct_bracketing(')'))\n\n    def test_simple_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('()'))\n\n    def test_nested_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())'))\n\n    def test_unbalanced_brackets_more_opening_1(self):\n        self.assertFalse(correct_bracketing('((()'))\n\n    def test_unbalanced_brackets_more_closing_1(self):\n        self.assertFalse(correct_bracketing('())'))\n\n    def test_closing_before_opening_1(self):\n        self.assertFalse(correct_bracketing(')('))\n\n    def test_complex_balanced_brackets_1(self):\n        self.assertTrue(correct_bracketing('(()())(())'))\n\n    def test_complex_unbalanced_brackets_1(self):\n        self.assertFalse(correct_bracketing('((()())()))'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 12.0,
    "use_filter": false,
    "exist_not_error": true
}