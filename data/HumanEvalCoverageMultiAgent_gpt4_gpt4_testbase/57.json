{
    "task_id": "HumanEval/57",
    "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
    "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
    "entry_point": "monotonic",
    "testbase": "from method import monotonic\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\n\nif __name__ == '__main__':\n    check(monotonic)\n",
    "coverage": 100.0,
    "coverage_testbase": 75.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonicFunction(unittest.TestCase):\n    def test_increasing(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_decreasing(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_not_monotonic(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_empty_list(self):\n        self.assertTrue(monotonic([]))\n\n    def test_single_element(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_same_elements(self):\n        self.assertTrue(monotonic([2, 2, 2, 2]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(monotonic([-1, -2, -3, -4]))\n\n    def test_mixed_numbers(self):\n        self.assertFalse(monotonic([-1, 2, -3, 4]))\n\n    def test_large_numbers(self):\n        self.assertTrue(monotonic([1000000, 1000001, 1000002]))\n\n    def test_small_numbers(self):\n        self.assertTrue(monotonic([-1000000, -1000001, -1000002]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       4      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                             4      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonicFunction(unittest.TestCase):\n    def test_increasing(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_decreasing(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_not_monotonic(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_empty_list(self):\n        self.assertTrue(monotonic([]))\n\n    def test_single_element(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_same_elements(self):\n        self.assertTrue(monotonic([2, 2, 2, 2]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(monotonic([-1, -2, -3, -4]))\n\n    def test_mixed_numbers(self):\n        self.assertFalse(monotonic([-1, 2, -3, 4]))\n\n    def test_large_numbers(self):\n        self.assertTrue(monotonic([1000000, 1000001, 1000002]))\n\n    def test_small_numbers(self):\n        self.assertTrue(monotonic([-1000000, -1000001, -1000002]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonicFunction(unittest.TestCase):\n    def test_increasing(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_decreasing(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_not_monotonic(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_empty_list(self):\n        self.assertTrue(monotonic([]))\n\n    def test_single_element(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_same_elements(self):\n        self.assertTrue(monotonic([2, 2, 2, 2]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(monotonic([-1, -2, -3, -4]))\n\n    def test_mixed_numbers(self):\n        self.assertFalse(monotonic([-1, 2, -3, 4]))\n\n    def test_large_numbers(self):\n        self.assertTrue(monotonic([1000000, 1000001, 1000002]))\n\n    def test_small_numbers(self):\n        self.assertTrue(monotonic([-1000000, -1000001, -1000002]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonicFunction(unittest.TestCase):\n    def test_increasing(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_decreasing(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_not_monotonic(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_empty_list(self):\n        self.assertTrue(monotonic([]))\n\n    def test_single_element(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_same_elements(self):\n        self.assertTrue(monotonic([2, 2, 2, 2]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(monotonic([-1, -2, -3, -4]))\n\n    def test_mixed_numbers(self):\n        self.assertFalse(monotonic([-1, 2, -3, 4]))\n\n    def test_large_numbers(self):\n        self.assertTrue(monotonic([1000000, 1000001, 1000002]))\n\n    def test_small_numbers(self):\n        self.assertTrue(monotonic([-1000000, -1000001, -1000002]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\n\nclass TestMonotonicFunction(unittest.TestCase):\n    def test_increasing(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_decreasing(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_not_monotonic(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_empty_list(self):\n        self.assertTrue(monotonic([]))\n\n    def test_single_element(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_same_elements(self):\n        self.assertTrue(monotonic([2, 2, 2, 2]))\n\n    def test_negative_numbers(self):\n        self.assertTrue(monotonic([-1, -2, -3, -4]))\n\n    def test_mixed_numbers(self):\n        self.assertFalse(monotonic([-1, 2, -3, 4]))\n\n    def test_large_numbers(self):\n        self.assertTrue(monotonic([1000000, 1000001, 1000002]))\n\n    def test_small_numbers(self):\n        self.assertTrue(monotonic([-1000000, -1000001, -1000002]))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}