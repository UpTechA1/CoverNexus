{
    "task_id": "HumanEval/153",
    "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
    "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
    "entry_point": "Strongest_Extension",
    "testbase": "from method import Strongest_Extension\ndef check(candidate):\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n\n\nif __name__ == '__main__':\n    check(Strongest_Extension)\n",
    "coverage": 100.0,
    "coverage_testbase": 80.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], 'Empty.'),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.VeryLongExtension'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "EF\n======================================================================\nERROR: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='Empty', extensions=[])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 22, in test_strongest_extension\n    result = Strongest_Extension(class_name, extensions)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 19, in Strongest_Extension\n    strong = extensions[0]\n             ~~~~~~~~~~^^^\nIndexError: list index out of range\n\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='LongName', extensions=['shortEXT', 'VeryLongExtension'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 23, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'LongName.shortEXT' != 'LongName.VeryLongExtension'\n- LongName.shortEXT\n+ LongName.VeryLongExtension\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1, errors=1)\n\nName                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      10      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], 'Empty'),  # Modified to expect just the class name for empty list\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.shortEXT'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n            (\"VeryLongExtensionName\", ['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'], 'VeryLongExtensionName.ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n            (\"MixedCase\", ['aBcDeF', 'AbCdEf', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            (\"AllLower\", ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            (\"AllUpper\", ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            (\"SpecialChars\", ['A-B-C', 'a-b-c', '123'], 'SpecialChars.A-B-C'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                if not extensions:\n                    # Handle empty extensions list\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n                else:\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n\n    def test_empty_extensions(self):\n        # Specific test for empty extensions\n        with self.assertRaises(IndexError):\n            Strongest_Extension(\"EmptyTest\", [])\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": ".E\n======================================================================\nERROR: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='Empty', extensions=[])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 30, in test_strongest_extension\n    result = Strongest_Extension(class_name, extensions)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 19, in Strongest_Extension\n    strong = extensions[0]\n             ~~~~~~~~~~^^^\nIndexError: list index out of range\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (errors=1)\n\nName                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      10      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], IndexError),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.VeryLongExtension'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n            (\"VeryLongExtensionName\", ['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'], 'VeryLongExtensionName.ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n            (\"MixedCase\", ['aBcDeF', 'AbCdEf', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            (\"AllLower\", ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            (\"AllUpper\", ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            (\"SpecialChars\", ['A-B-C', 'a-b-c', '123'], 'SpecialChars.A-B-C'),\n            (\"SingleChar\", ['A', 'b', 'C'], 'SingleChar.A'),\n            (\"AllEqual\", ['AB', 'CD', 'EF'], 'AllEqual.AB'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                if expected == IndexError:\n                    with self.assertRaises(IndexError):\n                        Strongest_Extension(class_name, extensions)\n                else:\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "F\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='LongName', extensions=['shortEXT', 'VeryLongExtension'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 34, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'LongName.shortEXT' != 'LongName.VeryLongExtension'\n- LongName.shortEXT\n+ LongName.VeryLongExtension\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      10      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], IndexError),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.shortEXT'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n            (\"VeryLongExtensionName\", ['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'], 'VeryLongExtensionName.ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n            (\"MixedCase\", ['aBcDeF', 'AbCdEf', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            (\"AllLower\", ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            (\"AllUpper\", ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            (\"SpecialChars\", ['A-B-C', 'a-b-c', '123'], 'SpecialChars.A-B-C'),\n            (\"SingleChar\", ['A', 'b', 'C'], 'SingleChar.A'),\n            (\"AllEqual\", ['AB', 'CD', 'EF'], 'AllEqual.AB'),\n            (\"ZeroStrength\", ['abcd', 'efgh', 'ijkl'], 'ZeroStrength.abcd'),\n            (\"NegativeStrength\", ['abcDEF', 'ABCdef', 'aBcDeF'], 'NegativeStrength.ABCdef'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                if expected == IndexError:\n                    with self.assertRaises(IndexError):\n                        Strongest_Extension(class_name, extensions)\n                else:\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "F\n======================================================================\nFAIL: test_strongest_extension (__main__.TestStrongestExtension.test_strongest_extension) (class_name='NegativeStrength', extensions=['abcDEF', 'ABCdef', 'aBcDeF'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 37, in test_strongest_extension\n    self.assertEqual(result, expected)\nAssertionError: 'NegativeStrength.abcDEF' != 'NegativeStrength.ABCdef'\n- NegativeStrength.abcDEF\n?                  ^^^^^^\n+ NegativeStrength.ABCdef\n?                  ^^^^^^\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      10      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            10      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], IndexError),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.shortEXT'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n            (\"VeryLongExtensionName\", ['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'], 'VeryLongExtensionName.ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n            (\"MixedCase\", ['aBcDeF', 'AbCdEf', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            (\"AllLower\", ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            (\"AllUpper\", ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            (\"SpecialChars\", ['A-B-C', 'a-b-c', '123'], 'SpecialChars.A-B-C'),\n            (\"SingleChar\", ['A', 'b', 'C'], 'SingleChar.A'),\n            (\"AllEqual\", ['AB', 'CD', 'EF'], 'AllEqual.AB'),\n            (\"ZeroStrength\", ['abcd', 'efgh', 'ijkl'], 'ZeroStrength.abcd'),\n            (\"NegativeStrength\", ['abcDEF', 'ABCdef', 'aBcDeF'], 'NegativeStrength.abcDEF'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                if expected == IndexError:\n                    with self.assertRaises(IndexError):\n                        Strongest_Extension(class_name, extensions)\n                else:\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      10      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            10      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], IndexError),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.shortEXT'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n            (\"VeryLongExtensionName\", ['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'], 'VeryLongExtensionName.ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n            (\"MixedCase\", ['aBcDeF', 'AbCdEf', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            (\"AllLower\", ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            (\"AllUpper\", ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            (\"SpecialChars\", ['A-B-C', 'a-b-c', '123'], 'SpecialChars.A-B-C'),\n            (\"SingleChar\", ['A', 'b', 'C'], 'SingleChar.A'),\n            (\"AllEqual\", ['AB', 'CD', 'EF'], 'AllEqual.AB'),\n            (\"ZeroStrength\", ['abcd', 'efgh', 'ijkl'], 'ZeroStrength.abcd'),\n            (\"NegativeStrength\", ['abcDEF', 'ABCdef', 'aBcDeF'], 'NegativeStrength.abcDEF'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                if expected == IndexError:\n                    with self.assertRaises(IndexError):\n                        Strongest_Extension(class_name, extensions)\n                else:\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], 'Empty.'),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.VeryLongExtension'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                result = Strongest_Extension(class_name, extensions)\n                self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], IndexError),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.shortEXT'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n            (\"VeryLongExtensionName\", ['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'], 'VeryLongExtensionName.ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n            (\"MixedCase\", ['aBcDeF', 'AbCdEf', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            (\"AllLower\", ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            (\"AllUpper\", ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            (\"SpecialChars\", ['A-B-C', 'a-b-c', '123'], 'SpecialChars.A-B-C'),\n            (\"SingleChar\", ['A', 'b', 'C'], 'SingleChar.A'),\n            (\"AllEqual\", ['AB', 'CD', 'EF'], 'AllEqual.AB'),\n            (\"ZeroStrength\", ['abcd', 'efgh', 'ijkl'], 'ZeroStrength.abcd'),\n            (\"NegativeStrength\", ['abcDEF', 'ABCdef', 'aBcDeF'], 'NegativeStrength.abcDEF'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                if expected == IndexError:\n                    with self.assertRaises(IndexError):\n                        Strongest_Extension(class_name, extensions)\n                else:\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import Strongest_Extension\n\nclass TestStrongestExtension(unittest.TestCase):\n    def test_strongest_extension(self):\n        test_cases = [\n            (\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'Slices.SErviNGSliCes'),\n            (\"my_class\", ['AA', 'Be', 'CC'], 'my_class.AA'),\n            (\"Class\", ['a', 'b', 'c'], 'Class.a'),\n            (\"Test\", ['ABC', 'abc', 'ABc'], 'Test.ABC'),\n            (\"Empty\", [], IndexError),\n            (\"Mixed\", ['AbC', 'aBc', 'ABC'], 'Mixed.ABC'),\n            (\"Numbers\", ['123', 'ABC123', '123ABC'], 'Numbers.ABC123'),\n            (\"Special\", ['A!B@C#', 'a$b%c^', '123'], 'Special.A!B@C#'),\n            (\"LongName\", ['shortEXT', 'VeryLongExtension'], 'LongName.shortEXT'),\n            (\"EqualStrength\", ['AA', 'BB', 'CC'], 'EqualStrength.AA'),\n            (\"VeryLongExtensionName\", ['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'], 'VeryLongExtensionName.ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n            (\"MixedCase\", ['aBcDeF', 'AbCdEf', 'ABCDEF'], 'MixedCase.ABCDEF'),\n            (\"AllLower\", ['abc', 'def', 'ghi'], 'AllLower.abc'),\n            (\"AllUpper\", ['ABC', 'DEF', 'GHI'], 'AllUpper.ABC'),\n            (\"SpecialChars\", ['A-B-C', 'a-b-c', '123'], 'SpecialChars.A-B-C'),\n            (\"SingleChar\", ['A', 'b', 'C'], 'SingleChar.A'),\n            (\"AllEqual\", ['AB', 'CD', 'EF'], 'AllEqual.AB'),\n            (\"ZeroStrength\", ['abcd', 'efgh', 'ijkl'], 'ZeroStrength.abcd'),\n            (\"NegativeStrength\", ['abcDEF', 'ABCdef', 'aBcDeF'], 'NegativeStrength.abcDEF'),\n        ]\n\n        for class_name, extensions, expected in test_cases:\n            with self.subTest(class_name=class_name, extensions=extensions):\n                if expected == IndexError:\n                    with self.assertRaises(IndexError):\n                        Strongest_Extension(class_name, extensions)\n                else:\n                    result = Strongest_Extension(class_name, extensions)\n                    self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}