{
    "task_id": "HumanEval/160",
    "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
    "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "do_algebra",
    "testbase": "from method import do_algebra\ndef check(candidate):\n    assert candidate(['//', '*'], [7, 3, 4]\n        ) == 8, 'This prints if this assert fails 1 (good for debugging!)'\n\n\nif __name__ == '__main__':\n    check(do_algebra)\n",
    "coverage": 100.0,
    "coverage_testbase": 100.0,
    "num_iterations_used": 0,
    "msg_trace": {
        "1": {
            "generated_test_script": "from method import do_algebra\ndef check(candidate):\n    assert candidate(['//', '*'], [7, 3, 4]\n        ) == 8, 'This prints if this assert fails 1 (good for debugging!)'\n\n\nif __name__ == '__main__':\n    check(do_algebra)\n",
            "coverage": 100.0,
            "exist_error": false,
            "executed_output": ""
        }
    },
    "best_score_generated_test_script": "from method import do_algebra\ndef check(candidate):\n    assert candidate(['//', '*'], [7, 3, 4]\n        ) == 8, 'This prints if this assert fails 1 (good for debugging!)'\n\n\nif __name__ == '__main__':\n    check(do_algebra)\n",
    "first_generated_test_script": "from method import do_algebra\ndef check(candidate):\n    assert candidate(['//', '*'], [7, 3, 4]\n        ) == 8, 'This prints if this assert fails 1 (good for debugging!)'\n\n\nif __name__ == '__main__':\n    check(do_algebra)\n",
    "not_error_best_generated_test_script": "from method import do_algebra\ndef check(candidate):\n    assert candidate(['//', '*'], [7, 3, 4]\n        ) == 8, 'This prints if this assert fails 1 (good for debugging!)'\n\n\nif __name__ == '__main__':\n    check(do_algebra)\n",
    "filtered_generated_test_script": "from method import do_algebra\ndef check(candidate):\n    assert candidate(['//', '*'], [7, 3, 4]\n        ) == 8, 'This prints if this assert fails 1 (good for debugging!)'\n\n\nif __name__ == '__main__':\n    check(do_algebra)\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}