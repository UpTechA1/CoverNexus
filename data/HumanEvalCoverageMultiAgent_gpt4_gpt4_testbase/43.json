{
    "task_id": "HumanEval/43",
    "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
    "entry_point": "pairs_sum_to_zero",
    "testbase": "from method import pairs_sum_to_zero\ndef check(candidate):\n    assert candidate([1]) == False\n\n\nif __name__ == '__main__':\n    check(pairs_sum_to_zero)\n",
    "coverage": 100.0,
    "coverage_testbase": 67.0,
    "num_iterations_used": 4,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], True),\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False)\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "F\n======================================================================\nFAIL: test_pairs_sum_to_zero (__main__.TestPairsSumToZero.test_pairs_sum_to_zero) (input_list=[10, 20, -30])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 28, in test_pairs_sum_to_zero\n    self.assertEqual(pairs_sum_to_zero(input_list), expected)\nAssertionError: False != True\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       6      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                             6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], True),\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False)\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "F\n======================================================================\nFAIL: test_pairs_sum_to_zero (__main__.TestPairsSumToZero.test_pairs_sum_to_zero) (input_list=[10, 20, -30])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 28, in test_pairs_sum_to_zero\n    self.assertEqual(pairs_sum_to_zero(input_list), expected)\nAssertionError: False != True\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       6      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                             6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], True),  # Corrected test case\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False)\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "F\n======================================================================\nFAIL: test_pairs_sum_to_zero (__main__.TestPairsSumToZero.test_pairs_sum_to_zero) (input_list=[10, 20, -30])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 28, in test_pairs_sum_to_zero\n    self.assertEqual(pairs_sum_to_zero(input_list), expected)\nAssertionError: False != True\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       6      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                             6      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], False),  # Corrected test case\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False),\n            ([-1, -2, -3, 4, 5, 6], False),  # Additional complex case\n            ([0, -1, 1, -2, 2, 3, -3], True),  # Multiple zero pairs\n            ([10, 20, 30, 40], False)  # No pairs sum to zero\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       6      0   100%\n---------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                             6      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], False),  # Corrected test case\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False),\n            ([-1, -2, -3, 4, 5, 6], False),  # Additional complex case\n            ([0, -1, 1, -2, 2, 3, -3], True),  # Multiple zero pairs\n            ([10, 20, 30, 40], False)  # No pairs sum to zero\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], True),\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False)\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], False),  # Corrected test case\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False),\n            ([-1, -2, -3, 4, 5, 6], False),  # Additional complex case\n            ([0, -1, 1, -2, 2, 3, -3], True),  # Multiple zero pairs\n            ([10, 20, 30, 40], False)  # No pairs sum to zero\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import pairs_sum_to_zero\n\nclass TestPairsSumToZero(unittest.TestCase):\n    def test_pairs_sum_to_zero(self):\n        test_cases = [\n            ([1, 3, 5, 0], False),\n            ([1, 3, -2, 1], False),\n            ([1, 2, 3, 7], False),\n            ([2, 4, -5, 3, 5, 7], True),\n            ([1], False),\n            ([0, 0], True),\n            ([-3, 1, 2, 3, 0], True),\n            ([], False),\n            ([-1, 1], True),\n            ([100, -100], True),\n            ([100, 200, 300, -100], True),\n            ([10, -10, 20], True),\n            ([10, 20, -30], False),  # Corrected test case\n            ([1, 2, 3, 4, 5, -5], True),\n            ([1, 2, 3, 4, 5, 6], False),\n            ([-1, -2, -3, 4, 5, 6], False),  # Additional complex case\n            ([0, -1, 1, -2, 2, 3, -3], True),  # Multiple zero pairs\n            ([10, 20, 30, 40], False)  # No pairs sum to zero\n        ]\n\n        for input_list, expected in test_cases:\n            with self.subTest(input_list=input_list):\n                self.assertEqual(pairs_sum_to_zero(input_list), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}