{
    "task_id": "HumanEval/49",
    "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
    "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
    "entry_point": "modp",
    "testbase": "from method import modp\ndef check(candidate):\n    assert candidate(0, 101) == 1\n\n\nif __name__ == '__main__':\n    check(modp)\n",
    "coverage": 100.0,
    "coverage_testbase": 80.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_modp(self):\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n            (1, 2, 0),\n            (10, 1024, 1),\n            (50, 97, 92),\n            (1000000, 1000000007, 911384169),\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        self.assertEqual(modp(0, 1), 1)\n        self.assertEqual(modp(1, 1), 0)\n        \n    def test_large_numbers(self):\n        self.assertEqual(modp(10**6, 10**9+7), 284119703)\n        \n    def test_type_errors(self):\n        with self.assertRaises(TypeError):\n            modp(\"3\", 5)\n        with self.assertRaises(TypeError):\n            modp(3, \"5\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": ".FFFF.\n======================================================================\nFAIL: test_large_numbers (__main__.TestModp.test_large_numbers)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 28, in test_large_numbers\n    self.assertEqual(modp(10**6, 10**9+7), 284119703)\nAssertionError: 235042059 != 284119703\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=10, p=1024)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 0 != 1\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=50, p=97)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 4 != 92\n\n======================================================================\nFAIL: test_modp (__main__.TestModp.test_modp) (n=1000000, p=1000000007)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_modp\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 235042059 != 911384169\n\n----------------------------------------------------------------------\nRan 4 tests in 0.150s\n\nFAILED (failures=4)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_modp(self):\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n            (1, 2, 0),\n            (10, 1024, 0),\n            (50, 97, 4),\n            (1000000, 1000000007, 235042059),\n            (10**6, 10**9+7, 235042059),\n            (2, 3, 1),\n            (5, 7, 4),\n            (20, 31, 9),\n            (100, 997, 358),\n            (1000, 1009, 934),\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 1, 1),\n            (1, 1, 0),\n            (0, 2, 1),\n            (1, 2, 0),\n            (10**9, 2, 0),\n            (10**9, 3, 1),\n        ]\n        \n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_large_numbers(self):\n        large_number_cases = [\n            (10**6, 10**9+7, 235042059),\n            (10**7, 10**9+9, 810884101),\n            (10**8, 2**31-1, 1103891456),\n        ]\n        \n        for n, p, expected in large_number_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_type_errors(self):\n        with self.assertRaises(TypeError):\n            modp(\"3\", 5)\n        with self.assertRaises(TypeError):\n            modp(3, \"5\")\n        with self.assertRaises(TypeError):\n            modp(3.5, 5)\n        with self.assertRaises(TypeError):\n            modp(3, 5.5)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "The process took too long to complete and was terminated, please use small number for input or check the test script.",
            "coverage": 0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_normal_cases(self):\n        test_cases = [\n            (3, 5, 3),\n            (7, 11, 7),\n            (10, 13, 9),\n            (15, 17, 15),\n            (20, 23, 17),\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 5, 1),\n            (1, 2, 0),\n            (0, 1, 0),\n            (1, 1, 0),\n            (2, 3, 1),\n        ]\n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_boundary_cases(self):\n        boundary_cases = [\n            (7, 8, 0),\n            (8, 9, 1),\n            (15, 16, 15),\n            (16, 17, 1),\n            (31, 32, 31),\n            (32, 33, 1),\n        ]\n        for n, p, expected in boundary_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_medium_sized_numbers(self):\n        medium_cases = [\n            (50, 97, 4),\n            (100, 101, 1),\n            (200, 211, 189),\n            (500, 503, 483),\n            (1000, 1009, 934),\n        ]\n        for n, p, expected in medium_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_type_errors(self):\n        with self.assertRaises(TypeError):\n            modp(\"3\", 5)\n        with self.assertRaises(TypeError):\n            modp(3, \"5\")\n        with self.assertRaises(TypeError):\n            modp(3.5, 5)\n        with self.assertRaises(TypeError):\n            modp(3, 5.5)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "FFFFFFFFFFFF\n======================================================================\nFAIL: test_boundary_cases (__main__.TestModp.test_boundary_cases) (n=8, p=9)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 41, in test_boundary_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 4 != 1\n\n======================================================================\nFAIL: test_boundary_cases (__main__.TestModp.test_boundary_cases) (n=15, p=16)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 41, in test_boundary_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 0 != 15\n\n======================================================================\nFAIL: test_boundary_cases (__main__.TestModp.test_boundary_cases) (n=31, p=32)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 41, in test_boundary_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 0 != 31\n\n======================================================================\nFAIL: test_boundary_cases (__main__.TestModp.test_boundary_cases) (n=32, p=33)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 41, in test_boundary_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 4 != 1\n\n======================================================================\nFAIL: test_edge_cases (__main__.TestModp.test_edge_cases) (n=0, p=1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 28, in test_edge_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 1 != 0\n\n======================================================================\nFAIL: test_medium_sized_numbers (__main__.TestModp.test_medium_sized_numbers) (n=200, p=211)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 53, in test_medium_sized_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 34 != 189\n\n======================================================================\nFAIL: test_medium_sized_numbers (__main__.TestModp.test_medium_sized_numbers) (n=500, p=503)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 53, in test_medium_sized_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 126 != 483\n\n======================================================================\nFAIL: test_medium_sized_numbers (__main__.TestModp.test_medium_sized_numbers) (n=1000, p=1009)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 53, in test_medium_sized_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 942 != 934\n\n======================================================================\nFAIL: test_normal_cases (__main__.TestModp.test_normal_cases) (n=10, p=13)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 16, in test_normal_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 10 != 9\n\n======================================================================\nFAIL: test_normal_cases (__main__.TestModp.test_normal_cases) (n=15, p=17)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 16, in test_normal_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 9 != 15\n\n======================================================================\nFAIL: test_normal_cases (__main__.TestModp.test_normal_cases) (n=20, p=23)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 16, in test_normal_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 6 != 17\n\n======================================================================\nFAIL: test_type_errors (__main__.TestModp.test_type_errors)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 62, in test_type_errors\n    with self.assertRaises(TypeError):\nAssertionError: TypeError not raised\n\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nFAILED (failures=12)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_normal_cases(self):\n        test_cases = [\n            (3, 5, 3),\n            (7, 11, 7),\n            (10, 13, 10),\n            (15, 17, 9),\n            (20, 23, 6),\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 5, 1),\n            (1, 2, 0),\n            (0, 1, 0),\n            (1, 1, 0),\n            (2, 3, 1),\n        ]\n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_boundary_cases(self):\n        boundary_cases = [\n            (7, 8, 0),\n            (8, 9, 4),\n            (15, 16, 0),\n            (16, 17, 1),\n            (31, 32, 0),\n            (32, 33, 4),\n        ]\n        for n, p, expected in boundary_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_medium_sized_numbers(self):\n        medium_cases = [\n            (50, 97, 4),\n            (100, 101, 1),\n            (200, 211, 34),\n            (500, 503, 126),\n            (1000, 1009, 942),\n        ]\n        for n, p, expected in medium_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_large_numbers(self):\n        large_cases = [\n            (10**6, 10**9+7, 849036174),\n            (10**9, 10**9+9, 166374059),\n        ]\n        for n, p, expected in large_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_negative_n(self):\n        with self.subTest(n=-5, p=7):\n            self.assertEqual(modp(-5, 7), 1)\n\n    def test_p_equals_one(self):\n        with self.subTest(n=10, p=1):\n            self.assertEqual(modp(10, 1), 0)\n\n    def test_type_errors(self):\n        invalid_inputs = [\n            (1+2j, 5),\n            ([1, 2, 3], 5),\n            ({\"a\": 1}, 5),\n            (3, 1+2j),\n            (3, [1, 2, 3]),\n            (3, {\"a\": 1}),\n        ]\n        for n, p in invalid_inputs:\n            with self.subTest(n=n, p=p):\n                with self.assertRaises(TypeError):\n                    modp(n, p)\n\n    def test_docstring_examples(self):\n        examples = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n        ]\n        for n, p, expected in examples:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "The process took too long to complete and was terminated, please use small number for input or check the test script.",
            "coverage": 0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_normal_cases(self):\n        test_cases = [\n            (3, 5, 3),\n            (7, 11, 7),\n            (10, 13, 10),\n            (15, 17, 9),\n            (20, 23, 6),\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 5, 1),\n            (1, 2, 0),\n            (0, 1, 0),\n            (1, 1, 0),\n            (2, 3, 1),\n        ]\n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_boundary_cases(self):\n        boundary_cases = [\n            (7, 8, 0),\n            (8, 9, 4),\n            (15, 16, 0),\n            (16, 17, 1),\n            (31, 32, 0),\n            (32, 33, 4),\n        ]\n        for n, p, expected in boundary_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_medium_sized_numbers(self):\n        medium_cases = [\n            (50, 97, 4),\n            (100, 101, 1),\n            (200, 211, 34),\n            (300, 307, 256),\n            (400, 401, 1),\n        ]\n        for n, p, expected in medium_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_larger_numbers(self):\n        large_cases = [\n            (1000, 1009, 942),\n            (2000, 2003, 1910),\n            (5000, 5003, 1798),\n        ]\n        for n, p, expected in large_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_negative_n(self):\n        with self.subTest(n=-5, p=7):\n            self.assertEqual(modp(-5, 7), 1)\n\n    def test_p_equals_one(self):\n        with self.subTest(n=10, p=1):\n            self.assertEqual(modp(10, 1), 0)\n\n    def test_type_errors(self):\n        invalid_inputs = [\n            (1.5, 5),\n            (\"3\", 5),\n            (3, 1.5),\n            (3, \"5\"),\n        ]\n        for n, p in invalid_inputs:\n            with self.subTest(n=n, p=p):\n                with self.assertRaises(TypeError):\n                    modp(n, p)\n\n    def test_docstring_examples(self):\n        examples = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n        ]\n        for n, p, expected in examples:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
            "executed_output": "..FFFF...F\n======================================================================\nFAIL: test_edge_cases (__main__.TestModp.test_edge_cases) (n=0, p=1)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 28, in test_edge_cases\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 1 != 0\n\n======================================================================\nFAIL: test_larger_numbers (__main__.TestModp.test_larger_numbers) (n=2000, p=2003)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 63, in test_larger_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 501 != 1910\n\n======================================================================\nFAIL: test_larger_numbers (__main__.TestModp.test_larger_numbers) (n=5000, p=5003)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 63, in test_larger_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 1251 != 1798\n\n======================================================================\nFAIL: test_medium_sized_numbers (__main__.TestModp.test_medium_sized_numbers) (n=300, p=307)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 53, in test_medium_sized_numbers\n    self.assertEqual(modp(n, p), expected)\nAssertionError: 24 != 256\n\n======================================================================\nFAIL: test_type_errors (__main__.TestModp.test_type_errors) (n=3, p=1.5)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 82, in test_type_errors\n    with self.assertRaises(TypeError):\nAssertionError: TypeError not raised\n\n----------------------------------------------------------------------\nRan 9 tests in 0.002s\n\nFAILED (failures=5)\n\nName                                                                                            Stmts   Miss  Cover   Missing\n-----------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       5      0   100%\n-----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                               5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_normal_cases(self):\n        test_cases = [\n            (3, 5, 3),\n            (7, 11, 7),\n            (10, 13, 10),\n            (15, 17, 9),\n            (20, 23, 6),\n        ]\n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        edge_cases = [\n            (0, 5, 1),\n            (1, 2, 0),\n            (0, 1, 0),\n            (1, 1, 0),\n            (2, 3, 1),\n        ]\n        for n, p, expected in edge_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_boundary_cases(self):\n        boundary_cases = [\n            (7, 8, 0),\n            (8, 9, 4),\n            (15, 16, 0),\n            (16, 17, 1),\n            (31, 32, 0),\n            (32, 33, 4),\n        ]\n        for n, p, expected in boundary_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_medium_sized_numbers(self):\n        medium_cases = [\n            (50, 97, 4),\n            (100, 101, 1),\n            (200, 211, 34),\n            (300, 307, 256),\n            (400, 401, 1),\n        ]\n        for n, p, expected in medium_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_larger_numbers(self):\n        large_cases = [\n            (1000, 1009, 942),\n            (2000, 2003, 1910),\n            (5000, 5003, 1798),\n        ]\n        for n, p, expected in large_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_negative_n(self):\n        with self.subTest(n=-5, p=7):\n            self.assertEqual(modp(-5, 7), 1)\n\n    def test_p_equals_one(self):\n        with self.subTest(n=10, p=1):\n            self.assertEqual(modp(10, 1), 0)\n\n    def test_type_errors(self):\n        invalid_inputs = [\n            (1.5, 5),\n            (\"3\", 5),\n            (3, 1.5),\n            (3, \"5\"),\n        ]\n        for n, p in invalid_inputs:\n            with self.subTest(n=n, p=p):\n                with self.assertRaises(TypeError):\n                    modp(n, p)\n\n    def test_docstring_examples(self):\n        examples = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n        ]\n        for n, p, expected in examples:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\nif __name__ == '__main__':\n    unittest.main()",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import modp\n\nclass TestModp(unittest.TestCase):\n    def test_modp(self):\n        test_cases = [\n            (3, 5, 3),\n            (1101, 101, 2),\n            (0, 101, 1),\n            (3, 11, 8),\n            (100, 101, 1),\n            (1, 2, 0),\n            (10, 1024, 1),\n            (50, 97, 92),\n            (1000000, 1000000007, 911384169),\n        ]\n        \n        for n, p, expected in test_cases:\n            with self.subTest(n=n, p=p):\n                self.assertEqual(modp(n, p), expected)\n\n    def test_edge_cases(self):\n        self.assertEqual(modp(0, 1), 1)\n        self.assertEqual(modp(1, 1), 0)\n        \n    def test_large_numbers(self):\n        self.assertEqual(modp(10**6, 10**9+7), 284119703)\n        \n    def test_type_errors(self):\n        with self.assertRaises(TypeError):\n            modp(\"3\", 5)\n        with self.assertRaises(TypeError):\n            modp(3, \"5\")\n\nif __name__ == '__main__':\n    unittest.main()",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "exist_not_error": false,
    "filtered_score": 0,
    "use_filter": false
}