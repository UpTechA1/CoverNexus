{
    "task_id": "HumanEval/29",
    "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
    "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
    "entry_point": "filter_by_prefix",
    "testbase": "from method import filter_by_prefix\nMETADATA = {'author': 'jt', 'dataset': 'test'}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\n\nif __name__ == '__main__':\n    check(filter_by_prefix)\n",
    "coverage": 100.0,
    "coverage_testbase": 100.0,
    "num_iterations_used": 0,
    "msg_trace": {
        "1": {
            "generated_test_script": "from method import filter_by_prefix\nMETADATA = {'author': 'jt', 'dataset': 'test'}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\n\nif __name__ == '__main__':\n    check(filter_by_prefix)\n",
            "coverage": 100,
            "exist_error": false,
            "executed_output": ""
        }
    },
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "best_score_generated_test_script": "from method import filter_by_prefix\nMETADATA = {'author': 'jt', 'dataset': 'test'}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\n\nif __name__ == '__main__':\n    check(filter_by_prefix)\n",
    "first_generated_test_script": "from method import filter_by_prefix\nMETADATA = {'author': 'jt', 'dataset': 'test'}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\n\nif __name__ == '__main__':\n    check(filter_by_prefix)\n",
    "not_error_best_generated_test_script": "from method import filter_by_prefix\nMETADATA = {'author': 'jt', 'dataset': 'test'}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\n\nif __name__ == '__main__':\n    check(filter_by_prefix)\n",
    "filtered_generated_test_script": "from method import filter_by_prefix\nMETADATA = {'author': 'jt', 'dataset': 'test'}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\n\nif __name__ == '__main__':\n    check(filter_by_prefix)\n",
    "filtered_score": 100.0,
    "use_filter": false,
    "exist_not_error": true
}