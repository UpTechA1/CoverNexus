{
    "task_id": "HumanEval/33",
    "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
    "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
    "entry_point": "sort_third",
    "testbase": "from method import sort_third\ndef check(candidate):\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8,\n        3, 5])\n\n\nif __name__ == '__main__':\n    check(sort_third)\n",
    "coverage": 100.0,
    "coverage_testbase": 100.0,
    "num_iterations_used": 0,
    "msg_trace": {
        "1": {
            "generated_test_script": "from method import sort_third\ndef check(candidate):\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8,\n        3, 5])\n\n\nif __name__ == '__main__':\n    check(sort_third)\n",
            "coverage": 100.0,
            "exist_error": false,
            "executed_output": ""
        }
    },
    "best_score_generated_test_script": "from method import sort_third\ndef check(candidate):\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8,\n        3, 5])\n\n\nif __name__ == '__main__':\n    check(sort_third)\n",
    "first_generated_test_script": "from method import sort_third\ndef check(candidate):\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8,\n        3, 5])\n\n\nif __name__ == '__main__':\n    check(sort_third)\n",
    "not_error_best_generated_test_script": "from method import sort_third\ndef check(candidate):\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8,\n        3, 5])\n\n\nif __name__ == '__main__':\n    check(sort_third)\n",
    "filtered_generated_test_script": "from method import sort_third\ndef check(candidate):\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8,\n        3, 5])\n\n\nif __name__ == '__main__':\n    check(sort_third)\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}