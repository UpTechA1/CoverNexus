{
    "task_id": "HumanEval/145",
    "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
    "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "order_by_points",
    "testbase": "from method import order_by_points\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\n\ndef check(candidate):\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n\nif __name__ == '__main__':\n    check(order_by_points)\n",
    "coverage": 100.0,
    "coverage_testbase": 12.0,
    "num_iterations_used": 2,
    "msg_trace": {
        "1": {
            "generated_test_script": "import unittest\nfrom codebase import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n\n    def test_basic_functionality_1(self):\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, \n            1, -12, 11])\n\n    def test_empty_list_1(self):\n        self.assertEqual(order_by_points([]), [])\n\n    def test_single_element_1(self):\n        self.assertEqual(order_by_points([5]), [5])\n\n    def test_all_positive_1(self):\n        self.assertEqual(order_by_points([10, 2, 30, 4]), [10, 2, 4, 30])\n\n    def test_all_negative_1(self):\n        self.assertEqual(order_by_points([-10, -2, -30, -4]), [-2, -10, -4,\n            -30])\n\n    def test_mixed_signs_1(self):\n        self.assertEqual(order_by_points([100, -100, 50, -50]), [-100, 100,\n            -50, 50])\n\n    def test_same_digit_sum_1(self):\n        self.assertEqual(order_by_points([11, 20, 3, 12]), [3, 11, 12, 20])\n\n    def test_large_numbers_1(self):\n        self.assertEqual(order_by_points([1000, 2000, 3000]), [1000, 2000, \n            3000])\n\n    def test_zero_1(self):\n        self.assertEqual(order_by_points([0, 10, -10]), [0, 10, -10])\n\n    def test_multiple_digit_numbers_1(self):\n        self.assertEqual(order_by_points([111, 222, 333, 444]), [111, 222, \n            333, 444])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FF...F.F.F\n======================================================================\nFAIL: test_all_negative_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_all_negative_1\n    self.assertEqual(order_by_points([-10, -2, -30, -4]), [-2, -10, -4,\nAssertionError: Lists differ: [-4, -30, -2, -10] != [-2, -10, -4, -30]\n\nFirst differing element 0:\n-4\n-2\n\n- [-4, -30, -2, -10]\n+ [-2, -10, -4, -30]\n\n======================================================================\nFAIL: test_all_positive_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 18, in test_all_positive_1\n    self.assertEqual(order_by_points([10, 2, 30, 4]), [10, 2, 4, 30])\nAssertionError: Lists differ: [10, 2, 30, 4] != [10, 2, 4, 30]\n\nFirst differing element 2:\n30\n4\n\n- [10, 2, 30, 4]\n?           ---\n\n+ [10, 2, 4, 30]\n?         +++\n\n\n======================================================================\nFAIL: test_mixed_signs_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 25, in test_mixed_signs_1\n    self.assertEqual(order_by_points([100, -100, 50, -50]), [-100, 100,\nAssertionError: Lists differ: [-50, -100, 100, 50] != [-100, 100, -50, 50]\n\nFirst differing element 0:\n-50\n-100\n\n- [-50, -100, 100, 50]\n?  -----\n\n+ [-100, 100, -50, 50]\n?             +++++\n\n\n======================================================================\nFAIL: test_same_digit_sum_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 29, in test_same_digit_sum_1\n    self.assertEqual(order_by_points([11, 20, 3, 12]), [3, 11, 12, 20])\nAssertionError: Lists differ: [11, 20, 3, 12] != [3, 11, 12, 20]\n\nFirst differing element 0:\n11\n3\n\n- [11, 20, 3, 12]\n+ [3, 11, 12, 20]\n\n======================================================================\nFAIL: test_zero_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 36, in test_zero_1\n    self.assertEqual(order_by_points([0, 10, -10]), [0, 10, -10])\nAssertionError: Lists differ: [-10, 0, 10] != [0, 10, -10]\n\nFirst differing element 0:\n-10\n0\n\n- [-10, 0, 10]\n+ [0, 10, -10]\n\n----------------------------------------------------------------------\nRan 10 tests in 0.002s\n\nFAILED (failures=5)\n\nName                                                                                           Stmts   Miss  Cover   Missing\n----------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       8      0   100%\n----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              8      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "import unittest\nfrom codebase import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n\n    def test_basic_functionality_1_1(self):\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, \n            1, -12, 11])\n\n    def test_empty_list_1_1(self):\n        self.assertEqual(order_by_points([]), [])\n\n    def test_single_element_1_1(self):\n        self.assertEqual(order_by_points([5]), [5])\n\n    def test_all_positive_1_1(self):\n        self.assertEqual(order_by_points([10, 2, 30, 4]), [2, 4, 10, 30])\n\n    def test_all_negative_1_1(self):\n        self.assertEqual(order_by_points([-10, -2, -30, -4]), [-2, -4, -10,\n            -30])\n\n    def test_mixed_signs_1_1(self):\n        self.assertEqual(order_by_points([100, -100, 50, -50]), [-100, 100,\n            -50, 50])\n\n    def test_same_digit_sum_1_1(self):\n        self.assertEqual(order_by_points([11, 20, 3, 12]), [3, 11, 20, 12])\n\n    def test_large_numbers_1_1(self):\n        self.assertEqual(order_by_points([1000, 2000, 3000]), [1000, 2000, \n            3000])\n\n    def test_zero_1_1(self):\n        self.assertEqual(order_by_points([0, 10, -10]), [0, -10, 10])\n\n    def test_multiple_digit_numbers_1_1(self):\n        self.assertEqual(order_by_points([111, 222, 333, 444]), [111, 222, \n            333, 444])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FF...F.F.F\n======================================================================\nFAIL: test_all_negative_1_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 21, in test_all_negative_1_1\n    self.assertEqual(order_by_points([-10, -2, -30, -4]), [-2, -4, -10,\nAssertionError: Lists differ: [-4, -30, -2, -10] != [-2, -4, -10, -30]\n\nFirst differing element 0:\n-4\n-2\n\n- [-4, -30, -2, -10]\n+ [-2, -4, -10, -30]\n\n======================================================================\nFAIL: test_all_positive_1_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 18, in test_all_positive_1_1\n    self.assertEqual(order_by_points([10, 2, 30, 4]), [2, 4, 10, 30])\nAssertionError: Lists differ: [10, 2, 30, 4] != [2, 4, 10, 30]\n\nFirst differing element 0:\n10\n2\n\n- [10, 2, 30, 4]\n+ [2, 4, 10, 30]\n\n======================================================================\nFAIL: test_mixed_signs_1_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 25, in test_mixed_signs_1_1\n    self.assertEqual(order_by_points([100, -100, 50, -50]), [-100, 100,\nAssertionError: Lists differ: [-50, -100, 100, 50] != [-100, 100, -50, 50]\n\nFirst differing element 0:\n-50\n-100\n\n- [-50, -100, 100, 50]\n?  -----\n\n+ [-100, 100, -50, 50]\n?             +++++\n\n\n======================================================================\nFAIL: test_same_digit_sum_1_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 29, in test_same_digit_sum_1_1\n    self.assertEqual(order_by_points([11, 20, 3, 12]), [3, 11, 20, 12])\nAssertionError: Lists differ: [11, 20, 3, 12] != [3, 11, 20, 12]\n\nFirst differing element 0:\n11\n3\n\n- [11, 20, 3, 12]\n?          ---\n\n+ [3, 11, 20, 12]\n?  +++\n\n\n======================================================================\nFAIL: test_zero_1_1 (__main__.TestOrderByPoints)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/generated_test.py\", line 36, in test_zero_1_1\n    self.assertEqual(order_by_points([0, 10, -10]), [0, -10, 10])\nAssertionError: Lists differ: [-10, 0, 10] != [0, -10, 10]\n\nFirst differing element 0:\n-10\n0\n\n- [-10, 0, 10]\n?       ---\n\n+ [0, -10, 10]\n?  +++\n\n\n----------------------------------------------------------------------\nRan 10 tests in 0.002s\n\nFAILED (failures=5)\n\nName                                                                                           Stmts   Miss  Cover   Missing\n----------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_claude/codebase.py       8      0   100%\n----------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                              8      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "best_score_generated_test_script": "import unittest\nfrom codebase import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n\n    def test_basic_functionality_1_1(self):\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, \n            1, -12, 11])\n\n    def test_empty_list_1_1(self):\n        self.assertEqual(order_by_points([]), [])\n\n    def test_single_element_1_1(self):\n        self.assertEqual(order_by_points([5]), [5])\n\n    def test_all_positive_1_1(self):\n        self.assertEqual(order_by_points([10, 2, 30, 4]), [2, 4, 10, 30])\n\n    def test_all_negative_1_1(self):\n        self.assertEqual(order_by_points([-10, -2, -30, -4]), [-2, -4, -10,\n            -30])\n\n    def test_mixed_signs_1_1(self):\n        self.assertEqual(order_by_points([100, -100, 50, -50]), [-100, 100,\n            -50, 50])\n\n    def test_same_digit_sum_1_1(self):\n        self.assertEqual(order_by_points([11, 20, 3, 12]), [3, 11, 20, 12])\n\n    def test_large_numbers_1_1(self):\n        self.assertEqual(order_by_points([1000, 2000, 3000]), [1000, 2000, \n            3000])\n\n    def test_zero_1_1(self):\n        self.assertEqual(order_by_points([0, 10, -10]), [0, -10, 10])\n\n    def test_multiple_digit_numbers_1_1(self):\n        self.assertEqual(order_by_points([111, 222, 333, 444]), [111, 222, \n            333, 444])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "import unittest\nfrom codebase import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n\n    def test_basic_functionality_1(self):\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, \n            1, -12, 11])\n\n    def test_empty_list_1(self):\n        self.assertEqual(order_by_points([]), [])\n\n    def test_single_element_1(self):\n        self.assertEqual(order_by_points([5]), [5])\n\n    def test_all_positive_1(self):\n        self.assertEqual(order_by_points([10, 2, 30, 4]), [10, 2, 4, 30])\n\n    def test_all_negative_1(self):\n        self.assertEqual(order_by_points([-10, -2, -30, -4]), [-2, -10, -4,\n            -30])\n\n    def test_mixed_signs_1(self):\n        self.assertEqual(order_by_points([100, -100, 50, -50]), [-100, 100,\n            -50, 50])\n\n    def test_same_digit_sum_1(self):\n        self.assertEqual(order_by_points([11, 20, 3, 12]), [3, 11, 12, 20])\n\n    def test_large_numbers_1(self):\n        self.assertEqual(order_by_points([1000, 2000, 3000]), [1000, 2000, \n            3000])\n\n    def test_zero_1(self):\n        self.assertEqual(order_by_points([0, 10, -10]), [0, 10, -10])\n\n    def test_multiple_digit_numbers_1(self):\n        self.assertEqual(order_by_points([111, 222, 333, 444]), [111, 222, \n            333, 444])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "import unittest\nfrom codebase import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n\n    def test_basic_functionality_1_1_1(self):\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, \n            1, -12, 11])\n\n    def test_empty_list_1_1_1(self):\n        self.assertEqual(order_by_points([]), [])\n\n    def test_single_element_1_1_1(self):\n        self.assertEqual(order_by_points([5]), [5])\n\n    def test_large_numbers_1_1_1(self):\n        self.assertEqual(order_by_points([1000, 2000, 3000]), [1000, 2000, \n            3000])\n\n    def test_multiple_digit_numbers_1_1_1(self):\n        self.assertEqual(order_by_points([111, 222, 333, 444]), [111, 222, \n            333, 444])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 100.0,
    "use_filter": true,
    "exist_not_error": false
}