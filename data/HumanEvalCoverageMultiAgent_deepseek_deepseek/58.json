{
    "task_id": "HumanEval/58",
    "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
    "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
    "entry_point": "common",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import common\n\nclass TestCommon(unittest.TestCase):\n    def test_common(self):\n        l1 = [1, 4, 3, 34, 653, 2, 5]\n        l2 = [5, 7, 1, 5, 9, 653, 121]\n        expected_output = [1, 5, 653]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty(self):\n        l1 = [1, 2, 3]\n        l2 = [4, 5, 6]\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_one_element(self):\n        l1 = [1, 1, 1]\n        l2 = [1, 1, 1]\n        expected_output = [1]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_duplicates(self):\n        l1 = [1, 1, 1, 2, 2, 2]\n        l2 = [1, 1, 1, 2, 2, 2]\n        expected_output = [1, 2]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_different_order(self):\n        l1 = [1, 2, 3]\n        l2 = [3, 2, 1]\n        expected_output = [1, 2, 3]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty_lists(self):\n        l1 = []\n        l2 = []\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py       7      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 7      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import common\n\nclass TestCommon(unittest.TestCase):\n    def test_common(self):\n        l1 = [1, 4, 3, 34, 653, 2, 5]\n        l2 = [5, 7, 1, 5, 9, 653, 121]\n        expected_output = [1, 5, 653]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty(self):\n        l1 = [1, 2, 3]\n        l2 = [4, 5, 6]\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_one_element(self):\n        l1 = [1, 1, 1]\n        l2 = [1, 1, 1]\n        expected_output = [1]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_duplicates(self):\n        l1 = [1, 1, 1, 2, 2, 2]\n        l2 = [1, 1, 1, 2, 2, 2]\n        expected_output = [1, 2]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_different_order(self):\n        l1 = [1, 2, 3]\n        l2 = [3, 2, 1]\n        expected_output = [1, 2, 3]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty_lists(self):\n        l1 = []\n        l2 = []\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import common\n\nclass TestCommon(unittest.TestCase):\n    def test_common(self):\n        l1 = [1, 4, 3, 34, 653, 2, 5]\n        l2 = [5, 7, 1, 5, 9, 653, 121]\n        expected_output = [1, 5, 653]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty(self):\n        l1 = [1, 2, 3]\n        l2 = [4, 5, 6]\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_one_element(self):\n        l1 = [1, 1, 1]\n        l2 = [1, 1, 1]\n        expected_output = [1]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_duplicates(self):\n        l1 = [1, 1, 1, 2, 2, 2]\n        l2 = [1, 1, 1, 2, 2, 2]\n        expected_output = [1, 2]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_different_order(self):\n        l1 = [1, 2, 3]\n        l2 = [3, 2, 1]\n        expected_output = [1, 2, 3]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty_lists(self):\n        l1 = []\n        l2 = []\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import common\n\nclass TestCommon(unittest.TestCase):\n    def test_common(self):\n        l1 = [1, 4, 3, 34, 653, 2, 5]\n        l2 = [5, 7, 1, 5, 9, 653, 121]\n        expected_output = [1, 5, 653]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty(self):\n        l1 = [1, 2, 3]\n        l2 = [4, 5, 6]\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_one_element(self):\n        l1 = [1, 1, 1]\n        l2 = [1, 1, 1]\n        expected_output = [1]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_duplicates(self):\n        l1 = [1, 1, 1, 2, 2, 2]\n        l2 = [1, 1, 1, 2, 2, 2]\n        expected_output = [1, 2]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_different_order(self):\n        l1 = [1, 2, 3]\n        l2 = [3, 2, 1]\n        expected_output = [1, 2, 3]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty_lists(self):\n        l1 = []\n        l2 = []\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import common\n\nclass TestCommon(unittest.TestCase):\n    def test_common(self):\n        l1 = [1, 4, 3, 34, 653, 2, 5]\n        l2 = [5, 7, 1, 5, 9, 653, 121]\n        expected_output = [1, 5, 653]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty(self):\n        l1 = [1, 2, 3]\n        l2 = [4, 5, 6]\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_one_element(self):\n        l1 = [1, 1, 1]\n        l2 = [1, 1, 1]\n        expected_output = [1]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_duplicates(self):\n        l1 = [1, 1, 1, 2, 2, 2]\n        l2 = [1, 1, 1, 2, 2, 2]\n        expected_output = [1, 2]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_different_order(self):\n        l1 = [1, 2, 3]\n        l2 = [3, 2, 1]\n        expected_output = [1, 2, 3]\n        self.assertEqual(common(l1, l2), expected_output)\n\n    def test_common_empty_lists(self):\n        l1 = []\n        l2 = []\n        expected_output = []\n        self.assertEqual(common(l1, l2), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}