{
    "task_id": "HumanEval/19",
    "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
    "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
    "entry_point": "sort_numbers",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import sort_numbers\n\nclass TestSortNumbers(unittest.TestCase):\n    def test_sort_numbers(self):\n        with self.subTest('Test with single numbers'):\n            self.assertEqual(sort_numbers('one'), 'one')\n            self.assertEqual(sort_numbers('two'), 'two')\n            self.assertEqual(sort_numbers('three'), 'three')\n            self.assertEqual(sort_numbers('four'), 'four')\n            self.assertEqual(sort_numbers('five'), 'five')\n            self.assertEqual(sort_numbers('six'), 'six')\n            self.assertEqual(sort_numbers('seven'), 'seven')\n            self.assertEqual(sort_numbers('eight'), 'eight')\n            self.assertEqual(sort_numbers('nine'), 'nine')\n\n        with self.subTest('Test with multiple numbers'):\n            self.assertEqual(sort_numbers('three one five'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\n        with self.subTest('Test with duplicates'):\n            self.assertEqual(sort_numbers('three three three'), 'three three three')\n            self.assertEqual(sort_numbers('one one one'), 'one one one')\n\n        with self.subTest('Test with empty string'):\n            self.assertEqual(sort_numbers(''), '')\n\n        with self.subTest('Test with numbers in different orders'):\n            self.assertEqual(sort_numbers('three one'), 'one three')\n            self.assertEqual(sort_numbers('five three one'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py       4      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 4      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import sort_numbers\n\nclass TestSortNumbers(unittest.TestCase):\n    def test_sort_numbers(self):\n        with self.subTest('Test with single numbers'):\n            self.assertEqual(sort_numbers('one'), 'one')\n            self.assertEqual(sort_numbers('two'), 'two')\n            self.assertEqual(sort_numbers('three'), 'three')\n            self.assertEqual(sort_numbers('four'), 'four')\n            self.assertEqual(sort_numbers('five'), 'five')\n            self.assertEqual(sort_numbers('six'), 'six')\n            self.assertEqual(sort_numbers('seven'), 'seven')\n            self.assertEqual(sort_numbers('eight'), 'eight')\n            self.assertEqual(sort_numbers('nine'), 'nine')\n\n        with self.subTest('Test with multiple numbers'):\n            self.assertEqual(sort_numbers('three one five'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\n        with self.subTest('Test with duplicates'):\n            self.assertEqual(sort_numbers('three three three'), 'three three three')\n            self.assertEqual(sort_numbers('one one one'), 'one one one')\n\n        with self.subTest('Test with empty string'):\n            self.assertEqual(sort_numbers(''), '')\n\n        with self.subTest('Test with numbers in different orders'):\n            self.assertEqual(sort_numbers('three one'), 'one three')\n            self.assertEqual(sort_numbers('five three one'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import sort_numbers\n\nclass TestSortNumbers(unittest.TestCase):\n    def test_sort_numbers(self):\n        with self.subTest('Test with single numbers'):\n            self.assertEqual(sort_numbers('one'), 'one')\n            self.assertEqual(sort_numbers('two'), 'two')\n            self.assertEqual(sort_numbers('three'), 'three')\n            self.assertEqual(sort_numbers('four'), 'four')\n            self.assertEqual(sort_numbers('five'), 'five')\n            self.assertEqual(sort_numbers('six'), 'six')\n            self.assertEqual(sort_numbers('seven'), 'seven')\n            self.assertEqual(sort_numbers('eight'), 'eight')\n            self.assertEqual(sort_numbers('nine'), 'nine')\n\n        with self.subTest('Test with multiple numbers'):\n            self.assertEqual(sort_numbers('three one five'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\n        with self.subTest('Test with duplicates'):\n            self.assertEqual(sort_numbers('three three three'), 'three three three')\n            self.assertEqual(sort_numbers('one one one'), 'one one one')\n\n        with self.subTest('Test with empty string'):\n            self.assertEqual(sort_numbers(''), '')\n\n        with self.subTest('Test with numbers in different orders'):\n            self.assertEqual(sort_numbers('three one'), 'one three')\n            self.assertEqual(sort_numbers('five three one'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import sort_numbers\n\nclass TestSortNumbers(unittest.TestCase):\n    def test_sort_numbers(self):\n        with self.subTest('Test with single numbers'):\n            self.assertEqual(sort_numbers('one'), 'one')\n            self.assertEqual(sort_numbers('two'), 'two')\n            self.assertEqual(sort_numbers('three'), 'three')\n            self.assertEqual(sort_numbers('four'), 'four')\n            self.assertEqual(sort_numbers('five'), 'five')\n            self.assertEqual(sort_numbers('six'), 'six')\n            self.assertEqual(sort_numbers('seven'), 'seven')\n            self.assertEqual(sort_numbers('eight'), 'eight')\n            self.assertEqual(sort_numbers('nine'), 'nine')\n\n        with self.subTest('Test with multiple numbers'):\n            self.assertEqual(sort_numbers('three one five'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\n        with self.subTest('Test with duplicates'):\n            self.assertEqual(sort_numbers('three three three'), 'three three three')\n            self.assertEqual(sort_numbers('one one one'), 'one one one')\n\n        with self.subTest('Test with empty string'):\n            self.assertEqual(sort_numbers(''), '')\n\n        with self.subTest('Test with numbers in different orders'):\n            self.assertEqual(sort_numbers('three one'), 'one three')\n            self.assertEqual(sort_numbers('five three one'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import sort_numbers\n\nclass TestSortNumbers(unittest.TestCase):\n    def test_sort_numbers(self):\n        with self.subTest('Test with single numbers'):\n            self.assertEqual(sort_numbers('one'), 'one')\n            self.assertEqual(sort_numbers('two'), 'two')\n            self.assertEqual(sort_numbers('three'), 'three')\n            self.assertEqual(sort_numbers('four'), 'four')\n            self.assertEqual(sort_numbers('five'), 'five')\n            self.assertEqual(sort_numbers('six'), 'six')\n            self.assertEqual(sort_numbers('seven'), 'seven')\n            self.assertEqual(sort_numbers('eight'), 'eight')\n            self.assertEqual(sort_numbers('nine'), 'nine')\n\n        with self.subTest('Test with multiple numbers'):\n            self.assertEqual(sort_numbers('three one five'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\n        with self.subTest('Test with duplicates'):\n            self.assertEqual(sort_numbers('three three three'), 'three three three')\n            self.assertEqual(sort_numbers('one one one'), 'one one one')\n\n        with self.subTest('Test with empty string'):\n            self.assertEqual(sort_numbers(''), '')\n\n        with self.subTest('Test with numbers in different orders'):\n            self.assertEqual(sort_numbers('three one'), 'one three')\n            self.assertEqual(sort_numbers('five three one'), 'one three five')\n            self.assertEqual(sort_numbers('nine eight seven'), 'seven eight nine')\n            self.assertEqual(sort_numbers('six five three'), 'three five six')\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}