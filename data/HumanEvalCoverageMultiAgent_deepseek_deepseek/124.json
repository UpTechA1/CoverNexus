{
    "task_id": "HumanEval/124",
    "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
    "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
    "entry_point": "valid_date",
    "coverage": 94.0,
    "num_iterations_used": 3,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nHere is a high-coverage test script for the `valid_date` function in `codebase.py`:\n\n```python\nimport unittest\nfrom codebase import valid_date\n\nclass TestValidDate(unittest.TestCase):\n    def test_valid_date(self):\n        self.assertTrue(valid_date('01-01-2000'))  # Valid date\n        self.assertTrue(valid_date('12-31-2000'))  # Valid date\n        self.assertTrue(valid_date('02-29-2000'))  # Valid date\n        self.assertFalse(valid_date('02-30-2000'))  # Invalid date\n        self.assertFalse(valid_date('02-29-1900'))  # Invalid date\n        self.assertTrue(valid_date('03-31-2000'))  # Valid date\n        self.assertFalse(valid_date('03-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('04-30-2000'))  # Valid date\n        self.assertFalse(valid_date('04-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('05-31-2000'))  # Valid date\n        self.assertFalse(valid_date('05-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('06-30-2000'))  # Valid date\n        self.assertFalse(valid_date('06-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('07-31-2000'))  # Valid date\n        self.assertFalse(valid_date('07-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('08-31-2000'))  # Valid date\n        self.assertFalse(valid_date('08-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('09-30-2000'))  # Valid date\n        self.assertFalse(valid_date('09-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('10-31-2000'))  # Valid date\n        self.assertFalse(valid_date('10-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('11-30-2000'))  # Valid date\n        self.assertFalse(valid_date('11-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('12-31-2000'))  # Valid date\n        self.assertFalse(valid_date('12-32-2000'))  # Invalid date\n        self.assertFalse(valid_date('02-30-2001'))  # Invalid date\n        self.assertFalse(valid_date('02-29-2001'))  # Invalid date\n        self.assertFalse(valid_date('01-00-2000'))  # Invalid date\n        self.assertFalse(valid_date('01-32-2000'))  # Invalid date\n        self.assertFalse(valid_date('13-01-2000'))  # Invalid date\n        self.assertFalse(valid_date('00-01-2000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-0000'))  # Invalid date\n        self.assertFalse(valid_date('01-01'))  # Invalid date\n        self.assertFalse(valid_date('01-01-200'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assert",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py      16     16     0%   2-37\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                16     16     0%\n",
            "coverage": 0.0,
            "exist_error": false
        },
        "2": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import valid_date\n\nclass TestValidDate(unittest.TestCase):\n    def test_valid_date(self):\n        valid_dates = ['01-01-2000', '02-29-2000', '12-31-2000', '03-11-2000', '06-04-2020']\n        invalid_dates = ['02-30-2000', '02-29-1900', '01-00-2000', '15-01-2012', '04-0-2040', '06/04/2020']\n\n        for date in valid_dates:\n            with self.subTest(date=date):\n                self.assertTrue(valid_date(date))\n\n        for date in invalid_dates:\n            with self.subTest(date=date):\n                self.assertFalse(valid_date(date))\n\n        # Testing edge cases\n        self.assertFalse(valid_date(''))\n        self.assertFalse(valid_date('-01-2000'))\n        self.assertFalse(valid_date('01--2000'))\n        self.assertFalse(valid_date('01-2000'))\n        self.assertFalse(valid_date('01-32-2000'))\n        self.assertFalse(valid_date('13-01-2000'))\n        self.assertFalse(valid_date('02-30-2000'))\n        self.assertFalse(valid_date('02-29-1900'))\n        self.assertFalse(valid_date('02-00-2000'))\n        self.assertFalse(valid_date('02-29-2100'))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FFF\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='12-31-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 13, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='02-29-1900')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 17, in test_valid_date\n    self.assertFalse(valid_date(date))\nAssertionError: True is not false\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 27, in test_valid_date\n    self.assertFalse(valid_date('02-29-1900'))\nAssertionError: True is not false\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=3)\n\nName                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py      16      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                16      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import valid_date\n\nclass TestValidDate(unittest.TestCase):\n    def test_valid_date(self):\n        valid_dates = [\n            '01-01-2000', '02-29-2000', '03-31-2000', '04-30-2000', '05-31-2000',\n            '06-30-2000', '07-31-2000', '08-31-2000', '09-30-2000', '10-31-2000',\n            '11-30-2000', '12-31-2000', '12-30-2000', '11-29-2000', '10-29-2000',\n            '09-29-2000', '08-29-2000', '07-29-2000', '06-29-2000', '05-29-2000',\n            '04-29-2000', '03-29-2000', '02-28-2000', '01-01-1900', '12-31-1900'\n        ]\n        invalid_dates = [\n            '00-01-2000', '13-01-2000', '01-00-2000', '01-32-2000', '02-30-2000',\n            '02-30-1900', '04-31-2000', '06-31-2000', '09-31-2000', '11-31-2000',\n            '00-00-0000', '13-00-0000', '01-00-0000', '01-32-0000', '02-30-0000',\n            '12-56-2000', '12-00-2000', '00-56-2000', '00-00-2000', '13-56-2000',\n            '00-00-0000', '13-00-0000', '01-00-0000', '01-32-0000', '02-30-0000'\n        ]\n\n        for date in valid_dates:\n            with self.subTest(date=date):\n                self.assertTrue(valid_date(date))\n        \n        for date in invalid_dates:\n            with self.subTest(date=date):\n                self.assertFalse(valid_date(date))\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "FFFFFFFFFFFF\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='03-31-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='04-30-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='05-31-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='06-30-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='07-31-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='08-31-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='09-30-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='10-31-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='11-30-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='12-31-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='12-30-2000')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n======================================================================\nFAIL: test_valid_date (__main__.TestValidDate.test_valid_date) (date='12-31-1900')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/generated_test.py\", line 25, in test_valid_date\n    self.assertTrue(valid_date(date))\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=12)\n\nName                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py      16      2    88%   34-35\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                16      2    88%\n",
            "coverage": 88.0,
            "exist_error": true
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nfrom codebase import valid_date\n\nclass TestValidDate(unittest.TestCase):\n    def test_valid_date(self):\n        valid_dates = ['01-01-2000', '02-29-2000', '12-31-2000', '03-11-2000', '06-04-2020']\n        invalid_dates = ['02-30-2000', '02-29-1900', '01-00-2000', '15-01-2012', '04-0-2040', '06/04/2020']\n\n        for date in valid_dates:\n            with self.subTest(date=date):\n                self.assertTrue(valid_date(date))\n\n        for date in invalid_dates:\n            with self.subTest(date=date):\n                self.assertFalse(valid_date(date))\n\n        # Testing edge cases\n        self.assertFalse(valid_date(''))\n        self.assertFalse(valid_date('-01-2000'))\n        self.assertFalse(valid_date('01--2000'))\n        self.assertFalse(valid_date('01-2000'))\n        self.assertFalse(valid_date('01-32-2000'))\n        self.assertFalse(valid_date('13-01-2000'))\n        self.assertFalse(valid_date('02-30-2000'))\n        self.assertFalse(valid_date('02-29-1900'))\n        self.assertFalse(valid_date('02-00-2000'))\n        self.assertFalse(valid_date('02-29-2100'))\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nHere is a high-coverage test script for the `valid_date` function in `codebase.py`:\n\n```python\nimport unittest\nfrom codebase import valid_date\n\nclass TestValidDate(unittest.TestCase):\n    def test_valid_date(self):\n        self.assertTrue(valid_date('01-01-2000'))  # Valid date\n        self.assertTrue(valid_date('12-31-2000'))  # Valid date\n        self.assertTrue(valid_date('02-29-2000'))  # Valid date\n        self.assertFalse(valid_date('02-30-2000'))  # Invalid date\n        self.assertFalse(valid_date('02-29-1900'))  # Invalid date\n        self.assertTrue(valid_date('03-31-2000'))  # Valid date\n        self.assertFalse(valid_date('03-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('04-30-2000'))  # Valid date\n        self.assertFalse(valid_date('04-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('05-31-2000'))  # Valid date\n        self.assertFalse(valid_date('05-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('06-30-2000'))  # Valid date\n        self.assertFalse(valid_date('06-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('07-31-2000'))  # Valid date\n        self.assertFalse(valid_date('07-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('08-31-2000'))  # Valid date\n        self.assertFalse(valid_date('08-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('09-30-2000'))  # Valid date\n        self.assertFalse(valid_date('09-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('10-31-2000'))  # Valid date\n        self.assertFalse(valid_date('10-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('11-30-2000'))  # Valid date\n        self.assertFalse(valid_date('11-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('12-31-2000'))  # Valid date\n        self.assertFalse(valid_date('12-32-2000'))  # Invalid date\n        self.assertFalse(valid_date('02-30-2001'))  # Invalid date\n        self.assertFalse(valid_date('02-29-2001'))  # Invalid date\n        self.assertFalse(valid_date('01-00-2000'))  # Invalid date\n        self.assertFalse(valid_date('01-32-2000'))  # Invalid date\n        self.assertFalse(valid_date('13-01-2000'))  # Invalid date\n        self.assertFalse(valid_date('00-01-2000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-0000'))  # Invalid date\n        self.assertFalse(valid_date('01-01'))  # Invalid date\n        self.assertFalse(valid_date('01-01-200'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assert",
    "not_error_best_generated_test_script": "from codebase import *\nHere is a high-coverage test script for the `valid_date` function in `codebase.py`:\n\n```python\nimport unittest\nfrom codebase import valid_date\n\nclass TestValidDate(unittest.TestCase):\n    def test_valid_date(self):\n        self.assertTrue(valid_date('01-01-2000'))  # Valid date\n        self.assertTrue(valid_date('12-31-2000'))  # Valid date\n        self.assertTrue(valid_date('02-29-2000'))  # Valid date\n        self.assertFalse(valid_date('02-30-2000'))  # Invalid date\n        self.assertFalse(valid_date('02-29-1900'))  # Invalid date\n        self.assertTrue(valid_date('03-31-2000'))  # Valid date\n        self.assertFalse(valid_date('03-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('04-30-2000'))  # Valid date\n        self.assertFalse(valid_date('04-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('05-31-2000'))  # Valid date\n        self.assertFalse(valid_date('05-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('06-30-2000'))  # Valid date\n        self.assertFalse(valid_date('06-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('07-31-2000'))  # Valid date\n        self.assertFalse(valid_date('07-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('08-31-2000'))  # Valid date\n        self.assertFalse(valid_date('08-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('09-30-2000'))  # Valid date\n        self.assertFalse(valid_date('09-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('10-31-2000'))  # Valid date\n        self.assertFalse(valid_date('10-32-2000'))  # Invalid date\n        self.assertTrue(valid_date('11-30-2000'))  # Valid date\n        self.assertFalse(valid_date('11-31-2000'))  # Invalid date\n        self.assertTrue(valid_date('12-31-2000'))  # Valid date\n        self.assertFalse(valid_date('12-32-2000'))  # Invalid date\n        self.assertFalse(valid_date('02-30-2001'))  # Invalid date\n        self.assertFalse(valid_date('02-29-2001'))  # Invalid date\n        self.assertFalse(valid_date('01-00-2000'))  # Invalid date\n        self.assertFalse(valid_date('01-32-2000'))  # Invalid date\n        self.assertFalse(valid_date('13-01-2000'))  # Invalid date\n        self.assertFalse(valid_date('00-01-2000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-0000'))  # Invalid date\n        self.assertFalse(valid_date('01-01'))  # Invalid date\n        self.assertFalse(valid_date('01-01-200'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assertFalse(valid_date('01-01-20000'))  # Invalid date\n        self.assert",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import valid_date\n\n\nclass TestValidDate(unittest.TestCase):\n\n    def test_valid_date_5(self):\n        self.assertFalse(valid_date(''))\n\n    def test_valid_date_6(self):\n        self.assertFalse(valid_date('-01-2000'))\n\n    def test_valid_date_7(self):\n        self.assertFalse(valid_date('01--2000'))\n\n    def test_valid_date_8(self):\n        self.assertFalse(valid_date('01-2000'))\n\n    def test_valid_date_9(self):\n        self.assertFalse(valid_date('01-32-2000'))\n\n    def test_valid_date_10(self):\n        self.assertFalse(valid_date('13-01-2000'))\n\n    def test_valid_date_11(self):\n        self.assertFalse(valid_date('02-30-2000'))\n\n    def test_valid_date_13(self):\n        self.assertFalse(valid_date('02-00-2000'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 0.0,
    "not_error_best_score": 0.0,
    "exist_not_error": true,
    "filtered_score": 88.0,
    "use_filter": true
}