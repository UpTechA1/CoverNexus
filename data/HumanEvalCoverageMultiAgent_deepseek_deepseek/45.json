{
    "task_id": "HumanEval/45",
    "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
    "canonical_solution": "    return a * h / 2.0\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
    "entry_point": "triangle_area",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\n\nimport unittest\nimport codebase\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertEqual(codebase.triangle_area(5, 3), 7.5)\n        self.assertEqual(codebase.triangle_area(10, 2), 10.0)\n        self.assertEqual(codebase.triangle_area(0, 0), 0.0)\n\n    def test_triangle_area_with_negative_values(self):\n        with self.subTest(\"Negative base\"):\n            self.assertEqual(codebase.triangle_area(-5, 3), -7.5)\n        with self.subTest(\"Negative height\"):\n            self.assertEqual(codebase.triangle_area(5, -3), -7.5)\n        with self.subTest(\"Negative base and height\"):\n            self.assertEqual(codebase.triangle_area(-5, -3), 7.5)\n\n    def test_triangle_area_with_non_numeric_values(self):\n        with self.subTest(\"String base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(\"5\", 3)\n        with self.subTest(\"String height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, \"3\")\n        with self.subTest(\"List base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area([5], 3)\n        with self.subTest(\"List height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, [3])\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
            "executed_output": "Name                                                                                              Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------------------------------------------------------------------\n/home/pc/Documents/Coverage-Test-Agent/test_coverage_multiagents/temp_test_deepseek/codebase.py       2      0   100%\n-------------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                                 2      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "best_score_generated_test_script": "from codebase import *\n\nimport unittest\nimport codebase\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertEqual(codebase.triangle_area(5, 3), 7.5)\n        self.assertEqual(codebase.triangle_area(10, 2), 10.0)\n        self.assertEqual(codebase.triangle_area(0, 0), 0.0)\n\n    def test_triangle_area_with_negative_values(self):\n        with self.subTest(\"Negative base\"):\n            self.assertEqual(codebase.triangle_area(-5, 3), -7.5)\n        with self.subTest(\"Negative height\"):\n            self.assertEqual(codebase.triangle_area(5, -3), -7.5)\n        with self.subTest(\"Negative base and height\"):\n            self.assertEqual(codebase.triangle_area(-5, -3), 7.5)\n\n    def test_triangle_area_with_non_numeric_values(self):\n        with self.subTest(\"String base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(\"5\", 3)\n        with self.subTest(\"String height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, \"3\")\n        with self.subTest(\"List base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area([5], 3)\n        with self.subTest(\"List height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, [3])\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\n\nimport unittest\nimport codebase\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertEqual(codebase.triangle_area(5, 3), 7.5)\n        self.assertEqual(codebase.triangle_area(10, 2), 10.0)\n        self.assertEqual(codebase.triangle_area(0, 0), 0.0)\n\n    def test_triangle_area_with_negative_values(self):\n        with self.subTest(\"Negative base\"):\n            self.assertEqual(codebase.triangle_area(-5, 3), -7.5)\n        with self.subTest(\"Negative height\"):\n            self.assertEqual(codebase.triangle_area(5, -3), -7.5)\n        with self.subTest(\"Negative base and height\"):\n            self.assertEqual(codebase.triangle_area(-5, -3), 7.5)\n\n    def test_triangle_area_with_non_numeric_values(self):\n        with self.subTest(\"String base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(\"5\", 3)\n        with self.subTest(\"String height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, \"3\")\n        with self.subTest(\"List base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area([5], 3)\n        with self.subTest(\"List height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, [3])\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\n\nimport unittest\nimport codebase\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertEqual(codebase.triangle_area(5, 3), 7.5)\n        self.assertEqual(codebase.triangle_area(10, 2), 10.0)\n        self.assertEqual(codebase.triangle_area(0, 0), 0.0)\n\n    def test_triangle_area_with_negative_values(self):\n        with self.subTest(\"Negative base\"):\n            self.assertEqual(codebase.triangle_area(-5, 3), -7.5)\n        with self.subTest(\"Negative height\"):\n            self.assertEqual(codebase.triangle_area(5, -3), -7.5)\n        with self.subTest(\"Negative base and height\"):\n            self.assertEqual(codebase.triangle_area(-5, -3), 7.5)\n\n    def test_triangle_area_with_non_numeric_values(self):\n        with self.subTest(\"String base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(\"5\", 3)\n        with self.subTest(\"String height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, \"3\")\n        with self.subTest(\"List base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area([5], 3)\n        with self.subTest(\"List height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, [3])\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\n\nimport unittest\nimport codebase\n\nclass TestTriangleArea(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertEqual(codebase.triangle_area(5, 3), 7.5)\n        self.assertEqual(codebase.triangle_area(10, 2), 10.0)\n        self.assertEqual(codebase.triangle_area(0, 0), 0.0)\n\n    def test_triangle_area_with_negative_values(self):\n        with self.subTest(\"Negative base\"):\n            self.assertEqual(codebase.triangle_area(-5, 3), -7.5)\n        with self.subTest(\"Negative height\"):\n            self.assertEqual(codebase.triangle_area(5, -3), -7.5)\n        with self.subTest(\"Negative base and height\"):\n            self.assertEqual(codebase.triangle_area(-5, -3), 7.5)\n\n    def test_triangle_area_with_non_numeric_values(self):\n        with self.subTest(\"String base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(\"5\", 3)\n        with self.subTest(\"String height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, \"3\")\n        with self.subTest(\"List base\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area([5], 3)\n        with self.subTest(\"List height\"):\n            with self.assertRaises(TypeError):\n                codebase.triangle_area(5, [3])\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}