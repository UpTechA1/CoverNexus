{
    "task_id": "HumanEval/158",
    "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
    "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
    "entry_point": "find_max",
    "testbase": "from method import find_max\ndef check(candidate):\n    assert candidate(['b']) == 'b', 't9'\n\n\nif __name__ == '__main__':\n    check(find_max)\n",
    "coverage": 100.0,
    "coverage_testbase": 100.0,
    "num_iterations_used": 0,
    "msg_trace": {
        "1": {
            "generated_test_script": "from method import find_max\ndef check(candidate):\n    assert candidate(['b']) == 'b', 't9'\n\n\nif __name__ == '__main__':\n    check(find_max)\n",
            "coverage": 100,
            "exist_error": false,
            "executed_output": ""
        }
    },
    "best_score_generated_test_script": "from method import find_max\ndef check(candidate):\n    assert candidate(['b']) == 'b', 't9'\n\n\nif __name__ == '__main__':\n    check(find_max)\n",
    "first_generated_test_script": "from method import find_max\ndef check(candidate):\n    assert candidate(['b']) == 'b', 't9'\n\n\nif __name__ == '__main__':\n    check(find_max)\n",
    "not_error_best_generated_test_script": "from method import find_max\ndef check(candidate):\n    assert candidate(['b']) == 'b', 't9'\n\n\nif __name__ == '__main__':\n    check(find_max)\n",
    "filtered_generated_test_script": "from method import find_max\ndef check(candidate):\n    assert candidate(['b']) == 'b', 't9'\n\n\nif __name__ == '__main__':\n    check(find_max)\n",
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "exist_not_error": true,
    "filtered_score": 100.0,
    "use_filter": false
}