{
    "task_id": "HumanEval/81",
    "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
    "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "numerical_letter_grade",
    "coverage": 90.0,
    "num_iterations_used": 4,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_1(self):\n        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), [\n            'A+', 'B', 'C', 'C+', 'A-'])\n\n    def test_numerical_letter_grade_2(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n    def test_numerical_letter_grade_3(self):\n        self.assertEqual(numerical_letter_grade([3.8, 2.8, 1.8, 0.8]), ['A',\n            'B', 'C', 'D'])\n\n    def test_numerical_letter_grade_4(self):\n        self.assertEqual(numerical_letter_grade([3.4, 2.4, 1.4, 0.4]), [\n            'A-', 'B-', 'C-', 'D-'])\n\n    def test_numerical_letter_grade_5(self):\n        self.assertEqual(numerical_letter_grade([3.1, 2.1, 1.1]), ['B+',\n            'C+', 'D+'])\n\n    def test_numerical_letter_grade_6(self):\n        self.assertEqual(numerical_letter_grade([3.9]), ['A'])\n\n    def test_numerical_letter_grade_7(self):\n        self.assertEqual(numerical_letter_grade([2.9]), ['B+'])\n\n    def test_numerical_letter_grade_8(self):\n        self.assertEqual(numerical_letter_grade([1.9]), ['C+'])\n\n    def test_numerical_letter_grade_9(self):\n        self.assertEqual(numerical_letter_grade([0.9]), ['D'])\n\n    def test_numerical_letter_grade_10(self):\n        self.assertEqual(numerical_letter_grade([0.1]), ['D-'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "F......FF.\n======================================================================\nFAIL: test_numerical_letter_grade_1 (__main__.TestNumericalLetterGrade)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 9, in test_numerical_letter_grade_1\n    self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), [\nAssertionError: Lists differ: ['A+', 'B', 'C-', 'C', 'A-'] != ['A+', 'B', 'C', 'C+', 'A-']\n\nFirst differing element 2:\n'C-'\n'C'\n\n- ['A+', 'B', 'C-', 'C', 'A-']\n?             ------\n\n+ ['A+', 'B', 'C', 'C+', 'A-']\n?                 ++++++\n\n\n======================================================================\nFAIL: test_numerical_letter_grade_7 (__main__.TestNumericalLetterGrade)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 31, in test_numerical_letter_grade_7\n    self.assertEqual(numerical_letter_grade([2.9]), ['B+'])\nAssertionError: Lists differ: ['B'] != ['B+']\n\nFirst differing element 0:\n'B'\n'B+'\n\n- ['B']\n+ ['B+']\n?    +\n\n\n======================================================================\nFAIL: test_numerical_letter_grade_8 (__main__.TestNumericalLetterGrade)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 34, in test_numerical_letter_grade_8\n    self.assertEqual(numerical_letter_grade([1.9]), ['C+'])\nAssertionError: Lists differ: ['C'] != ['C+']\n\nFirst differing element 0:\n'C'\n'C+'\n\n- ['C']\n+ ['C+']\n?    +\n\n\n----------------------------------------------------------------------\nRan 10 tests in 0.002s\n\nFAILED (failures=3)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      29      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                           29      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_1_1(self):\n        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), [\n            'A+', 'B', 'C', 'C', 'A-'])\n\n    def test_numerical_letter_grade_2_1(self):\n        self.assertEqual(numerical_letter_grade([3.8]), ['A'])\n\n    def test_numerical_letter_grade_3_1(self):\n        self.assertEqual(numerical_letter_grade([3.4]), ['A-'])\n\n    def test_numerical_letter_grade_4_1(self):\n        self.assertEqual(numerical_letter_grade([3.1]), ['B+'])\n\n    def test_numerical_letter_grade_5_1(self):\n        self.assertEqual(numerical_letter_grade([2.8]), ['B'])\n\n    def test_numerical_letter_grade_6_1(self):\n        self.assertEqual(numerical_letter_grade([2.4]), ['B-'])\n\n    def test_numerical_letter_grade_7_1(self):\n        self.assertEqual(numerical_letter_grade([2.9]), ['B'])\n\n    def test_numerical_letter_grade_8_1(self):\n        self.assertEqual(numerical_letter_grade([1.9]), ['C'])\n\n    def test_numerical_letter_grade_9_1(self):\n        self.assertEqual(numerical_letter_grade([1.4]), ['C-'])\n\n    def test_numerical_letter_grade_10_1(self):\n        self.assertEqual(numerical_letter_grade([1.1]), ['D+'])\n\n    def test_numerical_letter_grade_11_1(self):\n        self.assertEqual(numerical_letter_grade([0.8]), ['D'])\n\n    def test_numerical_letter_grade_12_1(self):\n        self.assertEqual(numerical_letter_grade([0.1]), ['D-'])\n\n    def test_numerical_letter_grade_13_1(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "....F........\n======================================================================\nFAIL: test_numerical_letter_grade_1_1 (__main__.TestNumericalLetterGrade)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 9, in test_numerical_letter_grade_1_1\n    self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), [\nAssertionError: Lists differ: ['A+', 'B', 'C-', 'C', 'A-'] != ['A+', 'B', 'C', 'C', 'A-']\n\nFirst differing element 2:\n'C-'\n'C'\n\n- ['A+', 'B', 'C-', 'C', 'A-']\n?             ------\n\n+ ['A+', 'B', 'C', 'C', 'A-']\n?                 +++++\n\n\n----------------------------------------------------------------------\nRan 13 tests in 0.002s\n\nFAILED (failures=1)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      29      1    97%   44\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                           29      1    97%\n",
            "coverage": 97.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_1_1_1(self):\n        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), [\n            'A+', 'B', 'C', 'C+', 'A-'])\n\n    def test_numerical_letter_grade_2_0_1(self):\n        self.assertEqual(numerical_letter_grade([2.0]), ['C+'])\n\n    def test_numerical_letter_grade_0_0_1(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n    def test_numerical_letter_grade_3_8_1(self):\n        self.assertEqual(numerical_letter_grade([3.8]), ['A'])\n\n    def test_numerical_letter_grade_1_5_1(self):\n        self.assertEqual(numerical_letter_grade([1.5]), ['D+'])\n\n    def test_numerical_letter_grade_0_5_1(self):\n        self.assertEqual(numerical_letter_grade([0.5]), ['D-'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "..FFF.\n======================================================================\nFAIL: test_numerical_letter_grade_1_1_1 (__main__.TestNumericalLetterGrade)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 9, in test_numerical_letter_grade_1_1_1\n    self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), [\nAssertionError: Lists differ: ['A+', 'B', 'C-', 'C', 'A-'] != ['A+', 'B', 'C', 'C+', 'A-']\n\nFirst differing element 2:\n'C-'\n'C'\n\n- ['A+', 'B', 'C-', 'C', 'A-']\n?             ------\n\n+ ['A+', 'B', 'C', 'C+', 'A-']\n?                 ++++++\n\n\n======================================================================\nFAIL: test_numerical_letter_grade_1_5_1 (__main__.TestNumericalLetterGrade)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 22, in test_numerical_letter_grade_1_5_1\n    self.assertEqual(numerical_letter_grade([1.5]), ['D+'])\nAssertionError: Lists differ: ['C-'] != ['D+']\n\nFirst differing element 0:\n'C-'\n'D+'\n\n- ['C-']\n+ ['D+']\n\n======================================================================\nFAIL: test_numerical_letter_grade_2_0_1 (__main__.TestNumericalLetterGrade)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 13, in test_numerical_letter_grade_2_0_1\n    self.assertEqual(numerical_letter_grade([2.0]), ['C+'])\nAssertionError: Lists differ: ['C'] != ['C+']\n\nFirst differing element 0:\n'C'\n'C+'\n\n- ['C']\n+ ['C+']\n?    +\n\n\n----------------------------------------------------------------------\nRan 6 tests in 0.002s\n\nFAILED (failures=3)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      29      5    83%   38, 42, 44, 50, 52\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                           29      5    83%\n",
            "coverage": 83.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_A_plus_1(self):\n        self.assertEqual(numerical_letter_grade([4.0]), ['A+'])\n\n    def test_numerical_letter_grade_A_1(self):\n        self.assertEqual(numerical_letter_grade([3.8]), ['A'])\n\n    def test_numerical_letter_grade_A_minus_1(self):\n        self.assertEqual(numerical_letter_grade([3.4]), ['A-'])\n\n    def test_numerical_letter_grade_B_plus_1(self):\n        self.assertEqual(numerical_letter_grade([3.1]), ['B+'])\n\n    def test_numerical_letter_grade_B_1(self):\n        self.assertEqual(numerical_letter_grade([2.8]), ['B'])\n\n    def test_numerical_letter_grade_B_minus_1(self):\n        self.assertEqual(numerical_letter_grade([2.4]), ['B-'])\n\n    def test_numerical_letter_grade_C_plus_1(self):\n        self.assertEqual(numerical_letter_grade([2.1]), ['C+'])\n\n    def test_numerical_letter_grade_C_1(self):\n        self.assertEqual(numerical_letter_grade([1.8]), ['C'])\n\n    def test_numerical_letter_grade_C_minus_1(self):\n        self.assertEqual(numerical_letter_grade([1.4]), ['C-'])\n\n    def test_numerical_letter_grade_D_plus_1(self):\n        self.assertEqual(numerical_letter_grade([1.1]), ['D+'])\n\n    def test_numerical_letter_grade_D_1(self):\n        self.assertEqual(numerical_letter_grade([0.8]), ['D'])\n\n    def test_numerical_letter_grade_D_minus_1(self):\n        self.assertEqual(numerical_letter_grade([0.1]), ['D-'])\n\n    def test_numerical_letter_grade_E_1(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py      29      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                           29      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_A_plus_1(self):\n        self.assertEqual(numerical_letter_grade([4.0]), ['A+'])\n\n    def test_numerical_letter_grade_A_1(self):\n        self.assertEqual(numerical_letter_grade([3.8]), ['A'])\n\n    def test_numerical_letter_grade_A_minus_1(self):\n        self.assertEqual(numerical_letter_grade([3.4]), ['A-'])\n\n    def test_numerical_letter_grade_B_plus_1(self):\n        self.assertEqual(numerical_letter_grade([3.1]), ['B+'])\n\n    def test_numerical_letter_grade_B_1(self):\n        self.assertEqual(numerical_letter_grade([2.8]), ['B'])\n\n    def test_numerical_letter_grade_B_minus_1(self):\n        self.assertEqual(numerical_letter_grade([2.4]), ['B-'])\n\n    def test_numerical_letter_grade_C_plus_1(self):\n        self.assertEqual(numerical_letter_grade([2.1]), ['C+'])\n\n    def test_numerical_letter_grade_C_1(self):\n        self.assertEqual(numerical_letter_grade([1.8]), ['C'])\n\n    def test_numerical_letter_grade_C_minus_1(self):\n        self.assertEqual(numerical_letter_grade([1.4]), ['C-'])\n\n    def test_numerical_letter_grade_D_plus_1(self):\n        self.assertEqual(numerical_letter_grade([1.1]), ['D+'])\n\n    def test_numerical_letter_grade_D_1(self):\n        self.assertEqual(numerical_letter_grade([0.8]), ['D'])\n\n    def test_numerical_letter_grade_D_minus_1(self):\n        self.assertEqual(numerical_letter_grade([0.1]), ['D-'])\n\n    def test_numerical_letter_grade_E_1(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_1(self):\n        self.assertEqual(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]), [\n            'A+', 'B', 'C', 'C+', 'A-'])\n\n    def test_numerical_letter_grade_2(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n    def test_numerical_letter_grade_3(self):\n        self.assertEqual(numerical_letter_grade([3.8, 2.8, 1.8, 0.8]), ['A',\n            'B', 'C', 'D'])\n\n    def test_numerical_letter_grade_4(self):\n        self.assertEqual(numerical_letter_grade([3.4, 2.4, 1.4, 0.4]), [\n            'A-', 'B-', 'C-', 'D-'])\n\n    def test_numerical_letter_grade_5(self):\n        self.assertEqual(numerical_letter_grade([3.1, 2.1, 1.1]), ['B+',\n            'C+', 'D+'])\n\n    def test_numerical_letter_grade_6(self):\n        self.assertEqual(numerical_letter_grade([3.9]), ['A'])\n\n    def test_numerical_letter_grade_7(self):\n        self.assertEqual(numerical_letter_grade([2.9]), ['B+'])\n\n    def test_numerical_letter_grade_8(self):\n        self.assertEqual(numerical_letter_grade([1.9]), ['C+'])\n\n    def test_numerical_letter_grade_9(self):\n        self.assertEqual(numerical_letter_grade([0.9]), ['D'])\n\n    def test_numerical_letter_grade_10(self):\n        self.assertEqual(numerical_letter_grade([0.1]), ['D-'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_A_plus_1(self):\n        self.assertEqual(numerical_letter_grade([4.0]), ['A+'])\n\n    def test_numerical_letter_grade_A_1(self):\n        self.assertEqual(numerical_letter_grade([3.8]), ['A'])\n\n    def test_numerical_letter_grade_A_minus_1(self):\n        self.assertEqual(numerical_letter_grade([3.4]), ['A-'])\n\n    def test_numerical_letter_grade_B_plus_1(self):\n        self.assertEqual(numerical_letter_grade([3.1]), ['B+'])\n\n    def test_numerical_letter_grade_B_1(self):\n        self.assertEqual(numerical_letter_grade([2.8]), ['B'])\n\n    def test_numerical_letter_grade_B_minus_1(self):\n        self.assertEqual(numerical_letter_grade([2.4]), ['B-'])\n\n    def test_numerical_letter_grade_C_plus_1(self):\n        self.assertEqual(numerical_letter_grade([2.1]), ['C+'])\n\n    def test_numerical_letter_grade_C_1(self):\n        self.assertEqual(numerical_letter_grade([1.8]), ['C'])\n\n    def test_numerical_letter_grade_C_minus_1(self):\n        self.assertEqual(numerical_letter_grade([1.4]), ['C-'])\n\n    def test_numerical_letter_grade_D_plus_1(self):\n        self.assertEqual(numerical_letter_grade([1.1]), ['D+'])\n\n    def test_numerical_letter_grade_D_1(self):\n        self.assertEqual(numerical_letter_grade([0.8]), ['D'])\n\n    def test_numerical_letter_grade_D_minus_1(self):\n        self.assertEqual(numerical_letter_grade([0.1]), ['D-'])\n\n    def test_numerical_letter_grade_E_1(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import numerical_letter_grade\n\n\nclass TestNumericalLetterGrade(unittest.TestCase):\n\n    def test_numerical_letter_grade_A_plus_1(self):\n        self.assertEqual(numerical_letter_grade([4.0]), ['A+'])\n\n    def test_numerical_letter_grade_A_1(self):\n        self.assertEqual(numerical_letter_grade([3.8]), ['A'])\n\n    def test_numerical_letter_grade_A_minus_1(self):\n        self.assertEqual(numerical_letter_grade([3.4]), ['A-'])\n\n    def test_numerical_letter_grade_B_plus_1(self):\n        self.assertEqual(numerical_letter_grade([3.1]), ['B+'])\n\n    def test_numerical_letter_grade_B_1(self):\n        self.assertEqual(numerical_letter_grade([2.8]), ['B'])\n\n    def test_numerical_letter_grade_B_minus_1(self):\n        self.assertEqual(numerical_letter_grade([2.4]), ['B-'])\n\n    def test_numerical_letter_grade_C_plus_1(self):\n        self.assertEqual(numerical_letter_grade([2.1]), ['C+'])\n\n    def test_numerical_letter_grade_C_1(self):\n        self.assertEqual(numerical_letter_grade([1.8]), ['C'])\n\n    def test_numerical_letter_grade_C_minus_1(self):\n        self.assertEqual(numerical_letter_grade([1.4]), ['C-'])\n\n    def test_numerical_letter_grade_D_plus_1(self):\n        self.assertEqual(numerical_letter_grade([1.1]), ['D+'])\n\n    def test_numerical_letter_grade_D_1(self):\n        self.assertEqual(numerical_letter_grade([0.8]), ['D'])\n\n    def test_numerical_letter_grade_D_minus_1(self):\n        self.assertEqual(numerical_letter_grade([0.1]), ['D-'])\n\n    def test_numerical_letter_grade_E_1(self):\n        self.assertEqual(numerical_letter_grade([0.0]), ['E'])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 100.0,
    "use_filter": false,
    "exist_not_error": true
}