{
    "task_id": "HumanEval/21",
    "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
    "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
    "entry_point": "rescale_to_unit",
    "coverage": 100.0,
    "num_iterations_used": 5,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, \n            0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_2(self):\n        self.assertEqual(rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]), [\n            0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_3(self):\n        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5, 1.0])\n\n    def test_rescale_to_unit_4(self):\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0, 0.0, 1.0]), [0.0, \n            0.0, 0.0, 0.0, 1.0])\n\n    def test_rescale_to_unit_5(self):\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]), [0.0, \n            0.0, 0.0, 0.0, 0.0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "....E\n======================================================================\nERROR: test_rescale_to_unit_5 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 24, in test_rescale_to_unit_5\n    self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]), [0.0,\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\nZeroDivisionError: float division by zero\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=1)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       5      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "2": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, \n            0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_2_1(self):\n        self.assertEqual(rescale_to_unit([5.0, 4.0, 3.0, 2.0, 1.0]), [1.0, \n            0.75, 0.5, 0.25, 0.0])\n\n    def test_rescale_to_unit_3_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 2.0, 2.0, 2.0]), [0.0, \n            0.0, 1.0, 1.0, 1.0])\n\n    def test_rescale_to_unit_4_1(self):\n        self.assertEqual(rescale_to_unit([2.0, 2.0, 2.0, 1.0, 1.0]), [1.0, \n            1.0, 1.0, 0.0, 0.0])\n\n    def test_rescale_to_unit_6_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]), [0.0, \n            0.0, 0.0, 0.0, 0.0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "....E\n======================================================================\nERROR: test_rescale_to_unit_6_1 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 25, in test_rescale_to_unit_6_1\n    self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]), [0.0,\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\nZeroDivisionError: float division by zero\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (errors=1)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       5      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "3": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, \n            0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_2_1(self):\n        self.assertEqual(rescale_to_unit([5.0, 4.0, 3.0, 2.0, 1.0]), [1.0, \n            0.75, 0.5, 0.25, 0.0])\n\n    def test_rescale_to_unit_3_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 2.0, 2.0, 2.0]), [0.0, \n            0.0, 1.0, 1.0, 1.0])\n\n    def test_rescale_to_unit_4_1(self):\n        self.assertEqual(rescale_to_unit([2.0, 2.0, 2.0, 1.0, 1.0]), [1.0, \n            1.0, 1.0, 0.0, 0.0])\n\n    def test_rescale_to_unit_5_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0,\n            3.0, 2.0, 1.0]), [0.0, 0.25, 0.5, 0.75, 1.0, 1.0, 0.75, 0.5, \n            0.25, 0.0])\n\n    def test_rescale_to_unit_6_1_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]), [0.0, \n            0.0, 0.0, 0.0, 0.0])\n\n    def test_rescale_to_unit_same_numbers_1(self):\n        self.assertEqual(rescale_to_unit([3.0, 3.0, 3.0, 3.0, 3.0]), [0.0, \n            0.0, 0.0, 0.0, 0.0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": ".....EE\n======================================================================\nERROR: test_rescale_to_unit_6_1_1 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 30, in test_rescale_to_unit_6_1_1\n    self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]), [0.0,\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\nZeroDivisionError: float division by zero\n\n======================================================================\nERROR: test_rescale_to_unit_same_numbers_1 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 34, in test_rescale_to_unit_same_numbers_1\n    self.assertEqual(rescale_to_unit([3.0, 3.0, 3.0, 3.0, 3.0]), [0.0,\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in rescale_to_unit\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py\", line 12, in <listcomp>\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\nZeroDivisionError: float division by zero\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (errors=2)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       5      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "4": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, \n            0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_2_1(self):\n        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5, 1.0])\n\n    def test_rescale_to_unit_3_1(self):\n        self.assertEqual(rescale_to_unit([1.1, 1.2, 1.3, 1.4, 1.5]), [0.0, \n            0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_4_1(self):\n        self.assertEqual(rescale_to_unit([5.0, 3.0, 1.0, 2.0, 4.0]), [1.0, \n            0.5, 0.0, 0.25, 0.75])\n\n    def test_rescale_to_unit_5_1(self):\n        self.assertEqual(rescale_to_unit([1.0001, 1.0002, 1.0003, 1.0004, \n            1.0005]), [0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_6_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 1.1, 1.0, 1.1, 1.0]), [0.0, \n            1.0, 0.0, 1.0, 0.0])\n\n    def test_rescale_to_unit_7_1(self):\n        self.assertEqual(rescale_to_unit([3.0, 3.1, 3.0, 3.1, 3.0]), [0.0, \n            1.0, 0.0, 1.0, 0.0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "..F....\n======================================================================\nFAIL: test_rescale_to_unit_3_1 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 16, in test_rescale_to_unit_3_1\n    self.assertEqual(rescale_to_unit([1.1, 1.2, 1.3, 1.4, 1.5]), [0.0,\nAssertionError: Lists differ: [0.0, 0.24999999999999972, 0.5, 0.7499999999999997, 1.0] != [0.0, 0.25, 0.5, 0.75, 1.0]\n\nFirst differing element 1:\n0.24999999999999972\n0.25\n\n- [0.0, 0.24999999999999972, 0.5, 0.7499999999999997, 1.0]\n+ [0.0, 0.25, 0.5, 0.75, 1.0]\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (failures=1)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       5      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        },
        "5": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1_1(self):\n        self.assertAlmostEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]),\n            [0.0, 0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_2_1(self):\n        self.assertAlmostEqual(rescale_to_unit([1.1, 1.2, 1.3, 1.4, 1.5]),\n            [0.0, 0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_3_1(self):\n        self.assertAlmostEqual(rescale_to_unit([10, 20, 30, 40, 50]), [0.0,\n            0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_4_1(self):\n        self.assertAlmostEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5,\n            1.0], places=7)\n\n    def test_rescale_to_unit_5_1(self):\n        self.assertAlmostEqual(rescale_to_unit([0.0, 0.0, 0.0, 0.0, 1.0]),\n            [0.0, 0.0, 0.0, 0.0, 1.0], places=7)\n\n    def test_rescale_to_unit_6_1(self):\n        self.assertAlmostEqual(rescale_to_unit([1e-07, 1e-06, 1e-05, 0.0001,\n            0.001]), [0.0, 0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_7_1(self):\n        self.assertAlmostEqual(rescale_to_unit([10000000.0, 100000000.0, \n            1000000000.0, 10000000000.0, 100000000000.0]), [0.0, 0.25, 0.5,\n            0.75, 1.0], places=7)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": ".E...EE\n======================================================================\nERROR: test_rescale_to_unit_2_1 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 13, in test_rescale_to_unit_2_1\n    self.assertAlmostEqual(rescale_to_unit([1.1, 1.2, 1.3, 1.4, 1.5]),\n  File \"/home/vu.ho_ttsds/miniconda3/envs/api_mapping/lib/python3.9/unittest/case.py\", line 868, in assertAlmostEqual\n    diff = abs(first - second)\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n======================================================================\nERROR: test_rescale_to_unit_6_1 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 29, in test_rescale_to_unit_6_1\n    self.assertAlmostEqual(rescale_to_unit([1e-07, 1e-06, 1e-05, 0.0001,\n  File \"/home/vu.ho_ttsds/miniconda3/envs/api_mapping/lib/python3.9/unittest/case.py\", line 868, in assertAlmostEqual\n    diff = abs(first - second)\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n======================================================================\nERROR: test_rescale_to_unit_7_1 (__main__.TestRescaleToUnit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/generated_test.py\", line 33, in test_rescale_to_unit_7_1\n    self.assertAlmostEqual(rescale_to_unit([10000000.0, 100000000.0,\n  File \"/home/vu.ho_ttsds/miniconda3/envs/api_mapping/lib/python3.9/unittest/case.py\", line 868, in assertAlmostEqual\n    diff = abs(first - second)\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (errors=3)\n\nName                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       5      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            5      0   100%\n",
            "coverage": 100.0,
            "exist_error": true
        }
    },
    "exist_error": true,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 0,
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1_1(self):\n        self.assertAlmostEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]),\n            [0.0, 0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_2_1(self):\n        self.assertAlmostEqual(rescale_to_unit([1.1, 1.2, 1.3, 1.4, 1.5]),\n            [0.0, 0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_3_1(self):\n        self.assertAlmostEqual(rescale_to_unit([10, 20, 30, 40, 50]), [0.0,\n            0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_4_1(self):\n        self.assertAlmostEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5,\n            1.0], places=7)\n\n    def test_rescale_to_unit_5_1(self):\n        self.assertAlmostEqual(rescale_to_unit([0.0, 0.0, 0.0, 0.0, 1.0]),\n            [0.0, 0.0, 0.0, 0.0, 1.0], places=7)\n\n    def test_rescale_to_unit_6_1(self):\n        self.assertAlmostEqual(rescale_to_unit([1e-07, 1e-06, 1e-05, 0.0001,\n            0.001]), [0.0, 0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_7_1(self):\n        self.assertAlmostEqual(rescale_to_unit([10000000.0, 100000000.0, \n            1000000000.0, 10000000000.0, 100000000000.0]), [0.0, 0.25, 0.5,\n            0.75, 1.0], places=7)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1(self):\n        self.assertEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]), [0.0, \n            0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_2(self):\n        self.assertEqual(rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]), [\n            0.0, 0.25, 0.5, 0.75, 1.0])\n\n    def test_rescale_to_unit_3(self):\n        self.assertEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5, 1.0])\n\n    def test_rescale_to_unit_4(self):\n        self.assertEqual(rescale_to_unit([0.0, 0.0, 0.0, 0.0, 1.0]), [0.0, \n            0.0, 0.0, 0.0, 1.0])\n\n    def test_rescale_to_unit_5(self):\n        self.assertEqual(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]), [0.0, \n            0.0, 0.0, 0.0, 0.0])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import rescale_to_unit\n\n\nclass TestRescaleToUnit(unittest.TestCase):\n\n    def test_rescale_to_unit_1_1_1(self):\n        self.assertAlmostEqual(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]),\n            [0.0, 0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_3_1_1(self):\n        self.assertAlmostEqual(rescale_to_unit([10, 20, 30, 40, 50]), [0.0,\n            0.25, 0.5, 0.75, 1.0], places=7)\n\n    def test_rescale_to_unit_4_1_1(self):\n        self.assertAlmostEqual(rescale_to_unit([-1.0, 0.0, 1.0]), [0.0, 0.5,\n            1.0], places=7)\n\n    def test_rescale_to_unit_5_1_1(self):\n        self.assertAlmostEqual(rescale_to_unit([0.0, 0.0, 0.0, 0.0, 1.0]),\n            [0.0, 0.0, 0.0, 0.0, 1.0], places=7)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 100.0,
    "use_filter": true,
    "exist_not_error": false
}