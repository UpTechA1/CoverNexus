{
    "task_id": "HumanEval/57",
    "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
    "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
    "entry_point": "monotonic",
    "coverage": 100.0,
    "num_iterations_used": 1,
    "msg_trace": {
        "1": {
            "generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import monotonic\n\n\nclass TestMonotonic(unittest.TestCase):\n\n    def test_monotonic_increasing_1(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_monotonic_decreasing_1(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_monotonic_not_monotonic_1(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_monotonic_single_element_1(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_monotonic_empty_list_1(self):\n        self.assertTrue(monotonic([]))\n\n    def test_monotonic_negative_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, -3, -2, -1]))\n\n    def test_monotonic_mixed_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, 0, 2, 5]))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
            "executed_output": "Name                                                                                         Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------------------------------------------\n/home/vu.ho_ttsds/Coverage-Test-Agent/test_coverage_multiagents/temp_test_gpt4/codebase.py       4      0   100%\n--------------------------------------------------------------------------------------------------------------------------\nTOTAL                                                                                            4      0   100%\n",
            "coverage": 100.0,
            "exist_error": false
        }
    },
    "exist_error": false,
    "best_score": 100.0,
    "first_score": 100.0,
    "not_error_best_score": 100.0,
    "best_score_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import monotonic\n\n\nclass TestMonotonic(unittest.TestCase):\n\n    def test_monotonic_increasing_1(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_monotonic_decreasing_1(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_monotonic_not_monotonic_1(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_monotonic_single_element_1(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_monotonic_empty_list_1(self):\n        self.assertTrue(monotonic([]))\n\n    def test_monotonic_negative_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, -3, -2, -1]))\n\n    def test_monotonic_mixed_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, 0, 2, 5]))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "first_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import monotonic\n\n\nclass TestMonotonic(unittest.TestCase):\n\n    def test_monotonic_increasing_1(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_monotonic_decreasing_1(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_monotonic_not_monotonic_1(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_monotonic_single_element_1(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_monotonic_empty_list_1(self):\n        self.assertTrue(monotonic([]))\n\n    def test_monotonic_negative_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, -3, -2, -1]))\n\n    def test_monotonic_mixed_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, 0, 2, 5]))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "not_error_best_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import monotonic\n\n\nclass TestMonotonic(unittest.TestCase):\n\n    def test_monotonic_increasing_1(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_monotonic_decreasing_1(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_monotonic_not_monotonic_1(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_monotonic_single_element_1(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_monotonic_empty_list_1(self):\n        self.assertTrue(monotonic([]))\n\n    def test_monotonic_negative_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, -3, -2, -1]))\n\n    def test_monotonic_mixed_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, 0, 2, 5]))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_generated_test_script": "from codebase import *\nimport unittest\nfrom codebase import monotonic\n\n\nclass TestMonotonic(unittest.TestCase):\n\n    def test_monotonic_increasing_1(self):\n        self.assertTrue(monotonic([1, 2, 3, 4, 5]))\n\n    def test_monotonic_decreasing_1(self):\n        self.assertTrue(monotonic([5, 4, 3, 2, 1]))\n\n    def test_monotonic_not_monotonic_1(self):\n        self.assertFalse(monotonic([1, 3, 2, 4, 5]))\n\n    def test_monotonic_single_element_1(self):\n        self.assertTrue(monotonic([1]))\n\n    def test_monotonic_empty_list_1(self):\n        self.assertTrue(monotonic([]))\n\n    def test_monotonic_negative_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, -3, -2, -1]))\n\n    def test_monotonic_mixed_numbers_1(self):\n        self.assertTrue(monotonic([-5, -4, 0, 2, 5]))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "filtered_score": 100.0,
    "use_filter": false,
    "exist_not_error": true
}